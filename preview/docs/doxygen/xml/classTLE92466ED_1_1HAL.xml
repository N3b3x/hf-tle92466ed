<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classTLE92466ED_1_1HAL" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>TLE92466ED::HAL</compoundname>
    <derivedcompoundref refid="classTLE92466ED_1_1ExampleHAL" prot="public" virt="non-virtual">TLE92466ED::ExampleHAL</derivedcompoundref>
    <includes refid="TLE92466ED__HAL_8hpp" local="no">TLE92466ED_HAL.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1a4f0301428e060c380513aca7d7528934" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual TLE92466ED::HAL::~HAL</definition>
        <argsstring>()=default</argsstring>
        <name>~HAL</name>
        <qualifiedname>TLE92466ED::HAL::~HAL</qualifiedname>
        <briefdescription>
<para>Virtual destructor for polymorphic behavior. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="129" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1a9e9e1030ced3f189fabb99ab539117ca" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>virtual HALResult&lt; void &gt; TLE92466ED::HAL::init</definition>
        <argsstring>() noexcept=0</argsstring>
        <name>init</name>
        <qualifiedname>TLE92466ED::HAL::init</qualifiedname>
        <reimplementedby refid="classTLE92466ED_1_1ExampleHAL_1ade76b2bdcbe732aaf5d048cf9cb5e9b8">init</reimplementedby>
        <briefdescription>
<para>Initialize the hardware interface. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should initialize the SPI peripheral, configure GPIO pins, and prepare the hardware for communication. It should be called before any other <ref refid="classTLE92466ED_1_1HAL" kindref="compound">HAL</ref> functions.</para>
<para><simplesect kind="return"><para>HALResult&lt;void&gt; Success or error code </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="namespaceTLE92466ED_1ac1de4cdc9257b7d596222fcf888eb7c3a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">HALError::None</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespaceTLE92466ED_1ac1de4cdc9257b7d596222fcf888eb7c3a257b0abd705d3c26ae57e58f6732eb0a" kindref="member">HALError::HardwareNotReady</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Hardware initialization failed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespaceTLE92466ED_1ac1de4cdc9257b7d596222fcf888eb7c3a627251310d3384b591e4138be21145d5" kindref="member">HALError::InvalidParameter</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="144" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1a956672b9644a0c6d0e909a42a5905507" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>virtual HALResult&lt; void &gt; TLE92466ED::HAL::deinit</definition>
        <argsstring>() noexcept=0</argsstring>
        <name>deinit</name>
        <qualifiedname>TLE92466ED::HAL::deinit</qualifiedname>
        <reimplementedby refid="classTLE92466ED_1_1ExampleHAL_1aca2fe4367464d9c650d8639452f71e4f">deinit</reimplementedby>
        <briefdescription>
<para>Deinitialize the hardware interface. </para>
        </briefdescription>
        <detaileddescription>
<para>Releases hardware resources and disables the SPI peripheral. Should be called when the driver is no longer needed.</para>
<para><simplesect kind="return"><para>HALResult&lt;void&gt; Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="155" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1a3e86c206af4ae52090c56eaf2190f262" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; uint32_t &gt;</type>
        <definition>virtual HALResult&lt; uint32_t &gt; TLE92466ED::HAL::transfer32</definition>
        <argsstring>(uint32_t tx_data) noexcept=0</argsstring>
        <name>transfer32</name>
        <qualifiedname>TLE92466ED::HAL::transfer32</qualifiedname>
        <reimplementedby refid="classTLE92466ED_1_1ExampleHAL_1a94f5aee89ec1d8bfe9f9edc5c898fc5c">transfer32</reimplementedby>
        <param>
          <type>uint32_t</type>
          <declname>tx_data</declname>
        </param>
        <briefdescription>
<para>Transfer 32-bit data via SPI (full-duplex) </para>
        </briefdescription>
        <detaileddescription>
<para>Performs a full-duplex SPI transaction, simultaneously sending and receiving 32 bits of data. This is the primary communication method for the <ref refid="namespaceTLE92466ED" kindref="compound">TLE92466ED</ref>.</para>
<para>The <ref refid="namespaceTLE92466ED" kindref="compound">TLE92466ED</ref> requires 32-bit SPI frames with the following format:<itemizedlist>
<listitem><para>Bits [31:24]: CRC-8 (SAE J1850)</para>
</listitem><listitem><para>Bits [23:17]: Register address (7 bits of 10-bit address)</para>
</listitem><listitem><para>Bit [16]: R/W (1=Write, 0=Read)</para>
</listitem><listitem><para>Bits [15:0]: Data (16 bits)</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The 32-bit data to transmit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HALResult&lt;uint32_t&gt; Received 32-bit data or error </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="namespaceTLE92466ED_1ac1de4cdc9257b7d596222fcf888eb7c3ab36f64f307472d2304bafef8bebc15a9" kindref="member">HALError::TransferError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>SPI transfer failed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespaceTLE92466ED_1ac1de4cdc9257b7d596222fcf888eb7c3ac85a251cc457840f1e032f1b733e9398" kindref="member">HALError::Timeout</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Transfer timeout</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Timing Requirements:</title><para><itemizedlist>
<listitem><para>CS must be held low during entire 32-bit transfer</para>
</listitem><listitem><para>Minimum CS inactive time between transfers: 100ns</para>
</listitem><listitem><para>Data sampled on rising edge (CPHA=0)</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para>CRC calculation is handled by the driver layer, not <ref refid="classTLE92466ED_1_1HAL" kindref="compound">HAL</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="183" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1a097041e11aeb3a03cde16520bfcb799c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>virtual HALResult&lt; void &gt; TLE92466ED::HAL::transfer_multi</definition>
        <argsstring>(std::span&lt; const uint32_t &gt; tx_data, std::span&lt; uint32_t &gt; rx_data) noexcept=0</argsstring>
        <name>transfer_multi</name>
        <qualifiedname>TLE92466ED::HAL::transfer_multi</qualifiedname>
        <reimplementedby refid="classTLE92466ED_1_1ExampleHAL_1a77b62a8962fa195f12ceb4a6cbf7184e">transfer_multi</reimplementedby>
        <param>
          <type>std::span&lt; const uint32_t &gt;</type>
          <declname>tx_data</declname>
        </param>
        <param>
          <type>std::span&lt; uint32_t &gt;</type>
          <declname>rx_data</declname>
        </param>
        <briefdescription>
<para>Transfer multiple 32-bit words via SPI. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs multiple consecutive SPI transfers efficiently. Useful for reading or writing multiple registers in sequence.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Span of transmit data (32-bit words) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Span to store received data (32-bit words) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HALResult&lt;void&gt; Success or error code </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="namespaceTLE92466ED_1ac1de4cdc9257b7d596222fcf888eb7c3a627251310d3384b591e4138be21145d5" kindref="member">HALError::InvalidParameter</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer size mismatch </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespaceTLE92466ED_1ac1de4cdc9257b7d596222fcf888eb7c3ab36f64f307472d2304bafef8bebc15a9" kindref="member">HALError::TransferError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Transfer failed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>tx_data.size() == rx_data.size() </para>
</simplesect>
<simplesect kind="pre"><para>Both spans must be valid for the duration of the transfer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="201" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1acf35d9f891cd8430a6ef3cee2772995d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>virtual HALResult&lt; void &gt; TLE92466ED::HAL::chip_select</definition>
        <argsstring>() noexcept=0</argsstring>
        <name>chip_select</name>
        <qualifiedname>TLE92466ED::HAL::chip_select</qualifiedname>
        <reimplementedby refid="classTLE92466ED_1_1ExampleHAL_1ab5ce6d1f460d9078afcbe40a21897be0">chip_select</reimplementedby>
        <briefdescription>
<para>Assert (activate) chip select. </para>
        </briefdescription>
        <detaileddescription>
<para>Pulls the CS line low to select the <ref refid="namespaceTLE92466ED" kindref="compound">TLE92466ED</ref> for communication. Must be called before SPI transfers in manual CS mode.</para>
<para><simplesect kind="return"><para>HALResult&lt;void&gt; Success or error code </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="namespaceTLE92466ED_1ac1de4cdc9257b7d596222fcf888eb7c3aaaa15b56c30bd5c7cd6770c343653999" kindref="member">HALError::ChipselectError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>CS control failed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some implementations may handle CS automatically in <ref refid="classTLE92466ED_1_1HAL_1a3e86c206af4ae52090c56eaf2190f262" kindref="member">transfer32()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="217" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1adc04e4611b63548e71dea1b54b50f6ff" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>virtual HALResult&lt; void &gt; TLE92466ED::HAL::chip_deselect</definition>
        <argsstring>() noexcept=0</argsstring>
        <name>chip_deselect</name>
        <qualifiedname>TLE92466ED::HAL::chip_deselect</qualifiedname>
        <reimplementedby refid="classTLE92466ED_1_1ExampleHAL_1a2a23fe30261ec2b948bd01e3d41a14e7">chip_deselect</reimplementedby>
        <briefdescription>
<para>Deassert (deactivate) chip select. </para>
        </briefdescription>
        <detaileddescription>
<para>Pulls the CS line high to deselect the <ref refid="namespaceTLE92466ED" kindref="compound">TLE92466ED</ref> after communication. Must be called after SPI transfers in manual CS mode.</para>
<para><simplesect kind="return"><para>HALResult&lt;void&gt; Success or error code </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="namespaceTLE92466ED_1ac1de4cdc9257b7d596222fcf888eb7c3aaaa15b56c30bd5c7cd6770c343653999" kindref="member">HALError::ChipselectError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>CS control failed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="229" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1a44752042b769aab71d215d9c6557349a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>virtual HALResult&lt; void &gt; TLE92466ED::HAL::delay</definition>
        <argsstring>(uint32_t microseconds) noexcept=0</argsstring>
        <name>delay</name>
        <qualifiedname>TLE92466ED::HAL::delay</qualifiedname>
        <reimplementedby refid="classTLE92466ED_1_1ExampleHAL_1a3f86764aa0b4e2408e826e4986893389">delay</reimplementedby>
        <param>
          <type>uint32_t</type>
          <declname>microseconds</declname>
        </param>
        <briefdescription>
<para>Delay for specified duration. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides a hardware-specific delay implementation. Required for timing constraints such as reset pulse width and power-up delays.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">microseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration to delay in microseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HALResult&lt;void&gt; Success or error code</para>
</simplesect>
<simplesect kind="par"><title>Timing Requirements:</title><para><itemizedlist>
<listitem><para>Reset pulse width: minimum 1µs</para>
</listitem><listitem><para>Power-up delay: minimum 1ms </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="245" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1ac7d9c64c836ab51a0f878698302a1413" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>virtual HALResult&lt; void &gt; TLE92466ED::HAL::configure</definition>
        <argsstring>(const SPIConfig &amp;config) noexcept=0</argsstring>
        <name>configure</name>
        <qualifiedname>TLE92466ED::HAL::configure</qualifiedname>
        <reimplementedby refid="classTLE92466ED_1_1ExampleHAL_1a233bb6b92374f0ae245f62054e7850dd">configure</reimplementedby>
        <param>
          <type>const <ref refid="structTLE92466ED_1_1SPIConfig" kindref="compound">SPIConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configure SPI parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates the SPI configuration. Can be called at runtime to adjust communication parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>New SPI configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HALResult&lt;void&gt; Success or error code </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="namespaceTLE92466ED_1ac1de4cdc9257b7d596222fcf888eb7c3a627251310d3384b591e4138be21145d5" kindref="member">HALError::InvalidParameter</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>TLE92466ED SPI Requirements:</title><para><itemizedlist>
<listitem><para>Frequency: 100 kHz - 10 MHz</para>
</listitem><listitem><para>Mode: 0 (CPOL=0, CPHA=0)</para>
</listitem><listitem><para>Bit order: MSB first</para>
</listitem><listitem><para>Frame size: 32 bits (4 bytes) </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="264" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1ad20769b9f4fbcb0ca6e23800feccccf3" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool TLE92466ED::HAL::is_ready</definition>
        <argsstring>() const noexcept=0</argsstring>
        <name>is_ready</name>
        <qualifiedname>TLE92466ED::HAL::is_ready</qualifiedname>
        <reimplementedby refid="classTLE92466ED_1_1ExampleHAL_1acb6f6bbc4c2c8d28892ba095386346ed">is_ready</reimplementedby>
        <briefdescription>
<para>Check if hardware is ready for communication. </para>
        </briefdescription>
        <detaileddescription>
<para>Verifies that the hardware interface is initialized and ready for SPI transactions.</para>
<para><simplesect kind="return"><para>true if ready, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="275" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1a15cae9dcbfd3f6161bc0b8ce776fc8ec" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="namespaceTLE92466ED_1ac1de4cdc9257b7d596222fcf888eb7c3" kindref="member">HALError</ref></type>
        <definition>virtual HALError TLE92466ED::HAL::get_last_error</definition>
        <argsstring>() const noexcept=0</argsstring>
        <name>get_last_error</name>
        <qualifiedname>TLE92466ED::HAL::get_last_error</qualifiedname>
        <reimplementedby refid="classTLE92466ED_1_1ExampleHAL_1a82b32aadebefa4c9516cdfc806adbc76">get_last_error</reimplementedby>
        <briefdescription>
<para>Get the last error that occurred. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the most recent error code. Useful for debugging and error recovery.</para>
<para><simplesect kind="return"><para>HALError The last error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="286" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1a3e16e6e34b24bc62c183f77a2c10926b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>virtual HALResult&lt; void &gt; TLE92466ED::HAL::clear_errors</definition>
        <argsstring>() noexcept=0</argsstring>
        <name>clear_errors</name>
        <qualifiedname>TLE92466ED::HAL::clear_errors</qualifiedname>
        <reimplementedby refid="classTLE92466ED_1_1ExampleHAL_1af3c3239541c6cee3e33679bedfb670bd">clear_errors</reimplementedby>
        <briefdescription>
<para>Clear any pending errors. </para>
        </briefdescription>
        <detaileddescription>
<para>Resets the error state. Should be called after handling an error condition and before retrying operations.</para>
<para><simplesect kind="return"><para>HALResult&lt;void&gt; Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="297" column="24"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1a046e4d5ea9ff8cb638d117a7b955fb72" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TLE92466ED::HAL::HAL</definition>
        <argsstring>()=default</argsstring>
        <name>HAL</name>
        <qualifiedname>TLE92466ED::HAL::HAL</qualifiedname>
        <briefdescription>
<para>Protected constructor to prevent direct instantiation. </para>
        </briefdescription>
        <detaileddescription>
<para>This class can only be instantiated through derived classes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="306" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1a84a3718090608281e766d6f6a3a6216b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TLE92466ED::HAL::HAL</definition>
        <argsstring>(const HAL &amp;)=delete</argsstring>
        <name>HAL</name>
        <qualifiedname>TLE92466ED::HAL::HAL</qualifiedname>
        <param>
          <type>const <ref refid="classTLE92466ED_1_1HAL" kindref="compound">HAL</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Prevent copying. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="311" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1a39c1634fce8b96b25d35661a015c1845" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTLE92466ED_1_1HAL" kindref="compound">HAL</ref> &amp;</type>
        <definition>HAL &amp; TLE92466ED::HAL::operator=</definition>
        <argsstring>(const HAL &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>TLE92466ED::HAL::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classTLE92466ED_1_1HAL" kindref="compound">HAL</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="312" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1a66f2dc7f30a013e24748a536063f4768" prot="protected" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>TLE92466ED::HAL::HAL</definition>
        <argsstring>(HAL &amp;&amp;) noexcept=default</argsstring>
        <name>HAL</name>
        <qualifiedname>TLE92466ED::HAL::HAL</qualifiedname>
        <param>
          <type><ref refid="classTLE92466ED_1_1HAL" kindref="compound">HAL</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Allow moving. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="317" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1HAL_1a87d0f77ad940df38e77149b37cc986cd" prot="protected" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classTLE92466ED_1_1HAL" kindref="compound">HAL</ref> &amp;</type>
        <definition>HAL &amp; TLE92466ED::HAL::operator=</definition>
        <argsstring>(HAL &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>TLE92466ED::HAL::operator=</qualifiedname>
        <param>
          <type><ref refid="classTLE92466ED_1_1HAL" kindref="compound">HAL</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TLE92466ED_HAL.hpp" line="318" column="9"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Abstract Hardware Abstraction Layer (<ref refid="classTLE92466ED_1_1HAL" kindref="compound">HAL</ref>) base class. </para>
    </briefdescription>
    <detaileddescription>
<para>This pure virtual base class defines the interface that must be implemented for hardware-specific SPI communication. Users must derive from this class and implement the virtual functions for their specific hardware platform (e.g., STM32, ESP32, Arduino, Linux, etc.).</para>
<para>The <ref refid="classTLE92466ED_1_1HAL" kindref="compound">HAL</ref> uses modern C++20/23 features including:<itemizedlist>
<listitem><para>Concepts for compile-time constraints</para>
</listitem><listitem><para>std::span for safe array access</para>
</listitem><listitem><para>std::expected for error handling</para>
</listitem><listitem><para>uint32_t for time management (microseconds)</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>32-Bit SPI Communication:</title><para>The <ref refid="namespaceTLE92466ED" kindref="compound">TLE92466ED</ref> requires 32-bit SPI frames. Implementations must:<itemizedlist>
<listitem><para>Transfer 4 bytes (32 bits) per transaction</para>
</listitem><listitem><para>Maintain MSB-first byte order</para>
</listitem><listitem><para>Support full-duplex operation</para>
</listitem><listitem><para>Calculate and verify CRC-8 (SAE J1850)</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Example Implementation:</title><para><programlisting filename=".cpp"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyPlatformHAL<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classTLE92466ED_1_1HAL" kindref="compound">TLE92466ED::HAL</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>HALResult&lt;uint32_t&gt;<sp/>transfer32(uint32_t<sp/>data)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>result<sp/>=<sp/>spi_transfer_32bit(data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spi_error())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unexpected(HALError::TransferError);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>implement<sp/>other<sp/>virtual<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="par"><title>Thread Safety:</title><para>Implementations must ensure thread-safety for multi-threaded environments.</para>
</simplesect>
<simplesect kind="par"><title>Hardware Requirements:</title><para><itemizedlist>
<listitem><para>SPI peripheral capable of 32-bit transfers (or 4x 8-bit)</para>
</listitem><listitem><para>Minimum frequency: 100 kHz</para>
</listitem><listitem><para>Maximum frequency: 10 MHz</para>
</listitem><listitem><para>Support for SPI Mode 0 (CPOL=0, CPHA=0)</para>
</listitem><listitem><para>CRC calculation capability (hardware or software) </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>TLE92466ED::ExampleHAL</label>
        <link refid="classTLE92466ED_1_1ExampleHAL"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>TLE92466ED::HAL</label>
        <link refid="classTLE92466ED_1_1HAL"/>
      </node>
    </inheritancegraph>
    <location file="include/TLE92466ED_HAL.hpp" line="124" column="1" bodyfile="include/TLE92466ED_HAL.hpp" bodystart="124" bodyend="319"/>
    <listofallmembers>
      <member refid="classTLE92466ED_1_1HAL_1adc04e4611b63548e71dea1b54b50f6ff" prot="public" virt="pure-virtual"><scope>TLE92466ED::HAL</scope><name>chip_deselect</name></member>
      <member refid="classTLE92466ED_1_1HAL_1acf35d9f891cd8430a6ef3cee2772995d" prot="public" virt="pure-virtual"><scope>TLE92466ED::HAL</scope><name>chip_select</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a3e16e6e34b24bc62c183f77a2c10926b" prot="public" virt="pure-virtual"><scope>TLE92466ED::HAL</scope><name>clear_errors</name></member>
      <member refid="classTLE92466ED_1_1HAL_1ac7d9c64c836ab51a0f878698302a1413" prot="public" virt="pure-virtual"><scope>TLE92466ED::HAL</scope><name>configure</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a956672b9644a0c6d0e909a42a5905507" prot="public" virt="pure-virtual"><scope>TLE92466ED::HAL</scope><name>deinit</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a44752042b769aab71d215d9c6557349a" prot="public" virt="pure-virtual"><scope>TLE92466ED::HAL</scope><name>delay</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a15cae9dcbfd3f6161bc0b8ce776fc8ec" prot="public" virt="pure-virtual"><scope>TLE92466ED::HAL</scope><name>get_last_error</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a046e4d5ea9ff8cb638d117a7b955fb72" prot="protected" virt="non-virtual"><scope>TLE92466ED::HAL</scope><name>HAL</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a84a3718090608281e766d6f6a3a6216b" prot="protected" virt="non-virtual"><scope>TLE92466ED::HAL</scope><name>HAL</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a66f2dc7f30a013e24748a536063f4768" prot="protected" virt="non-virtual"><scope>TLE92466ED::HAL</scope><name>HAL</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a9e9e1030ced3f189fabb99ab539117ca" prot="public" virt="pure-virtual"><scope>TLE92466ED::HAL</scope><name>init</name></member>
      <member refid="classTLE92466ED_1_1HAL_1ad20769b9f4fbcb0ca6e23800feccccf3" prot="public" virt="pure-virtual"><scope>TLE92466ED::HAL</scope><name>is_ready</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a39c1634fce8b96b25d35661a015c1845" prot="protected" virt="non-virtual"><scope>TLE92466ED::HAL</scope><name>operator=</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a87d0f77ad940df38e77149b37cc986cd" prot="protected" virt="non-virtual"><scope>TLE92466ED::HAL</scope><name>operator=</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a3e86c206af4ae52090c56eaf2190f262" prot="public" virt="pure-virtual"><scope>TLE92466ED::HAL</scope><name>transfer32</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a097041e11aeb3a03cde16520bfcb799c" prot="public" virt="pure-virtual"><scope>TLE92466ED::HAL</scope><name>transfer_multi</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a4f0301428e060c380513aca7d7528934" prot="public" virt="virtual"><scope>TLE92466ED::HAL</scope><name>~HAL</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
