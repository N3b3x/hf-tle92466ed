<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classTLE92466ED_1_1ExampleHAL" kind="class" language="C++" prot="public">
    <compoundname>TLE92466ED::ExampleHAL</compoundname>
    <basecompoundref refid="classTLE92466ED_1_1HAL" prot="public" virt="non-virtual">TLE92466ED::HAL</basecompoundref>
    <includes refid="example__hal_8hpp" local="no">example_hal.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classTLE92466ED_1_1ExampleHAL_1a171d526c59010903735b6decc65dbfa8" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int TLE92466ED::ExampleHAL::spi_device_</definition>
        <argsstring></argsstring>
        <name>spi_device_</name>
        <qualifiedname>TLE92466ED::ExampleHAL::spi_device_</qualifiedname>
        <briefdescription>
<para>SPI device identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="264" column="10" bodyfile="examples/example_hal.hpp" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classTLE92466ED_1_1ExampleHAL_1a5ab8c6c8f1e7f76762563f7872e086d3" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int TLE92466ED::ExampleHAL::cs_pin_</definition>
        <argsstring></argsstring>
        <name>cs_pin_</name>
        <qualifiedname>TLE92466ED::ExampleHAL::cs_pin_</qualifiedname>
        <briefdescription>
<para>Chip select pin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="265" column="10" bodyfile="examples/example_hal.hpp" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classTLE92466ED_1_1ExampleHAL_1a03fab6d1a70b3ea3822eb1385e0748a3" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TLE92466ED::ExampleHAL::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <qualifiedname>TLE92466ED::ExampleHAL::initialized_</qualifiedname>
        <briefdescription>
<para>Initialization status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="266" column="10" bodyfile="examples/example_hal.hpp" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classTLE92466ED_1_1ExampleHAL_1acfba888b54d9543ea5e61a26bbb3743f" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceTLE92466ED_1ac1de4cdc9257b7d596222fcf888eb7c3" kindref="member">HALError</ref></type>
        <definition>HALError TLE92466ED::ExampleHAL::last_error_</definition>
        <argsstring></argsstring>
        <name>last_error_</name>
        <qualifiedname>TLE92466ED::ExampleHAL::last_error_</qualifiedname>
        <briefdescription>
<para>Last error code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="267" column="14" bodyfile="examples/example_hal.hpp" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classTLE92466ED_1_1ExampleHAL_1ac30ffe21f8cf4bdc0d37dc6f0294c48a" prot="private" static="no" mutable="no">
        <type><ref refid="structTLE92466ED_1_1SPIConfig" kindref="compound">SPIConfig</ref></type>
        <definition>SPIConfig TLE92466ED::ExampleHAL::config_</definition>
        <argsstring></argsstring>
        <name>config_</name>
        <qualifiedname>TLE92466ED::ExampleHAL::config_</qualifiedname>
        <briefdescription>
<para>Current SPI configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="268" column="15" bodyfile="examples/example_hal.hpp" bodystart="268" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classTLE92466ED_1_1ExampleHAL_1af303b6513437914a99dfcfa4d265d1fb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>TLE92466ED::ExampleHAL::ExampleHAL</definition>
        <argsstring>(int spi_device=0, int cs_pin=10) noexcept</argsstring>
        <name>ExampleHAL</name>
        <qualifiedname>TLE92466ED::ExampleHAL::ExampleHAL</qualifiedname>
        <param>
          <type>int</type>
          <declname>spi_device</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>cs_pin</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spi_device</parametername>
</parameternamelist>
<parameterdescription>
<para>Platform-specific SPI device identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cs_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Chip select pin identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="50" column="5" bodyfile="examples/example_hal.hpp" bodystart="50" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1ExampleHAL_1ade76b2bdcbe732aaf5d048cf9cb5e9b8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>HALResult&lt; void &gt; TLE92466ED::ExampleHAL::init</definition>
        <argsstring>() noexcept override</argsstring>
        <name>init</name>
        <qualifiedname>TLE92466ED::ExampleHAL::init</qualifiedname>
        <reimplements refid="classTLE92466ED_1_1HAL_1a9e9e1030ced3f189fabb99ab539117ca">init</reimplements>
        <briefdescription>
<para>Initialize SPI hardware for 32-bit communication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="60" column="16" bodyfile="examples/example_hal.hpp" bodystart="60" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1ExampleHAL_1aca2fe4367464d9c650d8639452f71e4f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>HALResult&lt; void &gt; TLE92466ED::ExampleHAL::deinit</definition>
        <argsstring>() noexcept override</argsstring>
        <name>deinit</name>
        <qualifiedname>TLE92466ED::ExampleHAL::deinit</qualifiedname>
        <reimplements refid="classTLE92466ED_1_1HAL_1a956672b9644a0c6d0e909a42a5905507">deinit</reimplements>
        <briefdescription>
<para>Deinitialize SPI hardware. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="85" column="16" bodyfile="examples/example_hal.hpp" bodystart="85" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1ExampleHAL_1a94f5aee89ec1d8bfe9f9edc5c898fc5c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; uint32_t &gt;</type>
        <definition>HALResult&lt; uint32_t &gt; TLE92466ED::ExampleHAL::transfer32</definition>
        <argsstring>(uint32_t tx_data) noexcept override</argsstring>
        <name>transfer32</name>
        <qualifiedname>TLE92466ED::ExampleHAL::transfer32</qualifiedname>
        <reimplements refid="classTLE92466ED_1_1HAL_1a3e86c206af4ae52090c56eaf2190f262">transfer32</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>tx_data</declname>
        </param>
        <briefdescription>
<para>Transfer 32-bit data via SPI. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the core communication function. It must transfer 4 bytes in MSB-first order (big-endian). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="101" column="16" bodyfile="examples/example_hal.hpp" bodystart="101" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1ExampleHAL_1a77b62a8962fa195f12ceb4a6cbf7184e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>HALResult&lt; void &gt; TLE92466ED::ExampleHAL::transfer_multi</definition>
        <argsstring>(std::span&lt; const uint32_t &gt; tx_data, std::span&lt; uint32_t &gt; rx_data) noexcept override</argsstring>
        <name>transfer_multi</name>
        <qualifiedname>TLE92466ED::ExampleHAL::transfer_multi</qualifiedname>
        <reimplements refid="classTLE92466ED_1_1HAL_1a097041e11aeb3a03cde16520bfcb799c">transfer_multi</reimplements>
        <param>
          <type>std::span&lt; const uint32_t &gt;</type>
          <declname>tx_data</declname>
        </param>
        <param>
          <type>std::span&lt; uint32_t &gt;</type>
          <declname>rx_data</declname>
        </param>
        <briefdescription>
<para>Transfer multiple 32-bit words. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="146" column="16" bodyfile="examples/example_hal.hpp" bodystart="146" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1ExampleHAL_1ab5ce6d1f460d9078afcbe40a21897be0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>HALResult&lt; void &gt; TLE92466ED::ExampleHAL::chip_select</definition>
        <argsstring>() noexcept override</argsstring>
        <name>chip_select</name>
        <qualifiedname>TLE92466ED::ExampleHAL::chip_select</qualifiedname>
        <reimplements refid="classTLE92466ED_1_1HAL_1acf35d9f891cd8430a6ef3cee2772995d">chip_select</reimplements>
        <briefdescription>
<para>Assert chip select. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="183" column="16" bodyfile="examples/example_hal.hpp" bodystart="183" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1ExampleHAL_1a2a23fe30261ec2b948bd01e3d41a14e7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>HALResult&lt; void &gt; TLE92466ED::ExampleHAL::chip_deselect</definition>
        <argsstring>() noexcept override</argsstring>
        <name>chip_deselect</name>
        <qualifiedname>TLE92466ED::ExampleHAL::chip_deselect</qualifiedname>
        <reimplements refid="classTLE92466ED_1_1HAL_1adc04e4611b63548e71dea1b54b50f6ff">chip_deselect</reimplements>
        <briefdescription>
<para>Deassert chip select. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="194" column="16" bodyfile="examples/example_hal.hpp" bodystart="194" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1ExampleHAL_1a3f86764aa0b4e2408e826e4986893389" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>HALResult&lt; void &gt; TLE92466ED::ExampleHAL::delay</definition>
        <argsstring>(uint32_t microseconds) noexcept override</argsstring>
        <name>delay</name>
        <qualifiedname>TLE92466ED::ExampleHAL::delay</qualifiedname>
        <reimplements refid="classTLE92466ED_1_1HAL_1a44752042b769aab71d215d9c6557349a">delay</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>microseconds</declname>
        </param>
        <briefdescription>
<para>Delay for specified duration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="205" column="16" bodyfile="examples/example_hal.hpp" bodystart="205" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1ExampleHAL_1a233bb6b92374f0ae245f62054e7850dd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>HALResult&lt; void &gt; TLE92466ED::ExampleHAL::configure</definition>
        <argsstring>(const SPIConfig &amp;config) noexcept override</argsstring>
        <name>configure</name>
        <qualifiedname>TLE92466ED::ExampleHAL::configure</qualifiedname>
        <reimplements refid="classTLE92466ED_1_1HAL_1ac7d9c64c836ab51a0f878698302a1413">configure</reimplements>
        <param>
          <type>const <ref refid="structTLE92466ED_1_1SPIConfig" kindref="compound">SPIConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configure SPI parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="225" column="16" bodyfile="examples/example_hal.hpp" bodystart="225" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1ExampleHAL_1acb6f6bbc4c2c8d28892ba095386346ed" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool TLE92466ED::ExampleHAL::is_ready</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>is_ready</name>
        <qualifiedname>TLE92466ED::ExampleHAL::is_ready</qualifiedname>
        <reimplements refid="classTLE92466ED_1_1HAL_1ad20769b9f4fbcb0ca6e23800feccccf3">is_ready</reimplements>
        <briefdescription>
<para>Check if hardware is ready. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="244" column="11" bodyfile="examples/example_hal.hpp" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1ExampleHAL_1a82b32aadebefa4c9516cdfc806adbc76" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="namespaceTLE92466ED_1ac1de4cdc9257b7d596222fcf888eb7c3" kindref="member">HALError</ref></type>
        <definition>HALError TLE92466ED::ExampleHAL::get_last_error</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>get_last_error</name>
        <qualifiedname>TLE92466ED::ExampleHAL::get_last_error</qualifiedname>
        <reimplements refid="classTLE92466ED_1_1HAL_1a15cae9dcbfd3f6161bc0b8ce776fc8ec">get_last_error</reimplements>
        <briefdescription>
<para>Get last error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="251" column="15" bodyfile="examples/example_hal.hpp" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classTLE92466ED_1_1ExampleHAL_1af3c3239541c6cee3e33679bedfb670bd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="namespaceTLE92466ED_1ace8545b883d782cbafef27cd122968d1" kindref="member">HALResult</ref>&lt; void &gt;</type>
        <definition>HALResult&lt; void &gt; TLE92466ED::ExampleHAL::clear_errors</definition>
        <argsstring>() noexcept override</argsstring>
        <name>clear_errors</name>
        <qualifiedname>TLE92466ED::ExampleHAL::clear_errors</qualifiedname>
        <reimplements refid="classTLE92466ED_1_1HAL_1a3e16e6e34b24bc62c183f77a2c10926b">clear_errors</reimplements>
        <briefdescription>
<para>Clear errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/example_hal.hpp" line="258" column="16" bodyfile="examples/example_hal.hpp" bodystart="258" bodyend="261"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Example <ref refid="classTLE92466ED_1_1HAL" kindref="compound">HAL</ref> implementation for 32-bit SPI. </para>
    </briefdescription>
    <detaileddescription>
<para>This is a template implementation showing how to create a platform-specific <ref refid="classTLE92466ED_1_1HAL" kindref="compound">HAL</ref> for 32-bit SPI communication.</para>
<para><bold>Key Requirements:</bold><itemizedlist>
<listitem><para>32-bit SPI transfers (or 4x 8-bit transfers)</para>
</listitem><listitem><para>MSB-first byte order</para>
</listitem><listitem><para>Full-duplex operation</para>
</listitem><listitem><para>SPI Mode 0 (CPOL=0, CPHA=0)</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Platform Adaptation:</title><para>Replace placeholder comments with actual hardware code for:<itemizedlist>
<listitem><para>STM32: HAL_SPI_TransmitReceive()</para>
</listitem><listitem><para>ESP32: spi_device_transmit()</para>
</listitem><listitem><para>Arduino: SPI.transfer32() or 4x SPI.transfer()</para>
</listitem><listitem><para>Linux: ioctl(SPI_IOC_MESSAGE) </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>TLE92466ED::ExampleHAL</label>
        <link refid="classTLE92466ED_1_1ExampleHAL"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>TLE92466ED::HAL</label>
        <link refid="classTLE92466ED_1_1HAL"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>TLE92466ED::ExampleHAL</label>
        <link refid="classTLE92466ED_1_1ExampleHAL"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>config_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>TLE92466ED::HAL</label>
        <link refid="classTLE92466ED_1_1HAL"/>
      </node>
      <node id="3">
        <label>TLE92466ED::SPIConfig</label>
        <link refid="structTLE92466ED_1_1SPIConfig"/>
      </node>
    </collaborationgraph>
    <location file="examples/example_hal.hpp" line="42" column="1" bodyfile="examples/example_hal.hpp" bodystart="42" bodyend="269"/>
    <listofallmembers>
      <member refid="classTLE92466ED_1_1ExampleHAL_1a2a23fe30261ec2b948bd01e3d41a14e7" prot="public" virt="virtual"><scope>TLE92466ED::ExampleHAL</scope><name>chip_deselect</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1ab5ce6d1f460d9078afcbe40a21897be0" prot="public" virt="virtual"><scope>TLE92466ED::ExampleHAL</scope><name>chip_select</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1af3c3239541c6cee3e33679bedfb670bd" prot="public" virt="virtual"><scope>TLE92466ED::ExampleHAL</scope><name>clear_errors</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1ac30ffe21f8cf4bdc0d37dc6f0294c48a" prot="private" virt="non-virtual"><scope>TLE92466ED::ExampleHAL</scope><name>config_</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1a233bb6b92374f0ae245f62054e7850dd" prot="public" virt="virtual"><scope>TLE92466ED::ExampleHAL</scope><name>configure</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1a5ab8c6c8f1e7f76762563f7872e086d3" prot="private" virt="non-virtual"><scope>TLE92466ED::ExampleHAL</scope><name>cs_pin_</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1aca2fe4367464d9c650d8639452f71e4f" prot="public" virt="virtual"><scope>TLE92466ED::ExampleHAL</scope><name>deinit</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1a3f86764aa0b4e2408e826e4986893389" prot="public" virt="virtual"><scope>TLE92466ED::ExampleHAL</scope><name>delay</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1af303b6513437914a99dfcfa4d265d1fb" prot="public" virt="non-virtual"><scope>TLE92466ED::ExampleHAL</scope><name>ExampleHAL</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1a82b32aadebefa4c9516cdfc806adbc76" prot="public" virt="virtual"><scope>TLE92466ED::ExampleHAL</scope><name>get_last_error</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a046e4d5ea9ff8cb638d117a7b955fb72" prot="protected" virt="non-virtual"><scope>TLE92466ED::ExampleHAL</scope><name>HAL</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a84a3718090608281e766d6f6a3a6216b" prot="protected" virt="non-virtual"><scope>TLE92466ED::ExampleHAL</scope><name>HAL</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a66f2dc7f30a013e24748a536063f4768" prot="protected" virt="non-virtual"><scope>TLE92466ED::ExampleHAL</scope><name>HAL</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1ade76b2bdcbe732aaf5d048cf9cb5e9b8" prot="public" virt="virtual"><scope>TLE92466ED::ExampleHAL</scope><name>init</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1a03fab6d1a70b3ea3822eb1385e0748a3" prot="private" virt="non-virtual"><scope>TLE92466ED::ExampleHAL</scope><name>initialized_</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1acb6f6bbc4c2c8d28892ba095386346ed" prot="public" virt="virtual"><scope>TLE92466ED::ExampleHAL</scope><name>is_ready</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1acfba888b54d9543ea5e61a26bbb3743f" prot="private" virt="non-virtual"><scope>TLE92466ED::ExampleHAL</scope><name>last_error_</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a39c1634fce8b96b25d35661a015c1845" prot="protected" virt="non-virtual"><scope>TLE92466ED::ExampleHAL</scope><name>operator=</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a87d0f77ad940df38e77149b37cc986cd" prot="protected" virt="non-virtual"><scope>TLE92466ED::ExampleHAL</scope><name>operator=</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1a171d526c59010903735b6decc65dbfa8" prot="private" virt="non-virtual"><scope>TLE92466ED::ExampleHAL</scope><name>spi_device_</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1a94f5aee89ec1d8bfe9f9edc5c898fc5c" prot="public" virt="virtual"><scope>TLE92466ED::ExampleHAL</scope><name>transfer32</name></member>
      <member refid="classTLE92466ED_1_1ExampleHAL_1a77b62a8962fa195f12ceb4a6cbf7184e" prot="public" virt="virtual"><scope>TLE92466ED::ExampleHAL</scope><name>transfer_multi</name></member>
      <member refid="classTLE92466ED_1_1HAL_1a4f0301428e060c380513aca7d7528934" prot="public" virt="virtual"><scope>TLE92466ED::ExampleHAL</scope><name>~HAL</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
