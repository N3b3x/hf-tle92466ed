{"0": {
    "doc": "📚 Documentation",
    "title": "TLE92466ED Driver Documentation",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/#tle92466ed-driver-documentation",
    
    "relUrl": "/docs/#tle92466ed-driver-documentation"
  },"1": {
    "doc": "📚 Documentation",
    "title": "Quick Navigation",
    "content": "This documentation provides complete information about the TLE92466ED IC and its C++ driver implementation. ",
    "url": "/hf-tle92466ed-driver/development/docs/#quick-navigation",
    
    "relUrl": "/docs/#quick-navigation"
  },"2": {
    "doc": "📚 Documentation",
    "title": "Documentation Structure",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 . | docs/ ├── 00_INDEX.md ← You are here ├── 01_IC_Overview.md Device specifications and architecture ├── 02_SPI_Protocol.md 32-bit SPI communication with CRC ├── 03_Register_Map.md Complete register reference ├── 04_Current_Control.md ICC (Integrated Current Control) system ├── 05_Channel_Modes.md Operation modes and configuration ├── 06_Diagnostics.md Fault detection and monitoring ├── 07_Driver_API.md C++ driver interface reference ├── 08_HAL_Implementation.md Hardware abstraction guide └── 09_Usage_Examples.md Practical implementation examples . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/#documentation-structure",
    
    "relUrl": "/docs/#documentation-structure"
  },"3": {
    "doc": "📚 Documentation",
    "title": "Document Purpose",
    "content": "| Document | Content | Use Case | . | IC_Overview | Device capabilities, pin functions, electrical specs | Understanding hardware | . | SPI_Protocol | 32-bit frame structure, CRC calculation | Low-level communication | . | Register_Map | All 108 registers with bit fields | Register programming | . | Current_Control | ICC configuration, PWM, dither | Precision current control | . | Channel_Modes | Config/Mission modes, parallel operation | System configuration | . | Diagnostics | Fault flags, protection features | System monitoring | . | Driver_API | C++ class methods and types | Software integration | . | HAL_Implementation | Platform-specific SPI interface | Hardware porting | . | Usage_Examples | Complete working code | Quick start | . ",
    "url": "/hf-tle92466ed-driver/development/docs/#document-purpose",
    
    "relUrl": "/docs/#document-purpose"
  },"4": {
    "doc": "📚 Documentation",
    "title": "Quick Start Guide",
    "content": "For immediate implementation: . | Hardware Setup: Review 01_IC_Overview.md for pin connections | HAL Creation: Follow 08_HAL_Implementation.md to create your platform HAL | Basic Usage: Copy code from 09_Usage_Examples.md | Advanced Features: Consult specific feature documentation as needed | . ",
    "url": "/hf-tle92466ed-driver/development/docs/#quick-start-guide",
    
    "relUrl": "/docs/#quick-start-guide"
  },"5": {
    "doc": "📚 Documentation",
    "title": "Key Specifications",
    "content": ". | Device: TLE92466ED Six-Channel Low-Side Solenoid Driver | Channels: 6 independent outputs | Current Control: 0-2A (single), 0-4A (parallel) | Resolution: 15-bit (0.061mA steps) | SPI: 32-bit frames with CRC-8 | C++ Standard: C++23 | Driver Version: 2.0.0 | . ",
    "url": "/hf-tle92466ed-driver/development/docs/#key-specifications",
    
    "relUrl": "/docs/#key-specifications"
  },"6": {
    "doc": "📚 Documentation",
    "title": "Reference Information",
    "content": ". | Datasheet: Infineon TLE92466ED Rev. 1.2 (2022-02-01) | Driver Source: include/TLE92466ED.hpp, src/TLE92466ED.cpp | Examples: examples/basic_usage.cpp | Build System: CMake 3.15+ | . ",
    "url": "/hf-tle92466ed-driver/development/docs/#reference-information",
    
    "relUrl": "/docs/#reference-information"
  },"7": {
    "doc": "📚 Documentation",
    "title": "Support &amp; Resources",
    "content": ". | Compiler Requirements: GCC 12.0+, Clang 16.0+, MSVC 19.33+ (C++23) | Dependencies: None (freestanding-compatible) | License: Public Domain | . Navigation: Next: IC Overview → . ",
    "url": "/hf-tle92466ed-driver/development/docs/#support--resources",
    
    "relUrl": "/docs/#support--resources"
  },"8": {
    "doc": "📚 Documentation",
    "title": "📚 Documentation",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/",
    
    "relUrl": "/docs/"
  },"9": {
    "doc": "🔌 IC Overview",
    "title": "TLE92466ED IC Overview",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#tle92466ed-ic-overview",
    
    "relUrl": "/docs/01_IC_Overview/#tle92466ed-ic-overview"
  },"10": {
    "doc": "🔌 IC Overview",
    "title": "Device Description",
    "content": "The TLE92466ED is a sophisticated six-channel low-side solenoid driver IC designed for automotive and industrial applications requiring precise current control of inductive loads. ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#device-description",
    
    "relUrl": "/docs/01_IC_Overview/#device-description"
  },"11": {
    "doc": "🔌 IC Overview",
    "title": "Device Classification",
    "content": "| 1 2 3 . | Device Family: Infineon PROFET™ + (Protected High-Current Switch) Type: Low-Side Switch with Current Control Application: Solenoid actuators, valves, relays . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#device-classification",
    
    "relUrl": "/docs/01_IC_Overview/#device-classification"
  },"12": {
    "doc": "🔌 IC Overview",
    "title": "Key Features",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#key-features",
    
    "relUrl": "/docs/01_IC_Overview/#key-features"
  },"13": {
    "doc": "🔌 IC Overview",
    "title": "Current Control System",
    "content": ". | Integrated Current Controller (ICC) with 15-bit resolution | Range: 0-2000 mA (single channel), 0-4000 mA (parallel mode) | Resolution: 0.061 mA per LSB (single), 0.122 mA (parallel) | Dither support for precise current shaping (up to 1800 mA amplitude) | PWM-based regulation with configurable frequency | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#current-control-system",
    
    "relUrl": "/docs/01_IC_Overview/#current-control-system"
  },"14": {
    "doc": "🔌 IC Overview",
    "title": "Channel Configuration",
    "content": ". | 6 independent output channels | Parallel operation pairs: CH0/CH3, CH1/CH2, CH4/CH5 | Per-channel configuration and diagnostics | Individual enable/disable control | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#channel-configuration",
    
    "relUrl": "/docs/01_IC_Overview/#channel-configuration"
  },"15": {
    "doc": "🔌 IC Overview",
    "title": "Protection &amp; Diagnostics",
    "content": ". | Open load detection (ON and OFF states) | Short to ground detection | Over-current protection (configurable threshold) | Over-temperature monitoring (warning + error) | Supply voltage monitoring (VBAT, VIO, VDD) | Load current feedback | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#protection--diagnostics",
    
    "relUrl": "/docs/01_IC_Overview/#protection--diagnostics"
  },"16": {
    "doc": "🔌 IC Overview",
    "title": "Communication &amp; Safety",
    "content": ". | 32-bit SPI with 8-bit CRC (SAE J1850) | SPI watchdog for communication monitoring | Clock watchdog for oscillator verification | Unique 48-bit chip identification | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#communication--safety",
    
    "relUrl": "/docs/01_IC_Overview/#communication--safety"
  },"17": {
    "doc": "🔌 IC Overview",
    "title": "Device Pinout",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 . | TLE92466ED ┌─────────────────┐ VBAT (1) ────┤ 1 32 ├──── GND (32) OUT0 (2) ────┤ 2 31 ├──── OUT5 (31) OUT1 (3) ────┤ 3 30 ├──── OUT4 (30) OUT2 (4) ────┤ 4 29 ├──── OUT3 (29) RESN (5) ────┤ 5 28 ├──── CSN (28) CSN (6) ────┤ 6 27 ├──── SCK (27) SCK (7) ────┤ 7 26 ├──── SI (26) SI (8) ────┤ 8 25 ├──── VIO (25) VIO (9) ────┤ 9 24 ├──── SO (24) SO (10) ───┤ 10 23 ├──── EN (23) EN (11) ───┤ 11 22 ├──── DRV0 (22) DRV0 (12) ───┤ 12 21 ├──── DRV1 (21) DRV1 (13) ───┤ 13 20 ├──── FAULTN (20) FAULTN (14) ───┤ 14 19 ├──── VDD (19) VDD (15) ───┤ 15 18 ├──── GND (18) GND (16) ───┤ 16 17 ├──── VBAT (17) └─────────────────┘ PG-DSO-32 Package . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#device-pinout",
    
    "relUrl": "/docs/01_IC_Overview/#device-pinout"
  },"18": {
    "doc": "🔌 IC Overview",
    "title": "Pin Functions",
    "content": "| Pin | Name | Type | Function | . | 1, 17 | VBAT | Power | Battery voltage supply (5.5V - 41V) | . | 2-4, 29-31 | OUT0-5 | Output | Low-side switch outputs | . | 5 | RESN | Input | Active-low reset (disables outputs, resets registers) | . | 6, 28 | CSN | Input | SPI chip select (active low) | . | 7, 27 | SCK | Input | SPI clock (up to 10 MHz) | . | 8, 26 | SI | Input | SPI data input (MOSI) | . | 9, 25 | VIO | Power | SPI I/O voltage (3.3V or 5.0V) | . | 10, 24 | SO | Output | SPI data output (MISO) | . | 11, 23 | EN | Input | Global enable (active high) | . | 12, 22 | DRV0 | Input | External drive input 0 | . | 13, 21 | DRV1 | Input | External drive input 1 | . | 14, 20 | FAULTN | Output | Active-low fault indication (open drain) | . | 15, 19 | VDD | Power | Internal 5V supply output | . | 16, 18, 32 | GND | Ground | Ground connection | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#pin-functions",
    
    "relUrl": "/docs/01_IC_Overview/#pin-functions"
  },"19": {
    "doc": "🔌 IC Overview",
    "title": "Electrical Specifications",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#electrical-specifications",
    
    "relUrl": "/docs/01_IC_Overview/#electrical-specifications"
  },"20": {
    "doc": "🔌 IC Overview",
    "title": "Absolute Maximum Ratings",
    "content": "| Parameter | Min | Max | Unit | . | VBAT (Battery Voltage) | -0.3 | 45 | V | . | VIO (I/O Voltage) | -0.3 | 6 | V | . | VDD Load Current | - | 10 | mA | . | Output Current (per channel) | - | 2 | A | . | Output Current (parallel) | - | 4 | A | . | Junction Temperature | -40 | 175 | °C | . | Storage Temperature | -55 | 150 | °C | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#absolute-maximum-ratings",
    
    "relUrl": "/docs/01_IC_Overview/#absolute-maximum-ratings"
  },"21": {
    "doc": "🔌 IC Overview",
    "title": "Recommended Operating Conditions",
    "content": "| Parameter | Min | Typ | Max | Unit | . | VBAT (Battery Voltage) | 5.5 | 12/24 | 41 | V | . | VIO (I/O Voltage) | 3.0 | 3.3/5.0 | 5.5 | V | . | Junction Temperature | -40 | - | 150 | °C | . | SPI Clock Frequency | 0.1 | - | 10 | MHz | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#recommended-operating-conditions",
    
    "relUrl": "/docs/01_IC_Overview/#recommended-operating-conditions"
  },"22": {
    "doc": "🔌 IC Overview",
    "title": "Current Control Specifications",
    "content": "| Parameter | Min | Typ | Max | Unit | Notes | . | Current Range (single) | 0 | - | 2000 | mA | Per channel | . | Current Range (parallel) | 0 | - | 4000 | mA | Paired channels | . | Current Resolution | - | 0.061 | - | mA | 15-bit | . | Current Accuracy | - | ±5 | ±10 | % | At 25°C | . | Dither Amplitude | 0 | - | 1800 | mA | Configurable | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#current-control-specifications",
    
    "relUrl": "/docs/01_IC_Overview/#current-control-specifications"
  },"23": {
    "doc": "🔌 IC Overview",
    "title": "Slew Rate Control",
    "content": "| Setting | Value | Application | . | 00b | 1.0 V/µs | Low EMI, slow switching | . | 01b | 2.5 V/µs | Standard operation | . | 10b | 5.0 V/µs | Fast switching | . | 11b | 10.0 V/µs | Maximum speed | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#slew-rate-control",
    
    "relUrl": "/docs/01_IC_Overview/#slew-rate-control"
  },"24": {
    "doc": "🔌 IC Overview",
    "title": "Functional Block Diagram",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 . | TLE92466ED Architecture ┌──────────────────────────────────────────────────────────────────────┐ │ │ │ ┌────────────┐ ┌───────────────┐ ┌──────────────────┐ │ │ │ 5V Reg │────▶│ Clock Gen │────▶│ SPI Interface │ │ │ │ (VDD) │ │ &amp; Watchdog │ │ 32-bit CRC │ │ │ └────────────┘ └───────────────┘ └──────────────────┘ │ │ │ │ │ │ │ │ │ │ │ │ ┌──────▼────────────────────▼──────────────────────▼───────────┐ │ │ │ Control Logic &amp; State Machine │ │ │ │ (Config Mode / Mission Mode Management) │ │ │ └───────────────────────────────────────────────────────────────┘ │ │ │ │ │ ┌─────────────────────────┼─────────────────────────┐ │ │ │ │ │ │ │ ┌──────▼───────┐ ┌──────▼───────┐ ┌──────▼──────┐│ │ │ Channel 0 │ │ Channel 1 │ ... │ Channel 5 ││ │ │ ┌─────────┐ │ │ ┌─────────┐ │ │ ┌─────────┐ ││ │ │ │ ICC │ │ │ │ ICC │ │ │ │ ICC │ ││ │ │ │ PWM │ │ │ │ PWM │ │ │ │ PWM │ ││ │ │ │ Dither │ │ │ │ Dither │ │ │ │ Dither │ ││ │ │ └────┬────┘ │ │ └────┬────┘ │ │ └────┬────┘ ││ │ │ │ │ │ │ │ │ │ ││ │ │ ┌────▼────┐ │ │ ┌────▼────┐ │ │ ┌────▼────┐ ││ │ │ │ Driver │ │ │ │ Driver │ │ │ │ Driver │ ││ │ │ │ Stage │ │ │ │ Stage │ │ │ │ Stage │ ││ │ │ └────┬────┘ │ │ └────┬────┘ │ │ └────┬────┘ ││ │ │ │ │ │ │ │ │ │ ││ │ │ ┌────▼────┐ │ │ ┌────▼────┐ │ │ ┌────▼────┐ ││ │ │ │Diag &amp; │ │ │ │Diag &amp; │ │ │ │Diag &amp; │ ││ │ │ │Feedback │ │ │ │Feedback │ │ │ │Feedback │ ││ │ │ └────┬────┘ │ │ └────┬────┘ │ │ └────┬────┘ ││ │ └───────┼──────┘ └───────┼──────┘ └───────┼─────┘│ │ │ │ │ │ │ ▼ ▼ ▼ │ │ OUT0 OUT1 OUT5 │ │ │ │ │ │ └──────────┼────────────────────────┼────────────────────────┼───────┘ │ │ │ ▼ ▼ ▼ Load 0 Load 1 Load 5 . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#functional-block-diagram",
    
    "relUrl": "/docs/01_IC_Overview/#functional-block-diagram"
  },"25": {
    "doc": "🔌 IC Overview",
    "title": "Typical Application Circuit",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 . | Microcontroller TLE92466ED ┌─────────────┐ ┌──────────┐ │ │ │ │ VCC (3.3/5V) ──┤ VCC │ │ VIO ─────┼── VCC │ │ │ │ ┌─────────┤ SPI_CS CSN├───────────────────┤ CSN │ │ │ │ │ │ ├─────────┤ SPI_CLK SCK├───────────────────┤ SCK │ │ │ │ │ │ ├─────────┤ SPI_MOSI SI├───────────────────┤ SI │ │ │ │ │ │ └─────────┤ SPI_MISO SO├───────────────────┤ SO │ │ │ │ │ │ GPIO EN├───────────────────┤ EN │ │ │ │ │ │ GPIO RESN ├───────────────────┤ RESN │ │ │ │ │ │ GPIO FAULTN├───────────────────┤ FAULTN │ │ │ │ │ │ GND ├───────────────────┤ GND │ │ │ │ │ └─────────────┘ │ VBAT ────┼── 12/24V │ │ │ OUT0 ────┼──┐ │ OUT1 ────┼──┤ │ OUT2 ────┼──┼── Solenoids │ OUT3 ────┼──┤ (Inductive) │ OUT4 ────┼──┤ │ OUT5 ────┼──┘ │ │ └──────────┘ External Components: - Decoupling: 100nF ceramic + 10µF electrolytic on VBAT - VIO decoupling: 100nF ceramic - Pull-up on FAULTN: 10kΩ to VIO - Pull-down on RESN: 10kΩ to GND (optional) . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#typical-application-circuit",
    
    "relUrl": "/docs/01_IC_Overview/#typical-application-circuit"
  },"26": {
    "doc": "🔌 IC Overview",
    "title": "Operating Modes",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#operating-modes",
    
    "relUrl": "/docs/01_IC_Overview/#operating-modes"
  },"27": {
    "doc": "🔌 IC Overview",
    "title": "Mode Structure",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 . | Power-On Reset │ ▼ ┌──────────────┐ │ Config Mode │ ◄──────────────┐ │ │ │ │ - Configure │ │ │ - Set modes │ OP_MODE=0 │ │ - Parallel │ │ │ - No outputs │ │ └──────┬───────┘ │ │ OP_MODE=1 │ │ │ ▼ │ ┌──────────────┐ │ │ Mission Mode │ │ │ │ │ │ - Enable CH │ │ │ - Outputs ON │ Faults or │ │ - Monitor │ Reset │ │ - Control │ ───────────────┘ └──────────────┘ . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#mode-structure",
    
    "relUrl": "/docs/01_IC_Overview/#mode-structure"
  },"28": {
    "doc": "🔌 IC Overview",
    "title": "Config Mode",
    "content": ". | Purpose: Configuration and initialization | Access: Register writes to mode-locked registers | Outputs: All channels disabled | Use Cases: Startup configuration, mode changes, parallel setup | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#config-mode",
    
    "relUrl": "/docs/01_IC_Overview/#config-mode"
  },"29": {
    "doc": "🔌 IC Overview",
    "title": "Mission Mode",
    "content": ". | Purpose: Normal operation | Access: Channel enable/disable, current control | Outputs: Enabled channels active | Use Cases: Runtime operation, current control, monitoring | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#mission-mode",
    
    "relUrl": "/docs/01_IC_Overview/#mission-mode"
  },"30": {
    "doc": "🔌 IC Overview",
    "title": "Power Sequencing",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 . | Time ─────────────────────────────────────────────────────▶ VBAT ┌──────────────────────────────────────────── │ ────────┘ VIO ────┌────────────────────────────────────────── │ ────────────┘ RESN ─────────┐ ┌────────────────────────── │ tRES │ ─────────────────┘ └────────────────────────── SPI ─────────────────────┐ Access │ Communication ready ─────────────────────────────┴──────────────────────── Notes: - tRES (min): 1 µs pulse width - Power-up delay: ~1 ms after VBAT/VIO stable - SPI accessible after tPOR + tRES . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#power-sequencing",
    
    "relUrl": "/docs/01_IC_Overview/#power-sequencing"
  },"31": {
    "doc": "🔌 IC Overview",
    "title": "Performance Characteristics",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#performance-characteristics",
    
    "relUrl": "/docs/01_IC_Overview/#performance-characteristics"
  },"32": {
    "doc": "🔌 IC Overview",
    "title": "Current Control Accuracy",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 . | Output Current vs Setpoint (Typical, 25°C) Iout │ ╱ 2A│ ╱ │ ╱ 1.5A│ ╱ │ ╱ 1A│ ╱ │ ╱ 0.5A│ ╱ │ ╱ 0A└──────────────────────────────────────── Setpoint 0 0.5A 1A 1.5A 2A Accuracy: ±5% typical, ±10% maximum . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#current-control-accuracy",
    
    "relUrl": "/docs/01_IC_Overview/#current-control-accuracy"
  },"33": {
    "doc": "🔌 IC Overview",
    "title": "Temperature Characteristics",
    "content": ". | Operating: -40°C to +150°C junction | Over-temperature warning: ~165°C | Over-temperature error: ~175°C | Thermal shutdown: Automatic channel disable | . | Navigation: ← Index | Next: SPI Protocol → | . ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/#temperature-characteristics",
    
    "relUrl": "/docs/01_IC_Overview/#temperature-characteristics"
  },"34": {
    "doc": "🔌 IC Overview",
    "title": "🔌 IC Overview",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/01_IC_Overview/",
    
    "relUrl": "/docs/01_IC_Overview/"
  },"35": {
    "doc": "📡 SPI Protocol",
    "title": "SPI Protocol",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/02_SPI_Protocol/#spi-protocol",
    
    "relUrl": "/docs/02_SPI_Protocol/#spi-protocol"
  },"36": {
    "doc": "📡 SPI Protocol",
    "title": "Overview",
    "content": "The TLE92466ED uses a 32-bit SPI protocol with 8-bit CRC (SAE J1850) for robust communication. This is a full-duplex, synchronous serial interface operating in SPI Mode 0. ",
    "url": "/hf-tle92466ed-driver/development/docs/02_SPI_Protocol/#overview",
    
    "relUrl": "/docs/02_SPI_Protocol/#overview"
  },"37": {
    "doc": "📡 SPI Protocol",
    "title": "Protocol Specifications",
    "content": "| Parameter | Value | Notes | . | Frame Size | 32 bits | Single transaction | . | CRC | 8-bit SAE J1850 | Polynomial 0x1D | . | Mode | 0 (CPOL=0, CPHA=0) | Data sampled on rising edge | . | Frequency | 100 kHz - 10 MHz | Typical: 1-2 MHz | . | Bit Order | MSB first | Most significant bit first | . | CS Polarity | Active low | Pull low during transfer | . ",
    "url": "/hf-tle92466ed-driver/development/docs/02_SPI_Protocol/#protocol-specifications",
    
    "relUrl": "/docs/02_SPI_Protocol/#protocol-specifications"
  },"38": {
    "doc": "📡 SPI Protocol",
    "title": "Frame Structure",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/02_SPI_Protocol/#frame-structure",
    
    "relUrl": "/docs/02_SPI_Protocol/#frame-structure"
  },"39": {
    "doc": "📡 SPI Protocol",
    "title": "32-Bit Frame Layout",
    "content": "|| Bit Position: 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 ... 0 ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────────┐ MOSI (Write): │ CRC (8) │ ADDR (7) │R/W│ DATA (16) │ └───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴─────────┘ ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────────┐ MISO (Reply): │ CRC (8) │RM │ STATUS(5) │R/W│ DATA (16) │ └───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴─────────┘ Field Breakdown: ┌──────────────┬──────────┬─────────────────────────────────────────────┐ │ Bits [31:24] │ CRC │ 8-bit CRC checksum (SAE J1850) │ │ Bits [23:17] │ ADDRESS │ 7-bit register address (MOSI) │ │ Bits [23:22] │ RPLY_MOD │ Reply mode indicator (MISO) │ │ Bits [21:17] │ STATUS │ 5-bit status field (MISO) │ │ Bit [16] │ R/W │ 1=Write, 0=Read │ │ Bits [15:0] │ DATA │ 16-bit data payload │ └──────────────┴──────────┴─────────────────────────────────────────────┘ ```text ### MOSI (Master Out, Slave In) - Write Frame ```text Write Transaction Format: 31 24 23 17 16 15 0 ┌───────────────────┬─────────────┬───┬───────────────────┐ │ CRC (8) │ ADDR (7) │ 1 │ DATA (16) │ └───────────────────┴─────────────┴───┴───────────────────┘ Computed Target Write Value to checksum register flag write Example: Write 0x1234 to register 0x0002 (GLOBAL_CONFIG) Step 1: Build frame without CRC Bits [23:17] = 0x01 (0x0002 &gt;&gt; 3 = 0x01, upper 7 bits) Bit [16] = 1 (Write operation) Bits [15:0] = 0x1234 (Data to write) Step 2: Calculate CRC on bits [23:0] Input: 0x00 0x02 0x34 (3 bytes, address + R/W + data) CRC : 0xXX (computed) Step 3: Complete frame [31:24] = CRC, [23:0] = 0x012341234 ```text ### MOSI (Master Out, Slave In) - Read Frame ```text Read Transaction Format: 31 24 23 17 16 15 0 ┌───────────────────┬─────────────┬───┬───────────────────┐ │ CRC (8) │ Don't Care │ 0 │ ADDRESS (16) │ └───────────────────┴─────────────┴───┴───────────────────┘ Computed Ignored Read Full register checksum flag address Example: Read register 0x0100 (CH0 SETPOINT) Step 1: Build frame without CRC Bits [23:17] = Don't care Bit [16] = 0 (Read operation) Bits [15:0] = 0x0100 (Register address) Step 2: Calculate CRC on bits [23:0] Input: 0x00 0x00 0x01 0x00 (3 bytes) CRC : 0xXX (computed) Step 3: Complete frame [31:24] = CRC, [23:0] = 0x00000100 ```text ### MISO (Master In, Slave Out) - Reply Frame Types #### Type 1: 16-Bit Reply Frame (Standard) ```text 31 24 23 22 21 17 16 15 0 ┌───────────────────┬──┬──┬────────────┬───┬───────────────────┐ │ CRC (8) │ 0│ 0│ STATUS (5) │R/W│ DATA (16) │ └───────────────────┴──┴──┴────────────┴───┴───────────────────┘ Computed Reply Status Echo Register checksum Mode flags R/W contents Reply Mode [23:22] = 00b: Standard 16-bit data Status [21:17]: Error/status indication R/W [16]: Echoes request R/W bit Data [15:0]: Register value or last write acknowledgment ```text #### Type 2: 22-Bit Reply Frame (Extended Data) ```text 31 24 23 22 21 0 ┌───────────────────┬──┬──┬──────────────────────────────────┐ │ CRC (8) │ 0│ 1│ EXTENDED DATA (22) │ └───────────────────┴──┴──┴──────────────────────────────────┘ Computed Reply Extended feedback data checksum Mode (e.g., current measurements) Reply Mode [23:22] = 01b: Extended 22-bit data Used for: High-resolution feedback registers ```text #### Type 3: Critical Fault Frame ```text 31 24 23 22 21 0 ┌───────────────────┬──┬──┬──────────────────────────────────┐ │ CRC (8) │ 1│ 0│ Don't Care │ └───────────────────┴──┴──┴──────────────────────────────────┘ Computed Reply Undefined checksum Mode Reply Mode [23:22] = 10b: Critical fault condition Indicates: Severe hardware fault, device in safe state ```text ## SPI Status Codes ### Status Field [21:17] Encoding ```text Status Bits: 5-bit field in MISO reply ┌──────┬─────────────────────────────────────────────────┐ │ Code │ Meaning │ ├──────┼─────────────────────────────────────────────────┤ │00000 │ No error - transaction successful │ │00001 │ SPI frame error - invalid frame format │ │00010 │ Parity/CRC error - checksum mismatch │ │00011 │ Write to read-only register - access denied │ │00100 │ Internal bus fault - hardware issue │ │00101 │ Internal bus fault - alternate code │ │00110 │ Internal bus fault - alternate code │ │xxxxx │ Other codes reserved │ └──────┴─────────────────────────────────────────────────┘ Priority: Lower encoding = higher priority (If multiple errors, lowest code is reported) ```text ## CRC Calculation ### SAE J1850 CRC-8 Algorithm ```text Polynomial: 0x1D (x^8 + x^4 + x^3 + x^2 + 1) Init Value: 0xFF Final XOR: 0xFF Bit Order: MSB first Algorithm Pseudocode: ┌────────────────────────────────────────────────────────┐ │ function calculate_crc8(data[], length): │ │ crc = 0xFF // Initialize │ │ for each byte in data: │ │ crc = crc XOR byte // Mix in data byte │ │ for bit = 0 to 7: // Process 8 bits │ │ if crc &amp; 0x80: // Check MSB │ │ crc = (crc &lt;&lt; 1) XOR 0x1D │ │ else: │ │ crc = (crc &lt;&lt; 1) │ │ return crc XOR 0xFF // Final inversion │ └────────────────────────────────────────────────────────┘ ```text ### CRC Calculation Example ```text Example: Calculate CRC for write to GLOBAL_CONFIG Frame contents (before CRC): Address [23:17] = 0x01 R/W [16] = 1 Data [15:0] = 0x4005 Bytes to CRC (bits [23:0] = 3 bytes): Byte 0: 0x02 (bits [23:16]) Byte 1: 0x40 (bits [15:8]) Byte 2: 0x05 (bits [7:0]) Step-by-step: crc = 0xFF Process 0x02: crc = 0xFF XOR 0x02 = 0xFD [bit processing yields] crc = 0xC5 Process 0x40: crc = 0xC5 XOR 0x40 = 0x85 [bit processing yields] crc = 0x7A Process 0x05: crc = 0x7A XOR 0x05 = 0x7F [bit processing yields] crc = 0x23 Final XOR: crc = 0x23 XOR 0xFF = 0xDC Result: CRC = 0xDC Complete frame: 0xDC024005 ```text ## Communication Timing ### SPI Timing Diagram ```text CSN ─────────┐ ┌────── └─────────────────────────────────────────┘ tCSS tCSH SCK ─────────┐ ┌──┐ ┌──┐ ┌──┐ ┌──┐ ┌──┐ ┌──┐ ┌─────── │ │ │ │ │ │ │ │ │ │ │ │ │ │ └──┘ └──┘ └──┘ └──┘ └──┘ └──┘ └──┘ tSCKH tSCKL 32 clock cycles SI/SO ─────────┤ B31│ B30│ B29│ ... │ B2 │ B1 │ B0 ├────── └────┴────┴────┴─────┴────┴────┴────┘ tSU tH Timing Parameters: ┌────────────────────┬──────┬─────────┬──────┬──────┐ │ Parameter │ Min │ Typical │ Max │ Unit │ ├────────────────────┼──────┼─────────┼──────┼──────┤ │ tSCK (Clock period)│ 100 │ - │ - │ ns │ │ tCSS (CS setup) │ 50 │ - │ - │ ns │ │ tCSH (CS hold) │ 50 │ - │ - │ ns │ │ tSU (Data setup) │ 20 │ - │ - │ ns │ │ tH (Data hold) │ 20 │ - │ - │ ns │ │ tCSI (CS inactive) │ 100 │ - │ - │ ns │ └────────────────────┴──────┴─────────┴──────┴──────┘ ```text ### Transaction Sequence ```text Complete Read/Write Sequence: Transaction 1: Write Command ─────────────────────────────────────────────────────────── MCU → IC: [WRITE CMD: 0xXX + CRC + ADDR + DATA] IC → MCU: [RESPONSE: Previous register state] Transaction 2: Read Back (optional verify) ─────────────────────────────────────────────────────────── MCU → IC: [READ CMD: 0xXX + CRC + ADDR] IC → MCU: [RESPONSE: Current register state] Timing: CSN ┐ ┌───┐ ┌─── └───┘ └───┘ T1 T2 Notes: - Response to write contains previous value - Read returns current value from addressed register - Minimum 100ns between transactions ```text ## Transaction Examples ### Example 1: Initialize Global Configuration ```text Objective: Enable CRC, watchdogs, 3.3V VIO Register: GLOBAL_CONFIG (0x0002) Value: 0x4005 (CLK_WD_EN | SPI_WD_EN | CRC_EN) Transaction Breakdown: ┌────────────────────────────────────────────────────────┐ │ Step 1: Build MOSI frame │ │ Address: 0x0002 → [23:17] = 0x00, [16] = 1 (write) │ │ Data: 0x4005 │ │ Bytes for CRC: [0x02, 0x40, 0x05] │ │ CRC: 0xDC (calculated) │ │ Complete: 0xDC024005 │ │ │ │ Step 2: SPI Transfer │ │ MOSI: 0xDC024005 │ │ MISO: 0xXXXXXXXX (previous register value + status) │ │ │ │ Step 3: Verify (optional) │ │ Read back GLOBAL_CONFIG to confirm │ └────────────────────────────────────────────────────────┘ ```text ### Example 2: Read Channel Status ```text Objective: Read CH0 current setpoint Register: CH0_SETPOINT (0x0100) Transaction Breakdown: ┌────────────────────────────────────────────────────────┐ │ Step 1: Build MOSI frame │ │ Address: 0x0100 → [15:0] = 0x0100, [16] = 0 (read) │ │ Bytes for CRC: [0x00, 0x01, 0x00] │ │ CRC: 0xXX (calculated) │ │ Complete: 0xXX000100 │ │ │ │ Step 2: SPI Transfer │ │ MOSI: 0xXX000100 │ │ MISO: 0xYY000567 (register value = 0x0567) │ │ └─┬─┘ │ │ CRC │ │ │ │ Step 3: Verify CRC &amp; Extract Data │ │ Status [21:17]: Check for errors │ │ Data [15:0]: 0x0567 = current setpoint │ └────────────────────────────────────────────────────────┘ ```text ### Example 3: Error Handling ```text Scenario: Write to read-only register Transaction: MOSI: Write to ICVID (0x0200, read-only) MISO: Status = 0b00011 (Write to RO register) Response Handling: ┌────────────────────────────────────────────────────────┐ │ Parse MISO frame: │ │ [31:24]: CRC → Verify │ │ [23:22]: Reply Mode = 00 (normal) │ │ [21:17]: Status = 0b00011 → ERROR! │ │ [16]: R/W echo │ │ [15:0]: Undefined (ignore) │ │ │ │ Error Response: │ │ - Retry not recommended │ │ - Check register address │ │ - Verify register is writable │ └────────────────────────────────────────────────────────┘ ```text ## Best Practices ### Transaction Management 1. **CRC Verification** . | . Always verify: . | Outgoing CRC before transmission | Incoming CRC after reception | Reject frames with CRC mismatch ```text | . | Status Checking ```text After every transaction: . | Parse status field [21:17] | Handle errors appropriately | Log unexpected status codes ``` | . | Timing Compliance ```text Ensure: . | Minimum CS inactive time (100ns) | Proper setup/hold times | Clock frequency within limits ``` | . | Error Recovery ```text On error: . | Check CRC first | Verify register address | Retry with exponential backoff (max 3) | Reset communication if persistent ``` | . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/02_SPI_Protocol/#32-bit-frame-layout",
    
    "relUrl": "/docs/02_SPI_Protocol/#32-bit-frame-layout"
  },"40": {
    "doc": "📡 SPI Protocol",
    "title": "Performance Optimization",
    "content": "```text Recommended SPI Frequency: ┌─────────────────────┬──────────────────────────────────┐ │ Application │ Frequency │ ├─────────────────────┼──────────────────────────────────┤ │ Debug/Development │ 100-500 kHz (easier to debug) │ │ Normal Operation │ 1-2 MHz (good balance) │ │ High Performance │ 5-10 MHz (maximum throughput) │ └─────────────────────┴──────────────────────────────────┘ . Transaction Rate: . | 32 bits @ 1 MHz = 32 µs per transaction | +100ns CS gap = ~33 µs total | Max rate: ~30,000 transactions/second ```text | . | Navigation: ← IC Overview | Next: Register Map → | . ",
    "url": "/hf-tle92466ed-driver/development/docs/02_SPI_Protocol/#performance-optimization",
    
    "relUrl": "/docs/02_SPI_Protocol/#performance-optimization"
  },"41": {
    "doc": "📡 SPI Protocol",
    "title": "📡 SPI Protocol",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/02_SPI_Protocol/",
    
    "relUrl": "/docs/02_SPI_Protocol/"
  },"42": {
    "doc": "📋 Register Map",
    "title": "Register Map",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#register-map",
    
    "relUrl": "/docs/03_Register_Map/#register-map"
  },"43": {
    "doc": "📋 Register Map",
    "title": "Register Organization",
    "content": "The TLE92466ED contains 108 registers organized into two categories: . ```text Register Space (10-bit addressing: 0x000 - 0x3FF) . ├── Central/Global Registers (0x0000 - 0x0207) │ ├── Control &amp; Config (0x0000 - 0x0019) │ ├── Diagnostics (0x000A - 0x0018) │ ├── Test &amp; BIST (0x003F) │ └── Feedback &amp; ID (0x0200 - 0x0207) │ └── Per-Channel Registers (0x0100 - 0x01BF) ├── Channel 0: 0x0100 - 0x011F ├── Channel 1: 0x0120 - 0x013F ├── Channel 2: 0x0140 - 0x015F ├── Channel 3: 0x0160 - 0x017F ├── Channel 4: 0x0180 - 0x019F └── Channel 5: 0x01A0 - 0x01BF . Channel Address Calculation: Base = 0x0100 + (Channel_Number × 0x0020) Register = Base + Offset ```text . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#register-organization",
    
    "relUrl": "/docs/03_Register_Map/#register-organization"
  },"44": {
    "doc": "📋 Register Map",
    "title": "Register Access Types",
    "content": "| Type | Description | Behavior | . | r | Read-only | Write has no effect | . | rw | Read/Write | Standard read and write | . | rwh | Read/Write, clear on write 1 | Write 1 to clear (fault flags) | . | rh | Read, hardware sets | Software read-only, HW updates | . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#register-access-types",
    
    "relUrl": "/docs/03_Register_Map/#register-access-types"
  },"45": {
    "doc": "📋 Register Map",
    "title": "Central Registers Summary",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#central-registers-summary",
    
    "relUrl": "/docs/03_Register_Map/#central-registers-summary"
  },"46": {
    "doc": "📋 Register Map",
    "title": "Control &amp; Configuration",
    "content": "| Address | Name | Type | Default | Description | . | 0x0000 | CH_CTRL | rw | 0x0000 | Channel control and mode | . | 0x0002 | GLOBAL_CONFIG | rw | 0x4005 | Global configuration | . | 0x0006 | VBAT_TH | rwh | 0xFF19 | VBAT thresholds | . | 0x0007 | FB_FRZ | rw | 0x0000 | Feedback freeze control | . | 0x0008 | FB_UPD | rw | 0x0000 | Feedback update control | . | 0x0009 | WD_RELOAD | rw | 0x0000 | SPI watchdog reload | . | 0x0019 | CLK_DIV | rw | 0x0000 | Clock divider | . | 0x003F | SFF_BIST | rw | 0x0000 | Built-in self-test | . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#control--configuration",
    
    "relUrl": "/docs/03_Register_Map/#control--configuration"
  },"47": {
    "doc": "📋 Register Map",
    "title": "Diagnostics",
    "content": "| Address | Name | Type | Default | Description | . | 0x0003 | GLOBAL_DIAG0 | rwh/rw | 0x0600 | Global diagnostics 0 | . | 0x0004 | GLOBAL_DIAG1 | rwh/rw | 0x0000 | Global diagnostics 1 | . | 0x0005 | GLOBAL_DIAG2 | rwh/rw | 0x0000 | Global diagnostics 2 | . | 0x000A-F | DIAG_ERR_CHGRx | rh | 0x0000 | Channel error flags (6) | . | 0x0010-15 | DIAG_WARN_CHGRx | rh | 0x0000 | Channel warning flags (6) | . | 0x0016 | FAULT_MASK0 | rw | 0x0000 | Fault mask register 0 | . | 0x0017 | FAULT_MASK1 | rw | 0x0000 | Fault mask register 1 | . | 0x0018 | FAULT_MASK2 | rw | 0x0000 | Fault mask register 2 | . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#diagnostics",
    
    "relUrl": "/docs/03_Register_Map/#diagnostics"
  },"48": {
    "doc": "📋 Register Map",
    "title": "Feedback &amp; Status",
    "content": "| Address | Name | Type | Default | Description | . | 0x0200 | ICVID | r | - | IC version and ID | . | 0x0201 | PIN_STAT | rh | varies | Pin status feedback | . | 0x0202 | FB_STAT | rh | varies | Feedback status | . | 0x0203 | FB_VOLTAGE1 | rh | varies | VBAT voltage | . | 0x0204 | FB_VOLTAGE2 | rh | varies | VIO/VDD voltage | . | 0x0205-7 | CHIPID0-2 | r | unique | Unique chip ID (48-bit) | . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#feedback--status",
    
    "relUrl": "/docs/03_Register_Map/#feedback--status"
  },"49": {
    "doc": "📋 Register Map",
    "title": "Per-Channel Registers Summary",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#per-channel-registers-summary",
    
    "relUrl": "/docs/03_Register_Map/#per-channel-registers-summary"
  },"50": {
    "doc": "📋 Register Map",
    "title": "Control &amp; Setpoint",
    "content": "| Offset | Name | Type | Default | Description | . | 0x0000 | SETPOINT | rwh | 0x0000 | Current setpoint (15-bit) | . | 0x0001 | CTRL | rw | 0x4600 | Channel control | . | 0x000C | MODE | rw | 0x0000 | Channel operation mode | . | 0x000D | TON | rw | 0x0000 | Direct drive on-time | . | 0x000E | CTRL_INT_THRESH | rw | 0x0003 | Integrator threshold | . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#control--setpoint",
    
    "relUrl": "/docs/03_Register_Map/#control--setpoint"
  },"51": {
    "doc": "📋 Register Map",
    "title": "ICC &amp; PWM",
    "content": "| Offset | Name | Type | Default | Description | . | 0x0002 | PERIOD | rw | 0x0000 | PWM frequency control | . | 0x0003 | INTEGRATOR_LIMIT | rw | 0x43FF | Integrator limits | . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#icc--pwm",
    
    "relUrl": "/docs/03_Register_Map/#icc--pwm"
  },"52": {
    "doc": "📋 Register Map",
    "title": "Dither",
    "content": "| Offset | Name | Type | Default | Description | . | 0x0004 | DITHER_CLK_DIV | rw | 0x0000 | Dither clock divider | . | 0x0005 | DITHER_STEP | rw | 0x0000 | Dither steps | . | 0x0006 | DITHER_CTRL | rw | 0x0000 | Dither control | . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#dither",
    
    "relUrl": "/docs/03_Register_Map/#dither"
  },"53": {
    "doc": "📋 Register Map",
    "title": "Configuration &amp; Feedback",
    "content": "| Offset | Name | Type | Default | Description | . | 0x0007 | CH_CONFIG | rwh | 0x0003 | Channel configuration | . | 0x0200 | FB_DC | rh | varies | Duty cycle feedback | . | 0x0201 | FB_VBAT | rh | varies | VBAT feedback | . | 0x0202 | FB_I_AVG | rh | varies | Average current | . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#configuration--feedback",
    
    "relUrl": "/docs/03_Register_Map/#configuration--feedback"
  },"54": {
    "doc": "📋 Register Map",
    "title": "Detailed Register Descriptions",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#detailed-register-descriptions",
    
    "relUrl": "/docs/03_Register_Map/#detailed-register-descriptions"
  },"55": {
    "doc": "📋 Register Map",
    "title": "CH_CTRL (0x0000) - Channel Control",
    "content": "text Bits: 15 14 13 12 11-6 5 4 3 2 1 0 ┌───┬───┬───┬───┬────┬───┬───┬───┬───┬───┬───┐ │OP │PR │PR │PR │Res │EN │EN │EN │EN │EN │EN │ │MOD│1_2│0_3│4_5│ │CH5│CH4│CH3│CH2│CH1│CH0│ └───┴───┴───┴───┴────┴───┴───┴───┴───┴───┴───┘ text . | Bit | Field | Type | Description | . | 15 | OP_MODE | rw | 0=Config Mode, 1=Mission Mode | . | 14 | CH_PAR_1_2 | rw | Parallel channels 1/2 | . | 13 | CH_PAR_0_3 | rw | Parallel channels 0/3 | . | 12 | CH_PAR_4_5 | rw | Parallel channels 4/5 | . | 5-0 | EN_CHx | rw | Enable channel x (Mission mode only) | . Notes: . | Channel enable requires Mission Mode | Parallel configuration requires Config Mode | . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#ch_ctrl-0x0000---channel-control",
    
    "relUrl": "/docs/03_Register_Map/#ch_ctrl-0x0000---channel-control"
  },"56": {
    "doc": "📋 Register Map",
    "title": "GLOBAL_CONFIG (0x0002) - Global Configuration",
    "content": "text Bits: 15 14 13 12 11-6 5 4 3 2 1 0 ┌──┬───┬───┬───┬────┬───┬───┬──┬───┬───┬───┐ │Res│VIO│UV │OT │Res │V15│V15│Rs│CRC│SPI│CLK│ │ │SEL│OV │TST│ │OV │UV │ │EN │WD │WD │ └──┴───┴───┴───┴────┴───┴───┴──┴───┴───┴───┘ text . | Bit | Field | Description | . | 14 | VIO_SEL | VIO voltage: 0=3.3V, 1=5.0V | . | 13 | UV_OV_SWAP | Test UV/OV swap | . | 12 | OT_TEST | Test over-temperature | . | 5 | V1V5_OV_TEST | Test 1.5V OV detection | . | 4 | V1V5_UV_TEST | Test 1.5V UV detection | . | 2 | CRC_EN | Enable CRC checking | . | 1 | SPI_WD_EN | Enable SPI watchdog | . | 0 | CLK_WD_EN | Enable clock watchdog | . Default: 0x4005 (CRC + watchdogs enabled, 3.3V VIO) . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#global_config-0x0002---global-configuration",
    
    "relUrl": "/docs/03_Register_Map/#global_config-0x0002---global-configuration"
  },"57": {
    "doc": "📋 Register Map",
    "title": "SETPOINT (0x0100 + Ch×0x20) - Current Setpoint",
    "content": "text Bits: 15 14 0 ┌──────────┬──────────────────────────────────┐ │AUTO_LIMIT│ TARGET (15-bit) │ │ _DIS │ │ └──────────┴──────────────────────────────────┘ text . | Bits | Field | Description | . | 14:0 | TARGET | Current setpoint value | . | 15 | AUTO_LIMIT_DIS | Disable auto-limit feature | . Current Calculation: text Single mode: I_set = 2000mA × TARGET / 32767 Parallel mode: I_set = 4000mA × TARGET / 32767 Resolution: 0.061mA (single), 0.122mA (parallel) text . Example Values: . | TARGET | Current (Single) | Current (Parallel) | . | 0x0000 | 0 mA | 0 mA | . | 0x1000 | 250 mA | 500 mA | . | 0x4000 | 1000 mA | 2000 mA | . | 0x6000 | 1500 mA | 3000 mA | . | 0x7FFF | 2000 mA | 4000 mA | . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#setpoint-0x0100--ch0x20---current-setpoint",
    
    "relUrl": "/docs/03_Register_Map/#setpoint-0x0100--ch0x20---current-setpoint"
  },"58": {
    "doc": "📋 Register Map",
    "title": "CH_CONFIG (0x0107 + Ch×0x20) - Channel Configuration",
    "content": "text Bits: 15 14 13 12 7 6 4 3 2 1 0 ┌───┬───┬──────┬───────────┬──────┬────┬────┐ │OFF│OFF│OC_DG │ OL_TH_FIX │OL_TH │IDAG│SLEW│ │DG1│DG0│ _EN │ │ │ │ │ └───┴───┴──────┴───────────┴──────┴────┴────┘ text . | Bits | Field | Description | . | 1:0 | SLEWR | Slew rate: 00=1V/µs, 01=2.5V/µs, 10=5V/µs, 11=10V/µs | . | 3:2 | I_DIAG | OFF diagnostic current: 00=80µA, 01=190µA, 10=720µA, 11=1250µA | . | 6:4 | OL_TH | Open load threshold (relative to setpoint, 0=disabled, 1-7=1/8 to 7/8) | . | 12:7 | OL_TH_FIXED | Fixed open load threshold | . | 13 | OC_DIAG_EN | Enable OC diagnosis in OFF state | . | 15:14 | OFF_DIAG_CH | OFF diagnostic control: 00=enabled, 01=LS only, 10=HS only | . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#ch_config-0x0107--ch0x20---channel-configuration",
    
    "relUrl": "/docs/03_Register_Map/#ch_config-0x0107--ch0x20---channel-configuration"
  },"59": {
    "doc": "📋 Register Map",
    "title": "MODE (0x010C + Ch×0x20) - Channel Mode",
    "content": "text Bits: 15 4 3 0 ┌──────────────────────┬──────────────┐ │ Reserved │ CH_MODE │ └──────────────────────┴──────────────┘ text . | Value | Mode | Description | . | 0x0 | Off | Channel disabled | . | 0x1 | ICC | Integrated Current Control (main mode) | . | 0x2 | Direct SPI | Direct drive via TON register | . | 0x3 | Direct DRV0 | Direct drive via DRV0 pin | . | 0x4 | Direct DRV1 | Direct drive via DRV1 pin | . | 0xC | Measurement | Free-running measurement mode | . Note: Mode changes require Config Mode . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#mode-0x010c--ch0x20---channel-mode",
    
    "relUrl": "/docs/03_Register_Map/#mode-0x010c--ch0x20---channel-mode"
  },"60": {
    "doc": "📋 Register Map",
    "title": "Register Access Patterns",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#register-access-patterns",
    
    "relUrl": "/docs/03_Register_Map/#register-access-patterns"
  },"61": {
    "doc": "📋 Register Map",
    "title": "Initialization Sequence",
    "content": "```text . | Power-on / Reset ├─ Device in Config Mode (OP_MODE=0) └─ All channels disabled . | Configure Global Settings ├─ Write GLOBAL_CONFIG (CRC, watchdogs, VIO) ├─ Write VBAT_TH (voltage thresholds) └─ Write WD_RELOAD (if SPI watchdog enabled) . | Configure Channels (per channel) ├─ Write MODE (select ICC/Direct/etc.) ├─ Write CH_CONFIG (slew, diagnostics) ├─ Write SETPOINT (current target) ├─ Write PERIOD (if using ICC PWM) └─ Write DITHER_xxx (if using dither) . | Enter Mission Mode └─ Write CH_CTRL with OP_MODE=1 . | Enable Channels └─ Write CH_CTRL with EN_CHx=1 ```text . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#initialization-sequence",
    
    "relUrl": "/docs/03_Register_Map/#initialization-sequence"
  },"62": {
    "doc": "📋 Register Map",
    "title": "Runtime Monitoring",
    "content": "```text Periodic Reads: ├─ GLOBAL_DIAG0 (supply faults, temperature) ├─ DIAG_ERR_CHGRx (channel error flags) ├─ DIAG_WARN_CHGRx (channel warnings) ├─ FB_I_AVG (actual current per channel) ├─ FB_DC (duty cycle per channel) └─ FB_VOLTAGE1/2 (supply voltages) . Watchdog Service: └─ Write WD_RELOAD periodically (if enabled) ```text . | Navigation: ← SPI Protocol | Next: Current Control → | . ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/#runtime-monitoring",
    
    "relUrl": "/docs/03_Register_Map/#runtime-monitoring"
  },"63": {
    "doc": "📋 Register Map",
    "title": "📋 Register Map",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/03_Register_Map/",
    
    "relUrl": "/docs/03_Register_Map/"
  },"64": {
    "doc": "⚡ Current Control",
    "title": "Current Control (ICC)",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#current-control-icc",
    
    "relUrl": "/docs/04_Current_Control/#current-control-icc"
  },"65": {
    "doc": "⚡ Current Control",
    "title": "Integrated Current Controller",
    "content": "The ICC (Integrated Current Controller) is the primary current regulation system providing precise 15-bit current control. ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#integrated-current-controller",
    
    "relUrl": "/docs/04_Current_Control/#integrated-current-controller"
  },"66": {
    "doc": "⚡ Current Control",
    "title": "ICC Architecture",
    "content": "``` Current Control Loop: . | 1 2 3 4 5 6 7 8 9 10 11 12 13 . | Setpoint ───▶┌────────────┐ ┌──────────┐ ┌─────────┐ (15-bit) │ Difference │────▶│Integrator│────▶│ PWM │ │ Amp │ │ (ICC) │ │ Driver │ └─────▲──────┘ └──────────┘ └────┬────┘ │ │ │ ┌───────────┐ │ └────┤ Current │◀─────────────────┘ │ Sense │ Output └───────────┘ PWM Frequency: Configurable via PERIOD register Dither Overlay: Optional current modulation Regulation: Closed-loop with integrator \\`\\`\\` . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#icc-architecture",
    
    "relUrl": "/docs/04_Current_Control/#icc-architecture"
  },"67": {
    "doc": "⚡ Current Control",
    "title": "Current Resolution",
    "content": "15-Bit Precision: . | Single Mode: 0-2000 mA / 32767 steps = 0.061 mA/step | Parallel Mode: 0-4000 mA / 32767 steps = 0.122 mA/step | . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#current-resolution",
    
    "relUrl": "/docs/04_Current_Control/#current-resolution"
  },"68": {
    "doc": "⚡ Current Control",
    "title": "Setpoint Configuration",
    "content": "Formula: ``` TARGET = (I_desired × 32767) / I_max Where: I_max = 2000mA (single) or 4000mA (parallel) ``` . Examples: . | Desired Current | TARGET Value | Hex | . | 100 mA | 1638 | 0x0666 | . | 500 mA | 8192 | 0x2000 | . | 1000 mA | 16384 | 0x4000 | . | 1500 mA | 24576 | 0x6000 | . | 2000 mA | 32767 | 0x7FFF | . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#setpoint-configuration",
    
    "relUrl": "/docs/04_Current_Control/#setpoint-configuration"
  },"69": {
    "doc": "⚡ Current Control",
    "title": "PWM Frequency Control",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#pwm-frequency-control",
    
    "relUrl": "/docs/04_Current_Control/#pwm-frequency-control"
  },"70": {
    "doc": "⚡ Current Control",
    "title": "PERIOD Register Configuration",
    "content": "``` Bits: 15 12 11 10 8 7 0 ┌───────┬────┬────────┬───────────────┐ │PWM_CTL│LOW │PERIOD │ PERIOD │ │_PARAM │FREQ│ _EXP │ _MANT │ └───────┴────┴────────┴───────────────┘ ``` . Formula: ``` Standard: T_pwm = PERIOD_MANT × 2^PERIOD_EXP × (1/f_sys) Low Freq: T_pwm = PERIOD_MANT × 8 × 2^PERIOD_EXP × (1/f_sys) . Where f_sys ≈ 8 MHz (internal clock) ``` . Example Calculations: . | MANT | EXP | Low Freq | Frequency | Period | . | 100 | 0 | No | 80 kHz | 12.5 µs | . | 100 | 4 | No | 5 kHz | 200 µs | . | 50 | 6 | Yes | 312.5 Hz | 3.2 ms | . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#period-register-configuration",
    
    "relUrl": "/docs/04_Current_Control/#period-register-configuration"
  },"71": {
    "doc": "⚡ Current Control",
    "title": "Dither Support",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#dither-support",
    
    "relUrl": "/docs/04_Current_Control/#dither-support"
  },"72": {
    "doc": "⚡ Current Control",
    "title": "Dither Waveform",
    "content": "``` Current vs Time (Dither Enabled): . | 1 2 3 4 5 6 7 8 9 10 11 12 . | I_max ┐ ╱▔▔▔▔▔▔▔╲ ╱▔▔▔▔▔▔▔╲ │ ╱ ╲ ╱ ╲ I_set ├──────────────────O────────────────── │ ╲ ╱ ╲ ╱ I_min ┘ ╲___________╱ └────────────────────────────────────▶ Time ◄───── T_dither ─────▶ Components: - Steps: Number of increments in quarter period - Flat: Hold time at peak/valley - Step Size: Amplitude of each increment \\`\\`\\` . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#dither-waveform",
    
    "relUrl": "/docs/04_Current_Control/#dither-waveform"
  },"73": {
    "doc": "⚡ Current Control",
    "title": "Configuration Registers",
    "content": ". | DITHER_CLK_DIV: Reference clock period | DITHER_STEP: Steps and flat period | DITHER_CTRL: Step size and control | . Dither Amplitude: ``` I_dither = STEPS × STEP_SIZE × 2A / 32767 ``` . Dither Period: ``` T_dither = [4×STEPS + 2×FLAT] × t_ref_clk ``` . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#configuration-registers",
    
    "relUrl": "/docs/04_Current_Control/#configuration-registers"
  },"74": {
    "doc": "⚡ Current Control",
    "title": "Dither Use Cases",
    "content": "| Application | Configuration | Purpose | . | Solenoid Positioning | Small steps, high freq | Precise position control | . | Valve Control | Medium steps, low freq | Smooth flow transitions | . | Noise Reduction | Random steps | Break up acoustic noise | . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#dither-use-cases",
    
    "relUrl": "/docs/04_Current_Control/#dither-use-cases"
  },"75": {
    "doc": "⚡ Current Control",
    "title": "Integrator Control",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#integrator-control",
    
    "relUrl": "/docs/04_Current_Control/#integrator-control"
  },"76": {
    "doc": "⚡ Current Control",
    "title": "INTEGRATOR_LIMIT Register",
    "content": "``` Bits: 15 14 10 9 0 ┌──┬─────────────────┬─────────────────┐ │Rs│AUTO_LIM_VALUE │ LIM_VALUE │ │ │ _ABS │ _ABS │ └──┴─────────────────┴─────────────────┘ ``` . Purpose: . | Prevents integrator windup | Faster settling after setpoint changes | Two limits: Normal and Auto (after setpoint change) | . Recommended Values: . | Normal operation: 0x3FF (maximum) | Fast response: 0x1FF (reduced) | Auto-limit: 0x0FF (aggressive) | . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#integrator_limit-register",
    
    "relUrl": "/docs/04_Current_Control/#integrator_limit-register"
  },"77": {
    "doc": "⚡ Current Control",
    "title": "Current Measurement",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#current-measurement",
    
    "relUrl": "/docs/04_Current_Control/#current-measurement"
  },"78": {
    "doc": "⚡ Current Control",
    "title": "Feedback Mechanism",
    "content": "``` Measurement Path: . | 1 2 3 4 5 . | Load Current ──▶ Sense ──▶ ADC ──▶ Filter ──▶ FB_I_AVG │ ├──▶ Min/Max ──▶ FB_IMIN_IMAX │ └──▶ DC Calc ──▶ FB_DC \\`\\`\\` . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#feedback-mechanism",
    
    "relUrl": "/docs/04_Current_Control/#feedback-mechanism"
  },"79": {
    "doc": "⚡ Current Control",
    "title": "Feedback Registers (Per Channel)",
    "content": "| Register | Content | Update Rate | . | FB_I_AVG | Average current over dither period | Dither period | . | FB_DC | PWM duty cycle (0-100%) | PWM period | . | FB_VBAT | Average VBAT | Configurable | . | FB_IMIN_IMAX | Min/Max current | Dither period | . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#feedback-registers-per-channel",
    
    "relUrl": "/docs/04_Current_Control/#feedback-registers-per-channel"
  },"80": {
    "doc": "⚡ Current Control",
    "title": "Parallel Operation",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#parallel-operation",
    
    "relUrl": "/docs/04_Current_Control/#parallel-operation"
  },"81": {
    "doc": "⚡ Current Control",
    "title": "Channel Pairing",
    "content": "``` Available Pairs: . | 1 2 3 4 5 6 7 . | ┌─────────┬─────────┐ │ CH0 │ CH3 │ ◀── Can be paralleled (4A) ├─────────┼─────────┤ │ CH1 │ CH2 │ ◀── Can be paralleled (4A) ├─────────┼─────────┤ │ CH4 │ CH5 │ ◀── Can be paralleled (4A) └─────────┴─────────┘ \\`\\`\\` . | . Configuration: . | Enter Config Mode | Set CH_PAR_x_y bit in CH_CTRL | Configure both channels identically | Enter Mission Mode | Enable both channels | . Current Calculation (Parallel): ``` I_total = 4000mA × TARGET / 32767 Max: 4000 mA (4A) ``` . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#channel-pairing",
    
    "relUrl": "/docs/04_Current_Control/#channel-pairing"
  },"82": {
    "doc": "⚡ Current Control",
    "title": "ICC Tuning Guidelines",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#icc-tuning-guidelines",
    
    "relUrl": "/docs/04_Current_Control/#icc-tuning-guidelines"
  },"83": {
    "doc": "⚡ Current Control",
    "title": "Response Time vs Stability",
    "content": "``` Fast Response Stability (High Gains) (Low Gains) . | 1 2 3 4 5 . | ◄────────────────────────────────▶ │ │ │ │ Unstable Aggressive Balanced Slow Recommended: Balanced (middle range) \\`\\`\\` . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#response-time-vs-stability",
    
    "relUrl": "/docs/04_Current_Control/#response-time-vs-stability"
  },"84": {
    "doc": "⚡ Current Control",
    "title": "Parameter Recommendations",
    "content": "| Load Type | PWM_CTRL_PARAM | INT_THRESH | Response | . | Resistive | 0x8 | 0x100 | Fast | . | Inductive (low L) | 0x6 | 0x80 | Medium | . | Inductive (high L) | 0x4 | 0x40 | Slow | . | Solenoid | 0x5 | 0x60 | Balanced | . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#parameter-recommendations",
    
    "relUrl": "/docs/04_Current_Control/#parameter-recommendations"
  },"85": {
    "doc": "⚡ Current Control",
    "title": "Tuning Process",
    "content": "``` . | Start with default values ├─ PWM_CTRL_PARAM = 0x6 ├─ INT_THRESH = 0x80 └─ INTEGRATOR_LIMIT = 0x3FF . | Observe step response └─ Apply setpoint step change . | Adjust based on behavior ├─ Oscillation? → Reduce PWM_CTRL_PARAM ├─ Too slow? → Increase PWM_CTRL_PARAM └─ Overshoot? → Reduce INT_THRESH . | Fine-tune integrator limits └─ Reduce for faster settling ``` . | . | Navigation: ← Register Map | Next: Channel Modes → | . ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/#tuning-process",
    
    "relUrl": "/docs/04_Current_Control/#tuning-process"
  },"86": {
    "doc": "⚡ Current Control",
    "title": "⚡ Current Control",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/04_Current_Control/",
    
    "relUrl": "/docs/04_Current_Control/"
  },"87": {
    "doc": "🎛️ Channel Modes",
    "title": "Channel Modes",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#channel-modes",
    
    "relUrl": "/docs/05_Channel_Modes/#channel-modes"
  },"88": {
    "doc": "🎛️ Channel Modes",
    "title": "Operation Modes Overview",
    "content": "The TLE92466ED supports multiple channel operation modes, each designed for specific applications. Modes are configured per-channel in Config Mode. ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#operation-modes-overview",
    
    "relUrl": "/docs/05_Channel_Modes/#operation-modes-overview"
  },"89": {
    "doc": "🎛️ Channel Modes",
    "title": "Mode Architecture",
    "content": "```text Device Modes: Channel Modes: . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 . | ┌──────────────┐ ┌─────────────────┐ │ Config Mode │ │ 0x0: Off │ │ │ │ 0x1: ICC │ │ - Configure │◄─────────┤ 0x2: Direct SPI │ │ - Set modes │ │ 0x3: Direct DRV0│ │ - No outputs │ │ 0x4: Direct DRV1│ └──────┬───────┘ │ 0xC: Measurement│ │ └─────────────────┘ │ OP_MODE=1 ▼ ┌──────────────┐ │ Mission Mode │ │ │ │ - Enable CH │ │ - Outputs ON │ │ - Control │ └──────────────┘ ```text . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#mode-architecture",
    
    "relUrl": "/docs/05_Channel_Modes/#mode-architecture"
  },"90": {
    "doc": "🎛️ Channel Modes",
    "title": "Device Operating Modes",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#device-operating-modes",
    
    "relUrl": "/docs/05_Channel_Modes/#device-operating-modes"
  },"91": {
    "doc": "🎛️ Channel Modes",
    "title": "Config Mode (OP_MODE=0)",
    "content": "Purpose: Configuration and initialization . Characteristics: . | All channels disabled (outputs OFF) | Mode-locked registers writable | Parallel operation configurable | Channel modes changeable | . Use Cases: . | Initial device setup | Changing channel modes | Configuring parallel operation | Reconfiguring after faults | . Restrictions: . | Channels cannot be enabled | No output switching possible | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#config-mode-op_mode0",
    
    "relUrl": "/docs/05_Channel_Modes/#config-mode-op_mode0"
  },"92": {
    "doc": "🎛️ Channel Modes",
    "title": "Mission Mode (OP_MODE=1)",
    "content": "Purpose: Normal operation . Characteristics: . | Channels can be enabled | Outputs controllable | Real-time current control | Diagnostics active | . Use Cases: . | Normal operation | Current control | Real-time monitoring | . Restrictions: . | Mode-locked registers read-only | Cannot change channel modes | Cannot configure parallel operation | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#mission-mode-op_mode1",
    
    "relUrl": "/docs/05_Channel_Modes/#mission-mode-op_mode1"
  },"93": {
    "doc": "🎛️ Channel Modes",
    "title": "Mode Switching",
    "content": "```text Transition Sequence: . | 1 2 3 4 5 6 7 8 9 10 11 . | Config → Mission: 1. Write CH_CTRL with OP_MODE=1 2. Device transitions (immediate) 3. Channels can now be enabled 4. System ready for operation Mission → Config: 1. Write CH_CTRL with OP_MODE=0 2. All channels disabled automatically 3. Device transitions (immediate) 4. Configuration registers unlocked ```text . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#mode-switching",
    
    "relUrl": "/docs/05_Channel_Modes/#mode-switching"
  },"94": {
    "doc": "🎛️ Channel Modes",
    "title": "Channel Operation Modes",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#channel-operation-modes",
    
    "relUrl": "/docs/05_Channel_Modes/#channel-operation-modes"
  },"95": {
    "doc": "🎛️ Channel Modes",
    "title": "Mode 0x0: Off",
    "content": "Description: Channel disabled . Configuration: cpp driver.set_channel_mode(Channel::CH0, ChannelMode::OFF); text . Behavior: . | Output stage disabled | No current flow | Diagnostics inactive (except OFF-state) | Lowest power consumption | . Use Cases: . | Unused channels | Disable during fault | Power saving | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#mode-0x0-off",
    
    "relUrl": "/docs/05_Channel_Modes/#mode-0x0-off"
  },"96": {
    "doc": "🎛️ Channel Modes",
    "title": "Mode 0x1: ICC (Integrated Current Control)",
    "content": "Description: Precision current regulation . Configuration: cpp driver.set_channel_mode(Channel::CH0, ChannelMode::ICC); driver.set_current_setpoint(Channel::CH0, 1500); // 1.5A text . Behavior: . | Closed-loop current control | PWM-based regulation | 15-bit resolution (0.061mA steps) | Dither support | Current feedback available | . Control Loop: text Setpoint → Difference → Integrator → PWM → Output ▲ │ └──────── Sense ◄──────────────┘ text . Use Cases: . | Solenoid actuators (primary use) | Valve control | Precise current applications | Variable force control | . Parameters: . | SETPOINT: Current target (15-bit) | PERIOD: PWM frequency | INTEGRATOR_LIMIT: Windup prevention | DITHER_xxx: Current shaping | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#mode-0x1-icc-integrated-current-control",
    
    "relUrl": "/docs/05_Channel_Modes/#mode-0x1-icc-integrated-current-control"
  },"97": {
    "doc": "🎛️ Channel Modes",
    "title": "Mode 0x2: Direct Drive (SPI)",
    "content": "Description: Time-based output control via SPI . Configuration: cpp driver.set_channel_mode(Channel::CH0, ChannelMode::DIRECT_DRIVE_SPI); // Configure on-time in TON register text . Behavior: . | Output ON for specified duration | No current regulation | Time configured in TON register | Repeated automatically | . Timing: ```text t_on = [(TON_MANT + 1) × 2^EXP] × (1/f_sys) . | 1 2 . | Where: EXP from DITHER_CLK_DIV register f_sys ≈ 8 MHz ```text . | . Use Cases: . | Simple ON/OFF control | Pulsed operation | Fixed duty cycle | No current feedback needed | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#mode-0x2-direct-drive-spi",
    
    "relUrl": "/docs/05_Channel_Modes/#mode-0x2-direct-drive-spi"
  },"98": {
    "doc": "🎛️ Channel Modes",
    "title": "Mode 0x3: Direct Drive (DRV0 Pin)",
    "content": "Description: External hardware control via DRV0 pin . Configuration: cpp driver.set_channel_mode(Channel::CH0, ChannelMode::DIRECT_DRIVE_DRV0); text . Behavior: . | Output follows DRV0 pin state | Hardware-controlled timing | Low latency response | No SPI communication needed | . Pin Control: ```text DRV0 Pin: ─────┐ ┌─────┐ ┌───── └──────┘ └──────┘ . | 1 2 3 . | Output: ─────┐ ┌─────┐ ┌───── └──────┘ └──────┘ (Follows DRV0) ```text . | . Use Cases: . | External PWM control | Hardware sequencing | Emergency override | Minimal software overhead | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#mode-0x3-direct-drive-drv0-pin",
    
    "relUrl": "/docs/05_Channel_Modes/#mode-0x3-direct-drive-drv0-pin"
  },"99": {
    "doc": "🎛️ Channel Modes",
    "title": "Mode 0x4: Direct Drive (DRV1 Pin)",
    "content": "Description: External hardware control via DRV1 pin . Configuration: cpp driver.set_channel_mode(Channel::CH0, ChannelMode::DIRECT_DRIVE_DRV1); text . Behavior: Same as DRV0 but using DRV1 pin . Use Cases: . | Dual external control | Independent hardware sequencing | Multi-source control | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#mode-0x4-direct-drive-drv1-pin",
    
    "relUrl": "/docs/05_Channel_Modes/#mode-0x4-direct-drive-drv1-pin"
  },"100": {
    "doc": "🎛️ Channel Modes",
    "title": "Mode 0xC: Free-Running Measurement",
    "content": "Description: Continuous current measurement without output . Configuration: cpp driver.set_channel_mode(Channel::CH0, ChannelMode::FREE_RUN_MEAS); text . Behavior: . | Output disabled | Current sensing active | 2^16 samples collected | Feedback registers updated | . Use Cases: . | Load characterization | Diagnostic measurements | System calibration | Fault analysis | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#mode-0xc-free-running-measurement",
    
    "relUrl": "/docs/05_Channel_Modes/#mode-0xc-free-running-measurement"
  },"101": {
    "doc": "🎛️ Channel Modes",
    "title": "Parallel Operation",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#parallel-operation",
    
    "relUrl": "/docs/05_Channel_Modes/#parallel-operation"
  },"102": {
    "doc": "🎛️ Channel Modes",
    "title": "Channel Pairing",
    "content": "The TLE92466ED allows three parallel pairs: . ```text ┌─────────┬─────────┐ │ CH0 │ CH3 │ ◄── Pair 0/3 (4A max) ├─────────┼─────────┤ │ CH1 │ CH2 │ ◄── Pair 1/2 (4A max) ├─────────┼─────────┤ │ CH4 │ CH5 │ ◄── Pair 4/5 (4A max) └─────────┴─────────┘ . | 1 2 3 4 . | Configuration: CH_CTRL register - Bit 14: CH_PAR_1_2 - Bit 13: CH_PAR_0_3 - Bit 12: CH_PAR_4_5 ```text . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#channel-pairing",
    
    "relUrl": "/docs/05_Channel_Modes/#channel-pairing"
  },"103": {
    "doc": "🎛️ Channel Modes",
    "title": "Parallel Configuration Sequence",
    "content": "```text . | Enter Config Mode └─ Write CH_CTRL with OP_MODE=0 . | Configure Parallel Pair (e.g., CH0/CH3) └─ Set CH_PAR_0_3 bit in CH_CTRL . | Configure Both Channels Identically ├─ Same MODE (typically ICC) ├─ Same SETPOINT ├─ Same CH_CONFIG └─ Same PWM/Dither settings . | Enter Mission Mode └─ Write CH_CTRL with OP_MODE=1 . | Enable Both Channels └─ Set EN_CH0 and EN_CH3 in CH_CTRL ```text . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#parallel-configuration-sequence",
    
    "relUrl": "/docs/05_Channel_Modes/#parallel-configuration-sequence"
  },"104": {
    "doc": "🎛️ Channel Modes",
    "title": "Parallel Mode Considerations",
    "content": "Current Calculation: ```text Single: I_max = 2000 mA Parallel: I_max = 4000 mA . TARGET value same for both, but total current doubles ```text . Load Connection: ```text Parallel Connection: . | 1 2 3 4 5 6 7 8 9 10 11 12 13 . | VBAT ──┬─────────────┬─────────────┐ │ │ │ ┌──┴──┐ ┌──┴──┐ │ │ CH0 │ │ CH3 │ │ └──┬──┘ └──┬──┘ │ │ │ │ └─────┬───────┘ │ │ │ ┌──┴──┐ │ │Load │ (Heavy, 0-4A) │ └──┬──┘ │ │ │ GND◄───────────────────┘ ```text . | . Restrictions: . | Only predefined pairs can be paralleled | Both channels must have identical configuration | Parallel configuration only in Config Mode | Cannot mix modes in parallel pair | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#parallel-mode-considerations",
    
    "relUrl": "/docs/05_Channel_Modes/#parallel-mode-considerations"
  },"105": {
    "doc": "🎛️ Channel Modes",
    "title": "Mode Selection Guidelines",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#mode-selection-guidelines",
    
    "relUrl": "/docs/05_Channel_Modes/#mode-selection-guidelines"
  },"106": {
    "doc": "🎛️ Channel Modes",
    "title": "Decision Matrix",
    "content": "| Application | Mode | Rationale | . | Solenoid actuator | ICC | Precise force control | . | Proportional valve | ICC + Dither | Smooth positioning | . | On/off valve | Direct SPI | Simple control | . | PWM-controlled load | Direct DRV0/1 | Hardware timing | . | Heavy solenoid (&gt;2A) | ICC + Parallel | High current | . | System diagnostic | Measurement | Characterization | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#decision-matrix",
    
    "relUrl": "/docs/05_Channel_Modes/#decision-matrix"
  },"107": {
    "doc": "🎛️ Channel Modes",
    "title": "Mode Switching at Runtime",
    "content": "Not Allowed in Mission Mode: . | Cannot change channel mode without Config Mode | Must return to Config Mode first | . Proper Sequence: ```text . | Disable channel (clear EN_CHx) | Enter Config Mode (OP_MODE=0) | Change mode (write MODE register) | Reconfigure channel parameters | Enter Mission Mode (OP_MODE=1) | Enable channel (set EN_CHx) ```text | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#mode-switching-at-runtime",
    
    "relUrl": "/docs/05_Channel_Modes/#mode-switching-at-runtime"
  },"108": {
    "doc": "🎛️ Channel Modes",
    "title": "Mode Configuration Examples",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#mode-configuration-examples",
    
    "relUrl": "/docs/05_Channel_Modes/#mode-configuration-examples"
  },"109": {
    "doc": "🎛️ Channel Modes",
    "title": "Example 1: ICC with Dither",
    "content": "```cpp // Enter Config Mode driver.enter_config_mode(); . // Configure channel for ICC mode driver.set_channel_mode(Channel::CH0, ChannelMode::ICC); . // Set 1.2A current with dither driver.set_current_setpoint(Channel::CH0, 1200); driver.configure_dither(Channel::CH0, 100, // step_size 20, // num_steps 5); // flat_steps . // Enter Mission Mode and enable driver.enter_mission_mode(); driver.enable_channel(Channel::CH0, true); ```text . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#example-1-icc-with-dither",
    
    "relUrl": "/docs/05_Channel_Modes/#example-1-icc-with-dither"
  },"110": {
    "doc": "🎛️ Channel Modes",
    "title": "Example 2: Parallel Operation",
    "content": "```cpp // Enter Config Mode driver.enter_config_mode(); . // Enable parallel operation CH0/CH3 driver.set_parallel_operation(ParallelPair::CH0_CH3, true); . // Configure both channels identically ChannelConfig config{ .mode = ChannelMode::ICC, .current_setpoint_ma = 3000, // 3A total .slew_rate = SlewRate::MEDIUM_2V5_US }; . driver.configure_channel(Channel::CH0, config); driver.configure_channel(Channel::CH3, config); . // Enter Mission Mode and enable both driver.enter_mission_mode(); driver.enable_channel(Channel::CH0, true); driver.enable_channel(Channel::CH3, true); ```text . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#example-2-parallel-operation",
    
    "relUrl": "/docs/05_Channel_Modes/#example-2-parallel-operation"
  },"111": {
    "doc": "🎛️ Channel Modes",
    "title": "Example 3: Direct Drive",
    "content": "```cpp // Enter Config Mode driver.enter_config_mode(); . // Configure for direct drive via SPI driver.set_channel_mode(Channel::CH0, ChannelMode::DIRECT_DRIVE_SPI); . // Configure on-time (example: 10ms) // TON_MANT × 2^EXP × (1/8MHz) = 10ms // TON_MANT = 500, EXP = 4: 500 × 16 / 8MHz ≈ 1ms . // Enter Mission Mode and enable driver.enter_mission_mode(); driver.enable_channel(Channel::CH0, true); ```text . | Navigation: ← Current Control | Next: Diagnostics → | . ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/#example-3-direct-drive",
    
    "relUrl": "/docs/05_Channel_Modes/#example-3-direct-drive"
  },"112": {
    "doc": "🎛️ Channel Modes",
    "title": "🎛️ Channel Modes",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/05_Channel_Modes/",
    
    "relUrl": "/docs/05_Channel_Modes/"
  },"113": {
    "doc": "🛡️ Diagnostics",
    "title": "Diagnostics &amp; Protection",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#diagnostics--protection",
    
    "relUrl": "/docs/06_Diagnostics/#diagnostics--protection"
  },"114": {
    "doc": "🛡️ Diagnostics",
    "title": "Diagnostic System Overview",
    "content": "The TLE92466ED provides comprehensive diagnostics for fault detection, protection, and system monitoring. ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#diagnostic-system-overview",
    
    "relUrl": "/docs/06_Diagnostics/#diagnostic-system-overview"
  },"115": {
    "doc": "🛡️ Diagnostics",
    "title": "Diagnostic Architecture",
    "content": "```text Diagnostic Flow: . | 1 2 3 4 5 6 7 8 9 10 11 12 13 . | Channels (6) ──┬──▶ Per-Channel Errors ──▶ DIAG_ERR_CHGRx │ ├──▶ Per-Channel Warnings ─▶ DIAG_WARN_CHGRx │ └──▶ Feedback Values ──────▶ FB_xxx registers Global ────────┬──▶ Supply Faults ────────▶ GLOBAL_DIAG0 │ ├──▶ Internal Faults ──────▶ GLOBAL_DIAG1 │ └──▶ Memory Faults ────────▶ GLOBAL_DIAG2 Fault Output ──▶ FAULTN Pin (open drain, active low) ```text . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#diagnostic-architecture",
    
    "relUrl": "/docs/06_Diagnostics/#diagnostic-architecture"
  },"116": {
    "doc": "🛡️ Diagnostics",
    "title": "Global Diagnostics",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#global-diagnostics",
    
    "relUrl": "/docs/06_Diagnostics/#global-diagnostics"
  },"117": {
    "doc": "🛡️ Diagnostics",
    "title": "GLOBAL_DIAG0 - Supply &amp; Temperature",
    "content": "| Bit | Flag | Type | Description | . | 14 | SPI_WD_ERR | Error | SPI watchdog timeout | . | 10 | POR_EVENT | Event | Power-on reset occurred | . | 9 | RES_EVENT | Event | External reset (RESN pin) | . | 8 | COTWARN | Warning | Central over-temperature warning | . | 7 | COTERR | Error | Central over-temperature error | . | 6 | CLK_NOK | Error | Clock fault detected | . | 5 | VDD_OV | Error | VDD overvoltage | . | 4 | VDD_UV | Error | VDD undervoltage | . | 3 | VIO_OV | Error | VIO overvoltage | . | 2 | VIO_UV | Error | VIO undervoltage | . | 1 | VBAT_OV | Error | VBAT overvoltage | . | 0 | VBAT_UV | Error | VBAT undervoltage | . Clearing: Write 1 to clear (rwh type) . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#global_diag0---supply--temperature",
    
    "relUrl": "/docs/06_Diagnostics/#global_diag0---supply--temperature"
  },"118": {
    "doc": "🛡️ Diagnostics",
    "title": "GLOBAL_DIAG1 - Internal Supplies",
    "content": "| Bit | Flag | Description | . | 15 | HVADC_ERR | HV ADC error | . | 6 | VPRE_OV | Pre-regulator OV | . | 5 | REF_OV | Reference OV | . | 4 | REF_UV | Reference UV | . | 3 | VDD2V5_OV | 2.5V supply OV | . | 2 | VDD2V5_UV | 2.5V supply UV | . | 1 | VR_IREF_OV | Bias current OV | . | 0 | VR_IREF_UV | Bias current UV | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#global_diag1---internal-supplies",
    
    "relUrl": "/docs/06_Diagnostics/#global_diag1---internal-supplies"
  },"119": {
    "doc": "🛡️ Diagnostics",
    "title": "GLOBAL_DIAG2 - Memory &amp; ECC",
    "content": "| Bit | Flag | Description | . | 4 | OTP_VIRGIN | OTP not configured | . | 3 | OTP_ECC_ERR | OTP multi-bit error | . | 1 | REG_ECC_ERR | Register ECC error | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#global_diag2---memory--ecc",
    
    "relUrl": "/docs/06_Diagnostics/#global_diag2---memory--ecc"
  },"120": {
    "doc": "🛡️ Diagnostics",
    "title": "Channel Diagnostics",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#channel-diagnostics",
    
    "relUrl": "/docs/06_Diagnostics/#channel-diagnostics"
  },"121": {
    "doc": "🛡️ Diagnostics",
    "title": "DIAG_ERR_CHGRx - Error Flags",
    "content": "Per-channel error register (one per channel): . | Bit | Flag | Description | Action | . | 4 | OLSG | Open load or short to ground | Check load connection | . | 3 | OTE | Over-temperature error | Reduce current/improve cooling | . | 2 | OL | Open load | Check load connection | . | 1 | SG | Short to ground | Check wiring | . | 0 | OC | Over-current | Reduce setpoint/check load | . Reading: cpp auto diag = driver.get_channel_diagnostics(Channel::CH0); if (diag-&gt;overcurrent) { // Handle OC fault } text . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#diag_err_chgrx---error-flags",
    
    "relUrl": "/docs/06_Diagnostics/#diag_err_chgrx---error-flags"
  },"122": {
    "doc": "🛡️ Diagnostics",
    "title": "DIAG_WARN_CHGRx - Warning Flags",
    "content": "| Bit | Flag | Description | . | 3 | OLSG_WARN | OLSG warning | . | 2 | PWM_REG_WARN | PWM regulation warning | . | 1 | I_REG_WARN | Current regulation warning | . | 0 | OTW | Over-temperature warning | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#diag_warn_chgrx---warning-flags",
    
    "relUrl": "/docs/06_Diagnostics/#diag_warn_chgrx---warning-flags"
  },"123": {
    "doc": "🛡️ Diagnostics",
    "title": "Protection Features",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#protection-features",
    
    "relUrl": "/docs/06_Diagnostics/#protection-features"
  },"124": {
    "doc": "🛡️ Diagnostics",
    "title": "Over-Current Protection",
    "content": "Detection: ```text I_load &gt; I_setpoint + margin . | 1 2 3 . | Threshold: Configurable per channel Response: Immediate shutdown Recovery: Clear fault, re-enable ```text . | . Configuration: . | Automatic in ICC mode | Threshold based on setpoint | Fast response (&lt;10µs) | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#over-current-protection",
    
    "relUrl": "/docs/06_Diagnostics/#over-current-protection"
  },"125": {
    "doc": "🛡️ Diagnostics",
    "title": "Open Load Detection",
    "content": "ON-State Detection: ```text I_load &lt; OL_TH × I_setpoint . | 1 . | Where: OL_TH = 1/8 to 7/8 (configurable) ```text . | . OFF-State Detection: text Diagnostic current applied Voltage measured Load impedance calculated text . Configuration: cpp // Set OL threshold to 3/8 of setpoint ChannelConfig config{ .open_load_threshold = 3 // 3/8 threshold }; driver.configure_channel(Channel::CH0, config); text . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#open-load-detection",
    
    "relUrl": "/docs/06_Diagnostics/#open-load-detection"
  },"126": {
    "doc": "🛡️ Diagnostics",
    "title": "Short to Ground Detection",
    "content": "Detection Method: . | Current rises above setpoint | Voltage drops below threshold | Immediate detection | . Response: . | Channel disabled | SG flag set | FAULTN pin asserted (if enabled) | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#short-to-ground-detection",
    
    "relUrl": "/docs/06_Diagnostics/#short-to-ground-detection"
  },"127": {
    "doc": "🛡️ Diagnostics",
    "title": "Over-Temperature Protection",
    "content": "Two Levels: . | Warning (OTW): ~165°C . | Warning flag set | Operation continues | Reduce load recommended | . | Error (OTE): ~175°C . | Channel disabled | Error flag set | Cooling required | . | . Temperature Monitoring: text Tj (Junction) ──▶ Comparison ──▶ Flags │ │ │ ├──▶ OTW (165°C) │ └──▶ OTE (175°C) │ ▼ Thermal Shutdown (auto-recovery) text . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#over-temperature-protection",
    
    "relUrl": "/docs/06_Diagnostics/#over-temperature-protection"
  },"128": {
    "doc": "🛡️ Diagnostics",
    "title": "Supply Voltage Monitoring",
    "content": "VBAT Monitoring: ```text Configurable thresholds: UV: V_BAT_UV = VBAT_UV_TH × 0.16208V OV: V_BAT_OV = VBAT_OV_TH × 0.16208V . Example: UV=7V, OV=40V VBAT_UV_TH = 7V / 0.16208V ≈ 43 (0x2B) VBAT_OV_TH = 40V / 0.16208V ≈ 247 (0xF7) ```text . Configuration: cpp driver.set_vbat_thresholds( 43, // UV threshold (7V) 247 // OV threshold (40V) ); text . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#supply-voltage-monitoring",
    
    "relUrl": "/docs/06_Diagnostics/#supply-voltage-monitoring"
  },"129": {
    "doc": "🛡️ Diagnostics",
    "title": "Watchdog Systems",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#watchdog-systems",
    
    "relUrl": "/docs/06_Diagnostics/#watchdog-systems"
  },"130": {
    "doc": "🛡️ Diagnostics",
    "title": "SPI Watchdog",
    "content": "Purpose: Detect communication loss . Operation: text WD_RELOAD counter ──▶ Decrement ──▶ Timeout? ▲ │ │ ├─▶ No: Continue │ │ └───────── Reload ◄─────────────┴─▶ Yes: Fault text . Configuration: ```cpp // Enable and reload periodically driver.reload_spi_watchdog(1000); . // In main loop: while (running) { driver.reload_spi_watchdog(1000); // … other operations } ```text . Timeout Calculation: ```text t_timeout = WD_TIME / f_spi_wd . Where: f_spi_wd configurable ```text . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#spi-watchdog",
    
    "relUrl": "/docs/06_Diagnostics/#spi-watchdog"
  },"131": {
    "doc": "🛡️ Diagnostics",
    "title": "Clock Watchdog",
    "content": "Purpose: Monitor oscillator . Detection: . | Internal oscillator failure | Clock frequency deviation | Automatic detection | . Response: . | CLK_NOK flag set | Device enters safe state | All outputs disabled | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#clock-watchdog",
    
    "relUrl": "/docs/06_Diagnostics/#clock-watchdog"
  },"132": {
    "doc": "🛡️ Diagnostics",
    "title": "Fault Masking",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#fault-masking",
    
    "relUrl": "/docs/06_Diagnostics/#fault-masking"
  },"133": {
    "doc": "🛡️ Diagnostics",
    "title": "FAULT_MASK Registers",
    "content": "Control which faults assert the FAULTN pin: . FAULT_MASK0 (0x0016): text Per-channel error masking: Bit 0: CH0_ERR_MASK Bit 1: CH1_ERR_MASK ... Bit 5: CH5_ERR_MASK text . FAULT_MASK1 (0x0017): text Per-channel warning masking: Bit 0: CH0_WARN_MASK Bit 1: CH1_WARN_MASK ... Bit 5: CH5_WARN_MASK text . FAULT_MASK2 (0x0018): ```text Global fault masking: . | Supply faults | Temperature faults | Communication faults ```text | . Usage: ```cpp // Mask CH0 warnings from FAULTN write_register(FAULT_MASK1, (1 « 0)); . // Enable all error reporting write_register(FAULT_MASK0, 0x0000); ```text . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#fault_mask-registers",
    
    "relUrl": "/docs/06_Diagnostics/#fault_mask-registers"
  },"134": {
    "doc": "🛡️ Diagnostics",
    "title": "Diagnostic Monitoring Strategy",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#diagnostic-monitoring-strategy",
    
    "relUrl": "/docs/06_Diagnostics/#diagnostic-monitoring-strategy"
  },"135": {
    "doc": "🛡️ Diagnostics",
    "title": "Polling Approach",
    "content": "```cpp void monitor_system() { // Check global status auto status = driver.get_device_status(); . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 . | if (status-&gt;any_fault) { // Handle global faults if (status-&gt;vbat_uv) { log(\"VBAT undervoltage!\"); } if (status-&gt;ot_error) { log(\"Over-temperature!\"); } } // Check each active channel for (int ch = 0; ch &lt; 6; ch++) { auto diag = driver.get_channel_diagnostics(Channel(ch)); if (diag-&gt;overcurrent) { log(\"CH%d: Over-current!\", ch); driver.enable_channel(Channel(ch), false); } if (diag-&gt;open_load) { log(\"CH%d: Open load!\", ch); } if (diag-&gt;short_to_ground) { log(\"CH%d: Short to ground!\", ch); driver.enable_channel(Channel(ch), false); } } } ```text . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#polling-approach",
    
    "relUrl": "/docs/06_Diagnostics/#polling-approach"
  },"136": {
    "doc": "🛡️ Diagnostics",
    "title": "Interrupt-Driven Approach",
    "content": "```cpp // FAULTN pin interrupt handler void FAULTN_IRQHandler() { // Read global diagnostics uint16_t diag0 = read_register(GLOBAL_DIAG0); . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . | // Identify fault source if (diag0 &amp; VBAT_UV) { handle_vbat_fault(); } // Check channel faults for (int ch = 0; ch &lt; 6; ch++) { uint16_t ch_err = read_register(DIAG_ERR_CHGR0 + ch); if (ch_err) { handle_channel_fault(ch, ch_err); } } // Clear faults driver.clear_faults(); } ```text . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#interrupt-driven-approach",
    
    "relUrl": "/docs/06_Diagnostics/#interrupt-driven-approach"
  },"137": {
    "doc": "🛡️ Diagnostics",
    "title": "Fault Recovery Procedures",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#fault-recovery-procedures",
    
    "relUrl": "/docs/06_Diagnostics/#fault-recovery-procedures"
  },"138": {
    "doc": "🛡️ Diagnostics",
    "title": "Over-Current Recovery",
    "content": "```text . | Disable affected channel | Read actual current (FB_I_AVG) | Check if transient or persistent | Reduce setpoint if needed | Clear fault flags | Re-enable with lower current | Monitor for recurrence ```text | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#over-current-recovery",
    
    "relUrl": "/docs/06_Diagnostics/#over-current-recovery"
  },"139": {
    "doc": "🛡️ Diagnostics",
    "title": "Open Load Recovery",
    "content": "```text . | Verify load connection | Check wiring integrity | Confirm load not damaged | Clear fault flags | Re-enable channel | Adjust OL threshold if false positive ```text | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#open-load-recovery",
    
    "relUrl": "/docs/06_Diagnostics/#open-load-recovery"
  },"140": {
    "doc": "🛡️ Diagnostics",
    "title": "Temperature Recovery",
    "content": "```text . | Disable channel immediately (automatic) | Allow cooling period (&gt;10s) | Check thermal management | Reduce current setpoint | Clear fault flags | Re-enable with lower current | Monitor temperature (OTW flag) ```text | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#temperature-recovery",
    
    "relUrl": "/docs/06_Diagnostics/#temperature-recovery"
  },"141": {
    "doc": "🛡️ Diagnostics",
    "title": "Supply Fault Recovery",
    "content": "```text . | Check supply voltage | Verify within operating range | Check supply stability | Adjust thresholds if transient | Clear fault flags | Resume operation ```text | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#supply-fault-recovery",
    
    "relUrl": "/docs/06_Diagnostics/#supply-fault-recovery"
  },"142": {
    "doc": "🛡️ Diagnostics",
    "title": "Best Practices",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#best-practices",
    
    "relUrl": "/docs/06_Diagnostics/#best-practices"
  },"143": {
    "doc": "🛡️ Diagnostics",
    "title": "Monitoring Frequency",
    "content": "```text Recommended polling rates: . | Critical channels: 10 Hz (100ms) | Normal channels: 1 Hz (1s) | Global status: 1 Hz (1s) | FAULTN pin: Interrupt-driven (immediate) ```text | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#monitoring-frequency",
    
    "relUrl": "/docs/06_Diagnostics/#monitoring-frequency"
  },"144": {
    "doc": "🛡️ Diagnostics",
    "title": "Fault Logging",
    "content": "```cpp struct FaultLog { uint32_t timestamp; Channel channel; uint16_t error_flags; uint16_t current_setpoint; uint16_t actual_current; uint16_t vbat; }; . // Log faults for analysis void log_fault(const FaultLog&amp; log); ```text . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#fault-logging",
    
    "relUrl": "/docs/06_Diagnostics/#fault-logging"
  },"145": {
    "doc": "🛡️ Diagnostics",
    "title": "Preventive Measures",
    "content": ". | Set appropriate thresholds | Monitor warnings before errors | Implement graceful degradation | Log all fault events | Periodic system health checks | . | Navigation: ← Channel Modes | Next: Driver API → | . ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/#preventive-measures",
    
    "relUrl": "/docs/06_Diagnostics/#preventive-measures"
  },"146": {
    "doc": "🛡️ Diagnostics",
    "title": "🛡️ Diagnostics",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/06_Diagnostics/",
    
    "relUrl": "/docs/06_Diagnostics/"
  },"147": {
    "doc": "🔧 Driver API",
    "title": "Driver API Reference",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#driver-api-reference",
    
    "relUrl": "/docs/07_Driver_API/#driver-api-reference"
  },"148": {
    "doc": "🔧 Driver API",
    "title": "Driver Class Overview",
    "content": "The TLE92466ED::Driver class provides the complete C++ interface for controlling the IC. ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#driver-class-overview",
    
    "relUrl": "/docs/07_Driver_API/#driver-class-overview"
  },"149": {
    "doc": "🔧 Driver API",
    "title": "Class Declaration",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 . | namespace TLE92466ED { class Driver { public: explicit Driver(HAL&amp; hal) noexcept; ~Driver() noexcept; // No copying, no moving (contains reference) Driver(const Driver&amp;) = delete; Driver&amp; operator=(const Driver&amp;) = delete; Driver(Driver&amp;&amp;) = delete; Driver&amp; operator=(Driver&amp;&amp;) = delete; // Initialization [[nodiscard]] DriverResult&lt;void&gt; init() noexcept; // Mode control [[nodiscard]] DriverResult&lt;void&gt; enter_mission_mode() noexcept; [[nodiscard]] DriverResult&lt;void&gt; enter_config_mode() noexcept; [[nodiscard]] bool is_mission_mode() const noexcept; // Channel control [[nodiscard]] DriverResult&lt;void&gt; enable_channel(Channel, bool) noexcept; [[nodiscard]] DriverResult&lt;void&gt; set_channel_mode(Channel, ChannelMode) noexcept; // Current control [[nodiscard]] DriverResult&lt;void&gt; set_current_setpoint(Channel, uint16_t, bool=false) noexcept; // Diagnostics [[nodiscard]] DriverResult&lt;DeviceStatus&gt; get_device_status() noexcept; [[nodiscard]] DriverResult&lt;ChannelDiagnostics&gt; get_channel_diagnostics(Channel) noexcept; // ... more methods }; } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#class-declaration",
    
    "relUrl": "/docs/07_Driver_API/#class-declaration"
  },"150": {
    "doc": "🔧 Driver API",
    "title": "Core Types",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#core-types",
    
    "relUrl": "/docs/07_Driver_API/#core-types"
  },"151": {
    "doc": "🔧 Driver API",
    "title": "DriverError Enumeration",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 . | enum class DriverError : uint8_t { None = 0, NotInitialized, HardwareError, InvalidChannel, InvalidParameter, DeviceNotResponding, WrongDeviceID, RegisterError, CRCError, FaultDetected, ConfigurationError, TimeoutError, WrongMode, SPIFrameError, WriteToReadOnly }; . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#drivererror-enumeration",
    
    "relUrl": "/docs/07_Driver_API/#drivererror-enumeration"
  },"152": {
    "doc": "🔧 Driver API",
    "title": "DriverResult Template",
    "content": "| 1 2 3 4 5 6 . | template&lt;typename T&gt; using DriverResult = std::expected&lt;T, DriverError&gt;; // Usage: DriverResult&lt;void&gt; init(); // Returns void or error DriverResult&lt;uint16_t&gt; get_voltage(); // Returns value or error . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#driverresult-template",
    
    "relUrl": "/docs/07_Driver_API/#driverresult-template"
  },"153": {
    "doc": "🔧 Driver API",
    "title": "Channel Enumeration",
    "content": "| 1 2 3 4 5 6 7 8 9 . | enum class Channel : uint8_t { CH0 = 0, CH1 = 1, CH2 = 2, CH3 = 3, CH4 = 4, CH5 = 5, COUNT = 6 }; . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#channel-enumeration",
    
    "relUrl": "/docs/07_Driver_API/#channel-enumeration"
  },"154": {
    "doc": "🔧 Driver API",
    "title": "ChannelMode Enumeration",
    "content": "| 1 2 3 4 5 6 7 8 . | enum class ChannelMode : uint8_t { OFF = 0x0, ICC = 0x1, DIRECT_DRIVE_SPI = 0x2, DIRECT_DRIVE_DRV0 = 0x3, DIRECT_DRIVE_DRV1 = 0x4, FREE_RUN_MEAS = 0xC }; . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#channelmode-enumeration",
    
    "relUrl": "/docs/07_Driver_API/#channelmode-enumeration"
  },"155": {
    "doc": "🔧 Driver API",
    "title": "Initialization Methods",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#initialization-methods",
    
    "relUrl": "/docs/07_Driver_API/#initialization-methods"
  },"156": {
    "doc": "🔧 Driver API",
    "title": "init()",
    "content": "Initialize driver and verify device. | 1 . | DriverResult&lt;void&gt; init() noexcept; . | . Description: Performs complete initialization sequence including HAL setup, device verification, and default configuration. Returns: Success or error code . Example: . | 1 2 3 4 5 6 . | Driver driver(hal); if (auto result = driver.init(); !result) { // Handle error log(\"Init failed: %d\", static_cast&lt;int&gt;(result.error())); return; } . | . Sequence: . | Initialize HAL | Wait for power-up | Verify device ID | Apply default configuration | Clear power-on faults | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#init",
    
    "relUrl": "/docs/07_Driver_API/#init"
  },"157": {
    "doc": "🔧 Driver API",
    "title": "Mode Control Methods",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#mode-control-methods",
    
    "relUrl": "/docs/07_Driver_API/#mode-control-methods"
  },"158": {
    "doc": "🔧 Driver API",
    "title": "enter_mission_mode()",
    "content": "Transition to Mission Mode (enables channel control). | 1 . | DriverResult&lt;void&gt; enter_mission_mode() noexcept; . | . Preconditions: Driver initialized . Example: . | 1 2 . | driver.enter_mission_mode(); // Channels can now be enabled . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#enter_mission_mode",
    
    "relUrl": "/docs/07_Driver_API/#enter_mission_mode"
  },"159": {
    "doc": "🔧 Driver API",
    "title": "enter_config_mode()",
    "content": "Transition to Config Mode (allows configuration). | 1 . | DriverResult&lt;void&gt; enter_config_mode() noexcept; . | . Side Effects: All channels automatically disabled . Example: . | 1 2 3 . | driver.enter_config_mode(); // Configuration registers now writable driver.set_channel_mode(Channel::CH0, ChannelMode::ICC); . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#enter_config_mode",
    
    "relUrl": "/docs/07_Driver_API/#enter_config_mode"
  },"160": {
    "doc": "🔧 Driver API",
    "title": "Channel Control Methods",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#channel-control-methods",
    
    "relUrl": "/docs/07_Driver_API/#channel-control-methods"
  },"161": {
    "doc": "🔧 Driver API",
    "title": "enable_channel()",
    "content": "Enable or disable a channel. | 1 . | DriverResult&lt;void&gt; enable_channel(Channel channel, bool enabled) noexcept; . | . Parameters: . | channel: Channel to control | enabled: true=enable, false=disable | . Preconditions: Must be in Mission Mode . Example: . | 1 2 3 4 5 . | // Enable channel 0 driver.enable_channel(Channel::CH0, true); // Disable channel 1 driver.enable_channel(Channel::CH1, false); . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#enable_channel",
    
    "relUrl": "/docs/07_Driver_API/#enable_channel"
  },"162": {
    "doc": "🔧 Driver API",
    "title": "set_channel_mode()",
    "content": "Configure channel operation mode. | 1 . | DriverResult&lt;void&gt; set_channel_mode(Channel channel, ChannelMode mode) noexcept; . | . Preconditions: Must be in Config Mode . Example: . | 1 2 3 . | driver.enter_config_mode(); driver.set_channel_mode(Channel::CH0, ChannelMode::ICC); driver.enter_mission_mode(); . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#set_channel_mode",
    
    "relUrl": "/docs/07_Driver_API/#set_channel_mode"
  },"163": {
    "doc": "🔧 Driver API",
    "title": "set_parallel_operation()",
    "content": "Configure parallel channel operation. | 1 . | DriverResult&lt;void&gt; set_parallel_operation(ParallelPair pair, bool enabled) noexcept; . | . Parameters: . | pair: CH0_CH3, CH1_CH2, or CH4_CH5 | enabled: true=parallel, false=independent | . Preconditions: Must be in Config Mode . Example: . | 1 2 . | driver.enter_config_mode(); driver.set_parallel_operation(ParallelPair::CH0_CH3, true); . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#set_parallel_operation",
    
    "relUrl": "/docs/07_Driver_API/#set_parallel_operation"
  },"164": {
    "doc": "🔧 Driver API",
    "title": "Current Control Methods",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#current-control-methods",
    
    "relUrl": "/docs/07_Driver_API/#current-control-methods"
  },"165": {
    "doc": "🔧 Driver API",
    "title": "set_current_setpoint()",
    "content": "Set target current for a channel. | 1 2 3 4 . | DriverResult&lt;void&gt; set_current_setpoint( Channel channel, uint16_t current_ma, bool parallel_mode = false) noexcept; . | . Parameters: . | channel: Channel to configure | current_ma: Desired current in milliamperes (0-2000 single, 0-4000 parallel) | parallel_mode: true if channel is in parallel mode | . Example: . | 1 2 3 4 5 . | // Set 1.5A on single channel driver.set_current_setpoint(Channel::CH0, 1500); // Set 3.5A on parallel channels driver.set_current_setpoint(Channel::CH0, 3500, true); . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#set_current_setpoint",
    
    "relUrl": "/docs/07_Driver_API/#set_current_setpoint"
  },"166": {
    "doc": "🔧 Driver API",
    "title": "get_current_setpoint()",
    "content": "Read configured current setpoint. | 1 2 3 . | DriverResult&lt;uint16_t&gt; get_current_setpoint( Channel channel, bool parallel_mode = false) noexcept; . | . Returns: Current in mA or error . Example: . | 1 2 3 4 . | auto current = driver.get_current_setpoint(Channel::CH0); if (current) { log(\"Setpoint: %d mA\", *current); } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#get_current_setpoint",
    
    "relUrl": "/docs/07_Driver_API/#get_current_setpoint"
  },"167": {
    "doc": "🔧 Driver API",
    "title": "configure_pwm_period()",
    "content": "Configure PWM frequency for ICC. | 1 2 3 4 5 . | DriverResult&lt;void&gt; configure_pwm_period( Channel channel, uint8_t period_mantissa, uint8_t period_exponent, bool low_freq_range = false) noexcept; . | . Example: . | 1 2 . | // Configure for ~5kHz PWM driver.configure_pwm_period(Channel::CH0, 100, 4, false); . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#configure_pwm_period",
    
    "relUrl": "/docs/07_Driver_API/#configure_pwm_period"
  },"168": {
    "doc": "🔧 Driver API",
    "title": "configure_dither()",
    "content": "Configure current dither parameters. | 1 2 3 4 5 . | DriverResult&lt;void&gt; configure_dither( Channel channel, uint16_t step_size, uint8_t num_steps, uint8_t flat_steps) noexcept; . | . Example: . | 1 2 . | // Add 200mA dither amplitude driver.configure_dither(Channel::CH0, 100, 20, 5); . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#configure_dither",
    
    "relUrl": "/docs/07_Driver_API/#configure_dither"
  },"169": {
    "doc": "🔧 Driver API",
    "title": "Diagnostics Methods",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#diagnostics-methods",
    
    "relUrl": "/docs/07_Driver_API/#diagnostics-methods"
  },"170": {
    "doc": "🔧 Driver API",
    "title": "get_device_status()",
    "content": "Read global device status. | 1 . | DriverResult&lt;DeviceStatus&gt; get_device_status() noexcept; . | . Returns: DeviceStatus structure or error . Example: . | 1 2 3 4 5 6 7 8 9 . | auto status = driver.get_device_status(); if (status) { if (status-&gt;any_fault) { log(\"Fault detected!\"); } if (status-&gt;ot_warning) { log(\"Over-temperature warning\"); } } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#get_device_status",
    
    "relUrl": "/docs/07_Driver_API/#get_device_status"
  },"171": {
    "doc": "🔧 Driver API",
    "title": "get_channel_diagnostics()",
    "content": "Read channel diagnostic information. | 1 . | DriverResult&lt;ChannelDiagnostics&gt; get_channel_diagnostics(Channel channel) noexcept; . | . Returns: ChannelDiagnostics structure or error . Example: . | 1 2 3 4 5 6 7 . | auto diag = driver.get_channel_diagnostics(Channel::CH0); if (diag) { if (diag-&gt;overcurrent) { log(\"OC fault on CH0\"); } log(\"Current: %d mA\", diag-&gt;average_current); } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#get_channel_diagnostics",
    
    "relUrl": "/docs/07_Driver_API/#get_channel_diagnostics"
  },"172": {
    "doc": "🔧 Driver API",
    "title": "get_average_current()",
    "content": "Read measured average current. | 1 2 3 . | DriverResult&lt;uint16_t&gt; get_average_current( Channel channel, bool parallel_mode = false) noexcept; . | . Returns: Current in mA or error . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#get_average_current",
    
    "relUrl": "/docs/07_Driver_API/#get_average_current"
  },"173": {
    "doc": "🔧 Driver API",
    "title": "clear_faults()",
    "content": "Clear all latched fault flags. | 1 . | DriverResult&lt;void&gt; clear_faults() noexcept; . | . Example: . | 1 . | driver.clear_faults(); . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#clear_faults",
    
    "relUrl": "/docs/07_Driver_API/#clear_faults"
  },"174": {
    "doc": "🔧 Driver API",
    "title": "Configuration Methods",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#configuration-methods",
    
    "relUrl": "/docs/07_Driver_API/#configuration-methods"
  },"175": {
    "doc": "🔧 Driver API",
    "title": "configure_global()",
    "content": "Apply global configuration. | 1 . | DriverResult&lt;void&gt; configure_global(const GlobalConfig&amp; config) noexcept; . | . Preconditions: Must be in Config Mode . Example: . | 1 2 3 4 5 6 . | GlobalConfig config{ .crc_enabled = true, .spi_watchdog_enabled = true, .vio_5v = false }; driver.configure_global(config); . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#configure_global",
    
    "relUrl": "/docs/07_Driver_API/#configure_global"
  },"176": {
    "doc": "🔧 Driver API",
    "title": "configure_channel()",
    "content": "Apply complete channel configuration. | 1 2 3 . | DriverResult&lt;void&gt; configure_channel( Channel channel, const ChannelConfig&amp; config) noexcept; . | . Example: . | 1 2 3 4 5 6 . | ChannelConfig config{ .mode = ChannelMode::ICC, .current_setpoint_ma = 1500, .slew_rate = SlewRate::MEDIUM_2V5_US }; driver.configure_channel(Channel::CH0, config); . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#configure_channel",
    
    "relUrl": "/docs/07_Driver_API/#configure_channel"
  },"177": {
    "doc": "🔧 Driver API",
    "title": "Watchdog Methods",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#watchdog-methods",
    
    "relUrl": "/docs/07_Driver_API/#watchdog-methods"
  },"178": {
    "doc": "🔧 Driver API",
    "title": "reload_spi_watchdog()",
    "content": "Reload SPI watchdog counter. | 1 . | DriverResult&lt;void&gt; reload_spi_watchdog(uint16_t reload_value) noexcept; . | . Usage: Call periodically when SPI watchdog enabled . Example: . | 1 2 3 4 5 6 . | // In main loop while (running) { driver.reload_spi_watchdog(1000); // ... operations delay(50ms); } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#reload_spi_watchdog",
    
    "relUrl": "/docs/07_Driver_API/#reload_spi_watchdog"
  },"179": {
    "doc": "🔧 Driver API",
    "title": "Register Access Methods",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#register-access-methods",
    
    "relUrl": "/docs/07_Driver_API/#register-access-methods"
  },"180": {
    "doc": "🔧 Driver API",
    "title": "read_register()",
    "content": "Read 16-bit register with CRC. | 1 2 3 . | DriverResult&lt;uint16_t&gt; read_register( uint16_t address, bool verify_crc = true) noexcept; . | . Example: . | 1 . | auto value = driver.read_register(0x0003); // GLOBAL_DIAG0 . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#read_register",
    
    "relUrl": "/docs/07_Driver_API/#read_register"
  },"181": {
    "doc": "🔧 Driver API",
    "title": "write_register()",
    "content": "Write 16-bit register with CRC. | 1 2 3 4 . | DriverResult&lt;void&gt; write_register( uint16_t address, uint16_t value, bool verify_crc = true) noexcept; . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#write_register",
    
    "relUrl": "/docs/07_Driver_API/#write_register"
  },"182": {
    "doc": "🔧 Driver API",
    "title": "modify_register()",
    "content": "Read-modify-write register bits. | 1 2 3 4 . | DriverResult&lt;void&gt; modify_register( uint16_t address, uint16_t mask, uint16_t value) noexcept; . | . Example: . | 1 2 . | // Set bit 0, clear bit 1 driver.modify_register(0x0000, 0x0003, 0x0001); . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#modify_register",
    
    "relUrl": "/docs/07_Driver_API/#modify_register"
  },"183": {
    "doc": "🔧 Driver API",
    "title": "Error Handling",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#error-handling",
    
    "relUrl": "/docs/07_Driver_API/#error-handling"
  },"184": {
    "doc": "🔧 Driver API",
    "title": "Using std::expected",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 . | // Check for error auto result = driver.init(); if (!result) { DriverError error = result.error(); handle_error(error); return; } // Get value auto current = driver.get_average_current(Channel::CH0); if (current) { uint16_t value = *current; log(\"Current: %d mA\", value); } else { log(\"Error: %d\", static_cast&lt;int&gt;(current.error())); } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#using-stdexpected",
    
    "relUrl": "/docs/07_Driver_API/#using-stdexpected"
  },"185": {
    "doc": "🔧 Driver API",
    "title": "Error Mapping",
    "content": "| 1 2 3 4 5 6 7 8 . | const char* error_to_string(DriverError err) { switch (err) { case DriverError::None: return \"No error\"; case DriverError::NotInitialized: return \"Not initialized\"; case DriverError::HardwareError: return \"Hardware error\"; // ... etc } } . | . | Navigation: ← Diagnostics | Next: HAL Implementation → | . ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/#error-mapping",
    
    "relUrl": "/docs/07_Driver_API/#error-mapping"
  },"186": {
    "doc": "🔧 Driver API",
    "title": "🔧 Driver API",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/07_Driver_API/",
    
    "relUrl": "/docs/07_Driver_API/"
  },"187": {
    "doc": "🔌 HAL Implementation",
    "title": "HAL Implementation Guide",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#hal-implementation-guide",
    
    "relUrl": "/docs/08_HAL_Implementation/#hal-implementation-guide"
  },"188": {
    "doc": "🔌 HAL Implementation",
    "title": "Overview",
    "content": "The Hardware Abstraction Layer (HAL) provides platform-independent SPI communication for the TLE92466ED driver. You must implement this interface for your specific hardware platform. ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#overview",
    
    "relUrl": "/docs/08_HAL_Implementation/#overview"
  },"189": {
    "doc": "🔌 HAL Implementation",
    "title": "HAL Architecture",
    "content": "text Application Code │ ▼ TLE92466ED::Driver ◄──── High-level API │ ▼ TLE92466ED::HAL ◄──────── Abstract interface (YOU IMPLEMENT) │ ▼ Platform SPI ◄──────────── Your hardware (STM32, ESP32, etc.) text . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#hal-architecture",
    
    "relUrl": "/docs/08_HAL_Implementation/#hal-architecture"
  },"190": {
    "doc": "🔌 HAL Implementation",
    "title": "HAL Interface",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#hal-interface",
    
    "relUrl": "/docs/08_HAL_Implementation/#hal-interface"
  },"191": {
    "doc": "🔌 HAL Implementation",
    "title": "Base Class",
    "content": "```cpp class HAL { public: virtual ~HAL() = default; . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 . | // Core methods (must implement) [[nodiscard]] virtual HALResult&lt;void&gt; init() noexcept = 0; [[nodiscard]] virtual HALResult&lt;void&gt; deinit() noexcept = 0; [[nodiscard]] virtual HALResult&lt;uint32_t&gt; transfer32(uint32_t tx_data) noexcept = 0; [[nodiscard]] virtual HALResult&lt;void&gt; transfer_multi( std::span&lt;const uint32_t&gt; tx_data, std::span&lt;uint32_t&gt; rx_data) noexcept = 0; [[nodiscard]] virtual HALResult&lt;void&gt; chip_select() noexcept = 0; [[nodiscard]] virtual HALResult&lt;void&gt; chip_deselect() noexcept = 0; [[nodiscard]] virtual HALResult&lt;void&gt; delay(uint32_t microseconds) noexcept = 0; [[nodiscard]] virtual HALResult&lt;void&gt; configure(const SPIConfig&amp; config) noexcept = 0; [[nodiscard]] virtual bool is_ready() const noexcept = 0; [[nodiscard]] virtual HALError get_last_error() const noexcept = 0; [[nodiscard]] virtual HALResult&lt;void&gt; clear_errors() noexcept = 0; }; ```text . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#base-class",
    
    "relUrl": "/docs/08_HAL_Implementation/#base-class"
  },"192": {
    "doc": "🔌 HAL Implementation",
    "title": "HALError Enumeration",
    "content": "cpp enum class HALError : uint8_t { None = 0, BusError, Timeout, InvalidParameter, ChipselectError, TransferError, HardwareNotReady, BufferOverflow, CRCError, UnknownError }; text . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#halerror-enumeration",
    
    "relUrl": "/docs/08_HAL_Implementation/#halerror-enumeration"
  },"193": {
    "doc": "🔌 HAL Implementation",
    "title": "HALResult Type",
    "content": "cpp template&lt;typename T&gt; using HALResult = std::expected&lt;T, HALError&gt;; text . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#halresult-type",
    
    "relUrl": "/docs/08_HAL_Implementation/#halresult-type"
  },"194": {
    "doc": "🔌 HAL Implementation",
    "title": "Platform Implementation Examples",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#platform-implementation-examples",
    
    "relUrl": "/docs/08_HAL_Implementation/#platform-implementation-examples"
  },"195": {
    "doc": "🔌 HAL Implementation",
    "title": "STM32 HAL Implementation",
    "content": "```cpp class STM32HAL : public TLE92466ED::HAL { public: STM32_HAL(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_port, uint16_t cs_pin) : hspi(hspi), cs_port_(cs_port), cs_pin_(cs_pin), initialized_(false) {} . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 . | HALResult&lt;void&gt; init() noexcept override { // SPI already initialized by CubeMX // Configure CS pin as output HAL_GPIO_WritePin(cs_port_, cs_pin_, GPIO_PIN_SET); initialized_ = true; return {}; } HALResult&lt;uint32_t&gt; transfer32(uint32_t tx_data) noexcept override { if (!initialized_) { return std::unexpected(HALError::HardwareNotReady); } // Convert to bytes (MSB first) uint8_t tx_bytes[4] = { static_cast&lt;uint8_t&gt;((tx_data &gt;&gt; 24) &amp; 0xFF), static_cast&lt;uint8_t&gt;((tx_data &gt;&gt; 16) &amp; 0xFF), static_cast&lt;uint8_t&gt;((tx_data &gt;&gt; 8) &amp; 0xFF), static_cast&lt;uint8_t&gt;(tx_data &amp; 0xFF) }; uint8_t rx_bytes[4] = {0}; // Chip select HAL_GPIO_WritePin(cs_port_, cs_pin_, GPIO_PIN_RESET); // Transfer HAL_StatusTypeDef status = HAL_SPI_TransmitReceive( hspi_, tx_bytes, rx_bytes, 4, 100); // Chip deselect HAL_GPIO_WritePin(cs_port_, cs_pin_, GPIO_PIN_SET); if (status != HAL_OK) { return std::unexpected(HALError::TransferError); } // Convert back to uint32_t uint32_t rx_data = (static_cast&lt;uint32_t&gt;(rx_bytes[0]) &lt;&lt; 24) | (static_cast&lt;uint32_t&gt;(rx_bytes[1]) &lt;&lt; 16) | (static_cast&lt;uint32_t&gt;(rx_bytes[2]) &lt;&lt; 8) | static_cast&lt;uint32_t&gt;(rx_bytes[3]); return rx_data; } HALResult&lt;void&gt; chip_select() noexcept override { HAL_GPIO_WritePin(cs_port_, cs_pin_, GPIO_PIN_RESET); return {}; } HALResult&lt;void&gt; chip_deselect() noexcept override { HAL_GPIO_WritePin(cs_port_, cs_pin_, GPIO_PIN_SET); return {}; } HALResult&lt;void&gt; delay(uint32_t microseconds) noexcept override { // Use DWT cycle counter for precise microsecond delays uint32_t start = DWT-&gt;CYCCNT; uint32_t cycles = (SystemCoreClock / 1000000) * microseconds; while ((DWT-&gt;CYCCNT - start) &lt; cycles); return {}; } bool is_ready() const noexcept override { return initialized_; } // ... implement other methods . | . private: SPI_HandleTypeDef* hspi_; GPIO_TypeDef* cs_port_; uint16t cs_pin; bool initialized_; }; ```text . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#stm32-hal-implementation",
    
    "relUrl": "/docs/08_HAL_Implementation/#stm32-hal-implementation"
  },"196": {
    "doc": "🔌 HAL Implementation",
    "title": "ESP32 Implementation",
    "content": "```cpp class ESP32HAL : public TLE92466ED::HAL { public: ESP32_HAL(spi_host_device_t spi_host, int cs_pin) : spi_host(spi_host), cs_pin_(cs_pin), spi_device_(nullptr) {} . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 . | HALResult&lt;void&gt; init() noexcept override { // Configure CS pin gpio_config_t io_conf = { .pin_bit_mask = (1ULL &lt;&lt; cs_pin_), .mode = GPIO_MODE_OUTPUT, .pull_up_en = GPIO_PULLUP_DISABLE, .pull_down_en = GPIO_PULLDOWN_DISABLE, .intr_type = GPIO_INTR_DISABLE }; gpio_config(&amp;io_conf); gpio_set_level(static_cast&lt;gpio_num_t&gt;(cs_pin_), 1); // Configure SPI device spi_device_interface_config_t dev_cfg = { .mode = 0, // SPI mode 0 .clock_speed_hz = 1000000, // 1 MHz .spics_io_num = -1, // Manual CS .queue_size = 1 }; esp_err_t ret = spi_bus_add_device(spi_host_, &amp;dev_cfg, &amp;spi_device_); if (ret != ESP_OK) { return std::unexpected(HALError::HardwareNotReady); } return {}; } HALResult&lt;uint32_t&gt; transfer32(uint32_t tx_data) noexcept override { spi_transaction_t trans = { .length = 32, // bits .tx_data = { static_cast&lt;uint8_t&gt;((tx_data &gt;&gt; 24) &amp; 0xFF), static_cast&lt;uint8_t&gt;((tx_data &gt;&gt; 16) &amp; 0xFF), static_cast&lt;uint8_t&gt;((tx_data &gt;&gt; 8) &amp; 0xFF), static_cast&lt;uint8_t&gt;(tx_data &amp; 0xFF) } }; gpio_set_level(static_cast&lt;gpio_num_t&gt;(cs_pin_), 0); esp_err_t ret = spi_device_transmit(spi_device_, &amp;trans); gpio_set_level(static_cast&lt;gpio_num_t&gt;(cs_pin_), 1); if (ret != ESP_OK) { return std::unexpected(HALError::TransferError); } uint32_t rx_data = (static_cast&lt;uint32_t&gt;(trans.rx_data[0]) &lt;&lt; 24) | (static_cast&lt;uint32_t&gt;(trans.rx_data[1]) &lt;&lt; 16) | (static_cast&lt;uint32_t&gt;(trans.rx_data[2]) &lt;&lt; 8) | static_cast&lt;uint32_t&gt;(trans.rx_data[3]); return rx_data; } HALResult&lt;void&gt; delay(uint32_t microseconds) noexcept override { esp_rom_delay_us(microseconds); return {}; } // ... implement other methods . | . private: spi_host_device_t spi_host_; int cs_pin_; spi_device_handle_t spi_device_; }; ```text . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#esp32-implementation",
    
    "relUrl": "/docs/08_HAL_Implementation/#esp32-implementation"
  },"197": {
    "doc": "🔌 HAL Implementation",
    "title": "Linux SPI Implementation",
    "content": "```cpp class LinuxSPI_HAL : public TLE92466ED::HAL { public: LinuxSPI_HAL(const char* device, int cs_gpio) : device_path_(device), cs_gpio_(cs_gpio), spi_fd_(-1) {} . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 . | HALResult&lt;void&gt; init() noexcept override { // Open SPI device spi_fd_ = open(device_path_, O_RDWR); if (spi_fd_ &lt; 0) { return std::unexpected(HALError::HardwareNotReady); } // Configure SPI mode uint8_t mode = SPI_MODE_0; if (ioctl(spi_fd_, SPI_IOC_WR_MODE, &amp;mode) &lt; 0) { close(spi_fd_); return std::unexpected(HALError::HardwareNotReady); } // Configure speed uint32_t speed = 1000000; // 1 MHz if (ioctl(spi_fd_, SPI_IOC_WR_MAX_SPEED_HZ, &amp;speed) &lt; 0) { close(spi_fd_); return std::unexpected(HALError::HardwareNotReady); } // Export and configure CS GPIO export_gpio(cs_gpio_); set_gpio_direction(cs_gpio_, \"out\"); set_gpio_value(cs_gpio_, 1); return {}; } HALResult&lt;uint32_t&gt; transfer32(uint32_t tx_data) noexcept override { uint8_t tx_bytes[4] = { static_cast&lt;uint8_t&gt;((tx_data &gt;&gt; 24) &amp; 0xFF), static_cast&lt;uint8_t&gt;((tx_data &gt;&gt; 16) &amp; 0xFF), static_cast&lt;uint8_t&gt;((tx_data &gt;&gt; 8) &amp; 0xFF), static_cast&lt;uint8_t&gt;(tx_data &amp; 0xFF) }; uint8_t rx_bytes[4] = {0}; struct spi_ioc_transfer transfer = { .tx_buf = reinterpret_cast&lt;uint64_t&gt;(tx_bytes), .rx_buf = reinterpret_cast&lt;uint64_t&gt;(rx_bytes), .len = 4, .speed_hz = 1000000, .bits_per_word = 8 }; set_gpio_value(cs_gpio_, 0); int ret = ioctl(spi_fd_, SPI_IOC_MESSAGE(1), &amp;transfer); set_gpio_value(cs_gpio_, 1); if (ret &lt; 0) { return std::unexpected(HALError::TransferError); } uint32_t rx_data = (static_cast&lt;uint32_t&gt;(rx_bytes[0]) &lt;&lt; 24) | (static_cast&lt;uint32_t&gt;(rx_bytes[1]) &lt;&lt; 16) | (static_cast&lt;uint32_t&gt;(rx_bytes[2]) &lt;&lt; 8) | static_cast&lt;uint32_t&gt;(rx_bytes[3]); return rx_data; } // ... implement other methods . | . private: const char* device_path_; int cs_gpio_; int spi_fd_; . | 1 2 3 . | void export_gpio(int gpio); void set_gpio_direction(int gpio, const char* dir); void set_gpio_value(int gpio, int value); }; ```text . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#linux-spi-implementation",
    
    "relUrl": "/docs/08_HAL_Implementation/#linux-spi-implementation"
  },"198": {
    "doc": "🔌 HAL Implementation",
    "title": "Implementation Checklist",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#implementation-checklist",
    
    "relUrl": "/docs/08_HAL_Implementation/#implementation-checklist"
  },"199": {
    "doc": "🔌 HAL Implementation",
    "title": "Required Methods",
    "content": ". | init() - Initialize SPI peripheral and GPIO | deinit() - Clean up resources | transfer32() - Critical: 32-bit full-duplex transfer | transfer_multi() - Multiple transfers (can call transfer32 in loop) | chip_select() - Assert CS (low) | chip_deselect() - Deassert CS (high) | delay() - Microsecond delay | configure() - Update SPI settings | is_ready() - Check initialization status | get_last_error() - Return last error | clear_errors() - Reset error state | . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#required-methods",
    
    "relUrl": "/docs/08_HAL_Implementation/#required-methods"
  },"200": {
    "doc": "🔌 HAL Implementation",
    "title": "SPI Requirements",
    "content": "text Parameter Requirement ─────────────────── ───────────────────────── Mode 0 (CPOL=0, CPHA=0) Frequency 100 kHz - 10 MHz Bit Order MSB first Frame Size 32 bits (4 bytes) CS Polarity Active low Full-Duplex Yes text . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#spi-requirements",
    
    "relUrl": "/docs/08_HAL_Implementation/#spi-requirements"
  },"201": {
    "doc": "🔌 HAL Implementation",
    "title": "Timing Requirements",
    "content": "text Parameter Min Max Unit ───────────────── ─────── ─────── ───── CS Setup Time 50 - ns CS Hold Time 50 - ns CS Inactive Time 100 - ns Data Setup Time 20 - ns Data Hold Time 20 - ns text . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#timing-requirements",
    
    "relUrl": "/docs/08_HAL_Implementation/#timing-requirements"
  },"202": {
    "doc": "🔌 HAL Implementation",
    "title": "Testing Your HAL",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#testing-your-hal",
    
    "relUrl": "/docs/08_HAL_Implementation/#testing-your-hal"
  },"203": {
    "doc": "🔌 HAL Implementation",
    "title": "Basic Test",
    "content": "```cpp // Create your HAL MyPlatformHAL hal; . // Test initialization auto init_result = hal.init(); assert(init_result.has_value()); assert(hal.is_ready()); . // Test chip select auto cs_result = hal.chip_select(); assert(cs_result.has_value()); . auto ds_result = hal.chip_deselect(); assert(ds_result.has_value()); . // Test transfer (loopback if available) uint32_t test_data = 0x12345678; auto transfer_result = hal.transfer32(test_data); assert(transfer_result.has_value()); . // Test delay auto delay_result = hal.delay(100); assert(delay_result.has_value()); ```text . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#basic-test",
    
    "relUrl": "/docs/08_HAL_Implementation/#basic-test"
  },"204": {
    "doc": "🔌 HAL Implementation",
    "title": "Integration Test",
    "content": "```cpp // Create driver with your HAL MyPlatformHAL hal; TLE92466ED::Driver driver(hal); . // Test full initialization auto result = driver.init(); if (!result) { log(“Init failed: %d”, static_cast(result.error())); return; } . // Read device ID auto id_result = driver.get_ic_version(); if (id_result) { log(“Device ID: 0x%04X”, *id_result); } . // Test register access auto reg_result = driver.read_register(0x0003); if (reg_result) { log(“GLOBAL_DIAG0: 0x%04X”, *reg_result); } ```text . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#integration-test",
    
    "relUrl": "/docs/08_HAL_Implementation/#integration-test"
  },"205": {
    "doc": "🔌 HAL Implementation",
    "title": "Common Pitfalls",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#common-pitfalls",
    
    "relUrl": "/docs/08_HAL_Implementation/#common-pitfalls"
  },"206": {
    "doc": "🔌 HAL Implementation",
    "title": "1. Byte Order",
    "content": "Problem: Data appears scrambled . Solution: Ensure MSB-first transmission cpp // Correct: MSB first tx_bytes[0] = (data &gt;&gt; 24) &amp; 0xFF; // MSB tx_bytes[1] = (data &gt;&gt; 16) &amp; 0xFF; tx_bytes[2] = (data &gt;&gt; 8) &amp; 0xFF; tx_bytes[3] = data &amp; 0xFF; // LSB text . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#1-byte-order",
    
    "relUrl": "/docs/08_HAL_Implementation/#1-byte-order"
  },"207": {
    "doc": "🔌 HAL Implementation",
    "title": "2. CS Timing",
    "content": "Problem: Communication errors . Solution: Ensure proper CS timing cpp // Correct sequence gpio_set(CS, LOW); delay_ns(50); // CS setup time spi_transfer(...); delay_ns(50); // CS hold time gpio_set(CS, HIGH); delay_ns(100); // CS inactive time text . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#2-cs-timing",
    
    "relUrl": "/docs/08_HAL_Implementation/#2-cs-timing"
  },"208": {
    "doc": "🔌 HAL Implementation",
    "title": "3. SPI Mode",
    "content": "Problem: No response from device . Solution: Verify SPI Mode 0 (CPOL=0, CPHA=0) cpp // Ensure: // - Clock idle state: LOW // - Data sampled on: RISING edge // - Data shifted on: FALLING edge text . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#3-spi-mode",
    
    "relUrl": "/docs/08_HAL_Implementation/#3-spi-mode"
  },"209": {
    "doc": "🔌 HAL Implementation",
    "title": "4. Exception Safety",
    "content": "Problem: Exceptions thrown in noexcept functions . Solution: Catch all exceptions and return errors cpp HALResult&lt;uint32_t&gt; transfer32(uint32_t data) noexcept override { try { // ... SPI operations return result; } catch (...) { return std::unexpected(HALError::TransferError); } } text . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#4-exception-safety",
    
    "relUrl": "/docs/08_HAL_Implementation/#4-exception-safety"
  },"210": {
    "doc": "🔌 HAL Implementation",
    "title": "Platform-Specific Notes",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#platform-specific-notes",
    
    "relUrl": "/docs/08_HAL_Implementation/#platform-specific-notes"
  },"211": {
    "doc": "🔌 HAL Implementation",
    "title": "STM32",
    "content": ". | Use DMA for better performance | Enable DWT cycle counter for precise delays | Consider using HAL timeout values | . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#stm32",
    
    "relUrl": "/docs/08_HAL_Implementation/#stm32"
  },"212": {
    "doc": "🔌 HAL Implementation",
    "title": "ESP32",
    "content": ". | Use dedicated SPI host (HSPI or VSPI) | FreeRTOS delays acceptable for ms-range | Use esp_rom_delay_us for µs precision | . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#esp32",
    
    "relUrl": "/docs/08_HAL_Implementation/#esp32"
  },"213": {
    "doc": "🔌 HAL Implementation",
    "title": "Arduino",
    "content": ". | Use SPI.beginTransaction() for settings | SPI.transfer() for byte-by-byte | delayMicroseconds() for timing | . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#arduino",
    
    "relUrl": "/docs/08_HAL_Implementation/#arduino"
  },"214": {
    "doc": "🔌 HAL Implementation",
    "title": "Linux",
    "content": ". | Use spidev for user-space access | ioctl() for configuration | GPIO sysfs or libgpiod for CS | . | Navigation: ← Driver API | Next: Usage Examples → | . ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/#linux",
    
    "relUrl": "/docs/08_HAL_Implementation/#linux"
  },"215": {
    "doc": "🔌 HAL Implementation",
    "title": "🔌 HAL Implementation",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/",
    
    "relUrl": "/docs/08_HAL_Implementation/"
  },"216": {
    "doc": "💻 Usage Examples",
    "title": "Usage Examples",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#usage-examples",
    
    "relUrl": "/docs/09_Usage_Examples/#usage-examples"
  },"217": {
    "doc": "💻 Usage Examples",
    "title": "Complete Application Examples",
    "content": "This document provides practical, ready-to-use code examples for common TLE92466ED applications. ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#complete-application-examples",
    
    "relUrl": "/docs/09_Usage_Examples/#complete-application-examples"
  },"218": {
    "doc": "💻 Usage Examples",
    "title": "Example 1: Basic Current Control",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#example-1-basic-current-control",
    
    "relUrl": "/docs/09_Usage_Examples/#example-1-basic-current-control"
  },"219": {
    "doc": "💻 Usage Examples",
    "title": "Single Channel ICC Mode",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 . | #include \"TLE92466ED.hpp\" #include \"my_platform_hal.hpp\" using namespace TLE92466ED; int main() { // 1. Create HAL and driver MyPlatformHAL hal; Driver driver(hal); // 2. Initialize if (auto result = driver.init(); !result) { error(\"Init failed\"); return -1; } // 3. Configure channel (in Config Mode by default) driver.set_channel_mode(Channel::CH0, ChannelMode::ICC); driver.set_current_setpoint(Channel::CH0, 1500); // 1.5A // 4. Enter Mission Mode driver.enter_mission_mode(); // 5. Enable channel driver.enable_channel(Channel::CH0, true); // 6. Monitor while (running) { auto current = driver.get_average_current(Channel::CH0); if (current) { log(\"Current: %d mA\", *current); } delay(100ms); } // 7. Cleanup driver.disable_all_channels(); return 0; } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#single-channel-icc-mode",
    
    "relUrl": "/docs/09_Usage_Examples/#single-channel-icc-mode"
  },"220": {
    "doc": "💻 Usage Examples",
    "title": "Example 2: Parallel Operation (High Current)",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#example-2-parallel-operation-high-current",
    
    "relUrl": "/docs/09_Usage_Examples/#example-2-parallel-operation-high-current"
  },"221": {
    "doc": "💻 Usage Examples",
    "title": "4A Solenoid Control",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 . | void configure_high_current_solenoid() { Driver driver(hal); driver.init(); // Enter Config Mode driver.enter_config_mode(); // Enable parallel operation CH0+CH3 driver.set_parallel_operation(ParallelPair::CH0_CH3, true); // Configure both channels identically ChannelConfig config{ .mode = ChannelMode::ICC, .current_setpoint_ma = 3500, // 3.5A total .slew_rate = SlewRate::MEDIUM_2V5_US, .open_load_threshold = 4 // 4/8 = 50% }; driver.configure_channel(Channel::CH0, config); driver.configure_channel(Channel::CH3, config); // Enter Mission Mode and enable driver.enter_mission_mode(); driver.enable_channel(Channel::CH0, true); driver.enable_channel(Channel::CH3, true); log(\"High-current mode active: 3.5A\"); } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#4a-solenoid-control",
    
    "relUrl": "/docs/09_Usage_Examples/#4a-solenoid-control"
  },"222": {
    "doc": "💻 Usage Examples",
    "title": "Example 3: Proportional Valve with Dither",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#example-3-proportional-valve-with-dither",
    
    "relUrl": "/docs/09_Usage_Examples/#example-3-proportional-valve-with-dither"
  },"223": {
    "doc": "💻 Usage Examples",
    "title": "Precision Position Control",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 . | class ProportionalValveController { public: ProportionalValveController(Driver&amp; driver, Channel channel) : driver_(driver), channel_(channel) {} void init() { driver_.enter_config_mode(); // Configure ICC mode driver_.set_channel_mode(channel_, ChannelMode::ICC); // Configure dither for smooth positioning // 100mA amplitude, 50Hz frequency driver_.configure_dither(channel_, 200, // step_size (gives ~100mA amplitude) 25, // num_steps 10); // flat_steps // Set initial position (50% = 1000mA) driver_.set_current_setpoint(channel_, 1000); driver_.enter_mission_mode(); driver_.enable_channel(channel_, true); } void set_position(float percent) { // Convert 0-100% to 0-2000mA uint16_t current = static_cast&lt;uint16_t&gt;(percent * 20.0f); driver_.set_current_setpoint(channel_, current); } float get_actual_position() { auto current = driver_.get_average_current(channel_); if (!current) return -1.0f; return *current / 20.0f; // Convert to % } private: Driver&amp; driver_; Channel channel_; }; // Usage int main() { MyPlatformHAL hal; Driver driver(hal); driver.init(); ProportionalValveController valve(driver, Channel::CH0); valve.init(); // Ramp to 75% position for (float pos = 0.0f; pos &lt;= 75.0f; pos += 1.0f) { valve.set_position(pos); delay(10ms); } // Monitor position float actual = valve.get_actual_position(); log(\"Position: %.1f%%\", actual); } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#precision-position-control",
    
    "relUrl": "/docs/09_Usage_Examples/#precision-position-control"
  },"224": {
    "doc": "💻 Usage Examples",
    "title": "Example 4: Multi-Channel Solenoid Array",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#example-4-multi-channel-solenoid-array",
    
    "relUrl": "/docs/09_Usage_Examples/#example-4-multi-channel-solenoid-array"
  },"225": {
    "doc": "💻 Usage Examples",
    "title": "Valve Bank Control",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 . | class SolenoidArray { public: SolenoidArray(Driver&amp; driver) : driver_(driver) {} void init() { driver_.enter_config_mode(); // Configure all 6 channels for (int i = 0; i &lt; 6; i++) { Channel ch = static_cast&lt;Channel&gt;(i); driver_.set_channel_mode(ch, ChannelMode::ICC); ChannelConfig config{ .mode = ChannelMode::ICC, .current_setpoint_ma = 1200, // 1.2A per solenoid .slew_rate = SlewRate::FAST_5V0_US, .open_load_threshold = 3 }; driver_.configure_channel(ch, config); } driver_.enter_mission_mode(); } void activate_pattern(uint8_t pattern) { // Pattern is 6-bit mask for channels for (int i = 0; i &lt; 6; i++) { bool enable = (pattern &amp; (1 &lt;&lt; i)) != 0; driver_.enable_channel(static_cast&lt;Channel&gt;(i), enable); } } void sequence_test() { // Test each channel sequentially for (int i = 0; i &lt; 6; i++) { log(\"Testing channel %d\", i); activate_pattern(1 &lt;&lt; i); delay(500ms); auto diag = driver_.get_channel_diagnostics(static_cast&lt;Channel&gt;(i)); if (diag) { if (diag-&gt;overcurrent) log(\" OC fault!\"); if (diag-&gt;open_load) log(\" Open load!\"); log(\" Current: %d mA\", diag-&gt;average_current); } } activate_pattern(0); // All off } private: Driver&amp; driver_; }; // Usage int main() { MyPlatformHAL hal; Driver driver(hal); driver.init(); SolenoidArray array(driver); array.init(); // Run sequence test array.sequence_test(); // Activate specific pattern array.activate_pattern(0b00101010); // CH1, CH3, CH5 } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#valve-bank-control",
    
    "relUrl": "/docs/09_Usage_Examples/#valve-bank-control"
  },"226": {
    "doc": "💻 Usage Examples",
    "title": "Example 5: Fault-Tolerant Operation",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#example-5-fault-tolerant-operation",
    
    "relUrl": "/docs/09_Usage_Examples/#example-5-fault-tolerant-operation"
  },"227": {
    "doc": "💻 Usage Examples",
    "title": "Robust Error Handling",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 . | class FaultTolerantDriver { public: FaultTolerantDriver(Driver&amp; driver) : driver_(driver), fault_count_(0) {} bool init_with_retry(int max_retries = 3) { for (int attempt = 1; attempt &lt;= max_retries; attempt++) { log(\"Init attempt %d/%d\", attempt, max_retries); if (auto result = driver_.init(); result) { log(\"Init successful\"); start_monitoring(); return true; } else { log(\"Init failed: %d\", static_cast&lt;int&gt;(result.error())); delay(1s); } } log(\"Init failed after %d attempts\", max_retries); return false; } void monitor_and_recover() { auto status = driver_.get_device_status(); if (!status) return; // Check for critical faults if (status-&gt;ot_error) { handle_overtemperature(); } if (status-&gt;vbat_uv || status-&gt;vbat_ov) { handle_supply_fault(); } // Check each channel for (int i = 0; i &lt; 6; i++) { Channel ch = static_cast&lt;Channel&gt;(i); auto diag = driver_.get_channel_diagnostics(ch); if (diag) { if (diag-&gt;overcurrent) { handle_overcurrent(ch); } if (diag-&gt;short_to_ground) { handle_short_circuit(ch); } if (diag-&gt;open_load) { handle_open_load(ch); } } } } private: Driver&amp; driver_; int fault_count_; void handle_overtemperature() { log(\"Over-temperature detected\"); // Reduce all currents by 50% for (int i = 0; i &lt; 6; i++) { Channel ch = static_cast&lt;Channel&gt;(i); auto current = driver_.get_current_setpoint(ch); if (current) { driver_.set_current_setpoint(ch, *current / 2); } } // Clear fault after cooling delay(10s); driver_.clear_faults(); } void handle_overcurrent(Channel ch) { log(\"Over-current on channel %d\", static_cast&lt;int&gt;(ch)); // Disable channel driver_.enable_channel(ch, false); // Reduce setpoint auto current = driver_.get_current_setpoint(ch); if (current &amp;&amp; *current &gt; 500) { uint16_t new_current = *current - 200; // Reduce by 200mA driver_.set_current_setpoint(ch, new_current); } // Clear fault and retry delay(100ms); driver_.clear_faults(); driver_.enable_channel(ch, true); } void handle_short_circuit(Channel ch) { log(\"Short circuit on channel %d\", static_cast&lt;int&gt;(ch)); // Permanent disable driver_.enable_channel(ch, false); fault_count_++; if (fault_count_ &gt; 3) { log(\"Too many faults, entering safe mode\"); driver_.disable_all_channels(); } } void handle_open_load(Channel ch) { log(\"Open load on channel %d\", static_cast&lt;int&gt;(ch)); // Check if transient delay(50ms); auto diag = driver_.get_channel_diagnostics(ch); if (diag &amp;&amp; !diag-&gt;open_load) { log(\"Transient open load, continuing\"); return; } // Persistent open load - disable driver_.enable_channel(ch, false); } void handle_supply_fault() { log(\"Supply voltage fault\"); // Enter safe state driver_.disable_all_channels(); // Wait for supply to stabilize delay(1s); // Re-enable if supply recovered auto status = driver_.get_device_status(); if (status &amp;&amp; !status-&gt;vbat_uv &amp;&amp; !status-&gt;vbat_ov) { log(\"Supply recovered\"); driver_.clear_faults(); } } void start_monitoring() { // Start periodic monitoring task // (platform-specific implementation) } }; . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#robust-error-handling",
    
    "relUrl": "/docs/09_Usage_Examples/#robust-error-handling"
  },"228": {
    "doc": "💻 Usage Examples",
    "title": "Example 6: Automotive Application",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#example-6-automotive-application",
    
    "relUrl": "/docs/09_Usage_Examples/#example-6-automotive-application"
  },"229": {
    "doc": "💻 Usage Examples",
    "title": "Engine Management Actuators",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 . | class EngineActuatorControl { public: enum class Actuator { VVT_INTAKE, // Variable valve timing (CH0) VVT_EXHAUST, // Variable valve timing (CH1) EGR_VALVE, // EGR control (CH2) WASTEGATE, // Turbo wastegate (CH3) FUEL_PUMP, // High-pressure fuel pump (CH4+CH5 parallel) }; EngineActuatorControl(Driver&amp; driver) : driver_(driver) {} void init() { driver_.enter_config_mode(); // Configure VVT actuators (proportional, with dither) configure_vvt(Channel::CH0); configure_vvt(Channel::CH1); // Configure EGR valve (proportional) ChannelConfig egr_config{ .mode = ChannelMode::ICC, .current_setpoint_ma = 0, // Start closed .slew_rate = SlewRate::MEDIUM_2V5_US, .open_load_threshold = 4 }; driver_.configure_channel(Channel::CH2, egr_config); // Configure wastegate (fast response) ChannelConfig wg_config{ .mode = ChannelMode::ICC, .current_setpoint_ma = 0, .slew_rate = SlewRate::FASTEST_10V0_US, .open_load_threshold = 3 }; driver_.configure_channel(Channel::CH3, wg_config); // Configure fuel pump (parallel, high current) driver_.set_parallel_operation(ParallelPair::CH4_CH5, true); ChannelConfig pump_config{ .mode = ChannelMode::ICC, .current_setpoint_ma = 3000, // 3A .slew_rate = SlewRate::MEDIUM_2V5_US, .open_load_threshold = 5 }; driver_.configure_channel(Channel::CH4, pump_config); driver_.configure_channel(Channel::CH5, pump_config); driver_.enter_mission_mode(); // Enable critical actuators driver_.enable_channel(Channel::CH4, true); // Fuel pump driver_.enable_channel(Channel::CH5, true); } void set_vvt_position(Actuator actuator, float degrees) { Channel ch = (actuator == Actuator::VVT_INTAKE) ? Channel::CH0 : Channel::CH1; // Convert degrees to current (example: 0-50° = 500-1500mA) uint16_t current = 500 + static_cast&lt;uint16_t&gt;(degrees * 20.0f); driver_.set_current_setpoint(ch, current); } void set_egr_opening(float percent) { // 0-100% = 0-1800mA uint16_t current = static_cast&lt;uint16_t&gt;(percent * 18.0f); driver_.set_current_setpoint(Channel::CH2, current); if (percent &gt; 0) { driver_.enable_channel(Channel::CH2, true); } } private: Driver&amp; driver_; void configure_vvt(Channel ch) { ChannelConfig config{ .mode = ChannelMode::ICC, .current_setpoint_ma = 1000, // Mid position .slew_rate = SlewRate::MEDIUM_2V5_US, .open_load_threshold = 4, .deep_dither_enabled = true, .dither_step_size = 50, // Small dither for positioning .dither_steps = 10, .dither_flat = 5 }; driver_.configure_channel(ch, config); } }; . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#engine-management-actuators",
    
    "relUrl": "/docs/09_Usage_Examples/#engine-management-actuators"
  },"230": {
    "doc": "💻 Usage Examples",
    "title": "Example 7: Diagnostic Dashboard",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#example-7-diagnostic-dashboard",
    
    "relUrl": "/docs/09_Usage_Examples/#example-7-diagnostic-dashboard"
  },"231": {
    "doc": "💻 Usage Examples",
    "title": "System Health Monitoring",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 . | void print_system_status(Driver&amp; driver) { std::cout &lt;&lt; \"\\n=== TLE92466ED System Status ===\\n\"; // Global status auto status = driver.get_device_status(); if (status) { std::cout &lt;&lt; \"Mode: \" &lt;&lt; (status-&gt;config_mode ? \"Config\" : \"Mission\") &lt;&lt; \"\\n\"; std::cout &lt;&lt; \"Init Done: \" &lt;&lt; (status-&gt;init_done ? \"Yes\" : \"No\") &lt;&lt; \"\\n\"; std::cout &lt;&lt; \"Faults: \" &lt;&lt; (status-&gt;any_fault ? \"YES\" : \"No\") &lt;&lt; \"\\n\"; if (status-&gt;any_fault) { std::cout &lt;&lt; \" VBAT UV: \" &lt;&lt; status-&gt;vbat_uv &lt;&lt; \"\\n\"; std::cout &lt;&lt; \" VBAT OV: \" &lt;&lt; status-&gt;vbat_ov &lt;&lt; \"\\n\"; std::cout &lt;&lt; \" OT Warn: \" &lt;&lt; status-&gt;ot_warning &lt;&lt; \"\\n\"; std::cout &lt;&lt; \" OT Error: \" &lt;&lt; status-&gt;ot_error &lt;&lt; \"\\n\"; } } // Channel status std::cout &lt;&lt; \"\\nChannel Status:\\n\"; std::cout &lt;&lt; \"CH | Setpt | Actual | DC% | Faults\\n\"; std::cout &lt;&lt; \"---+-------+--------+------+--------\\n\"; for (int i = 0; i &lt; 6; i++) { Channel ch = static_cast&lt;Channel&gt;(i); auto setpoint = driver.get_current_setpoint(ch); auto actual = driver.get_average_current(ch); auto dc = driver.get_duty_cycle(ch); auto diag = driver.get_channel_diagnostics(ch); std::cout &lt;&lt; \" \" &lt;&lt; i &lt;&lt; \" | \"; std::cout &lt;&lt; (setpoint ? std::to_string(*setpoint) : \"ERR\") &lt;&lt; \" | \"; std::cout &lt;&lt; (actual ? std::to_string(*actual) : \"ERR\") &lt;&lt; \" | \"; std::cout &lt;&lt; (dc ? std::to_string(*dc / 655) : \"ERR\") &lt;&lt; \" | \"; if (diag) { if (diag-&gt;overcurrent) std::cout &lt;&lt; \"OC \"; if (diag-&gt;short_to_ground) std::cout &lt;&lt; \"SG \"; if (diag-&gt;open_load) std::cout &lt;&lt; \"OL \"; } std::cout &lt;&lt; \"\\n\"; } std::cout &lt;&lt; \"================================\\n\"; } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#system-health-monitoring",
    
    "relUrl": "/docs/09_Usage_Examples/#system-health-monitoring"
  },"232": {
    "doc": "💻 Usage Examples",
    "title": "Practical Tips",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#practical-tips",
    
    "relUrl": "/docs/09_Usage_Examples/#practical-tips"
  },"233": {
    "doc": "💻 Usage Examples",
    "title": "1. Always Check Return Values",
    "content": "| 1 2 3 4 5 6 7 8 9 . | // Bad driver.init(); driver.enable_channel(Channel::CH0, true); // Good if (auto result = driver.init(); !result) { handle_error(result.error()); return; } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#1-always-check-return-values",
    
    "relUrl": "/docs/09_Usage_Examples/#1-always-check-return-values"
  },"234": {
    "doc": "💻 Usage Examples",
    "title": "2. Service Watchdogs",
    "content": "| 1 2 3 4 5 6 . | // In main loop while (running) { driver.reload_spi_watchdog(1000); // ... other operations delay(50ms); // Must be &lt; watchdog timeout } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#2-service-watchdogs",
    
    "relUrl": "/docs/09_Usage_Examples/#2-service-watchdogs"
  },"235": {
    "doc": "💻 Usage Examples",
    "title": "3. Monitor Before Critical Operations",
    "content": "| 1 2 3 4 5 6 7 . | // Before enabling high-current load auto status = driver.get_device_status(); if (status &amp;&amp; !status-&gt;vbat_uv &amp;&amp; !status-&gt;ot_error) { driver.enable_channel(Channel::CH0, true); } else { log(\"Cannot enable: system fault\"); } . | . ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#3-monitor-before-critical-operations",
    
    "relUrl": "/docs/09_Usage_Examples/#3-monitor-before-critical-operations"
  },"236": {
    "doc": "💻 Usage Examples",
    "title": "4. Graceful Shutdown",
    "content": "| 1 2 3 4 5 6 7 8 9 . | void shutdown() { // Disable all outputs driver.disable_all_channels(); // Return to safe state driver.enter_config_mode(); // Device is now safe } . | . | Navigation: ← HAL Implementation | Back to Index | . ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/#4-graceful-shutdown",
    
    "relUrl": "/docs/09_Usage_Examples/#4-graceful-shutdown"
  },"237": {
    "doc": "💻 Usage Examples",
    "title": "💻 Usage Examples",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/docs/09_Usage_Examples/",
    
    "relUrl": "/docs/09_Usage_Examples/"
  },"238": {
    "doc": "🤝 Contributing",
    "title": "🤝 Contributing to HardFOC TLE92466ED Driver",
    "content": "Thank you for your interest in contributing to the HardFOC TLE92466ED Driver! This document provides guidelines and information for contributors. ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-contributing-to-hardfoc-tle92466ed-driver",
    
    "relUrl": "/CONTRIBUTING/#-contributing-to-hardfoc-tle92466ed-driver"
  },"239": {
    "doc": "🤝 Contributing",
    "title": "📋 Code Standards",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-code-standards",
    
    "relUrl": "/CONTRIBUTING/#-code-standards"
  },"240": {
    "doc": "🤝 Contributing",
    "title": "🎯 Coding Style and Best Practices for HardFOC Development",
    "content": ". | C++23 Standard Compliance - All code must be compatible with C++23 | Consistent Naming - Follow the established naming conventions: . | Classes: PascalCase (e.g., TLE92466ED, TLE92466ED_HAL) | Functions: PascalCase (e.g., SetCurrent, GetDiagnostics) | Variables: snake_case with trailing underscore for members (e.g., channel_enable_, current_setting_) | Constants: UPPER_SNAKE_CASE (e.g., TLE92466ED_MAX_CURRENT) | Types: Hardware-agnostic types where applicable | . | . ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-coding-style-and-best-practices-for-hardfoc-development",
    
    "relUrl": "/CONTRIBUTING/#-coding-style-and-best-practices-for-hardfoc-development"
  },"241": {
    "doc": "🤝 Contributing",
    "title": "🏗️ Architecture Guidelines",
    "content": ". | Hardware Abstraction - Use hardware-agnostic HAL interfaces | Error Handling - All functions use std::expected for error handling | Safety - Use noexcept where appropriate for safety-critical code | Dependencies - Keep dependencies minimal (freestanding where possible) | . ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#%EF%B8%8F-architecture-guidelines",
    
    "relUrl": "/CONTRIBUTING/#️-architecture-guidelines"
  },"242": {
    "doc": "🤝 Contributing",
    "title": "🧪 Testing",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-testing",
    
    "relUrl": "/CONTRIBUTING/#-testing"
  },"243": {
    "doc": "🤝 Contributing",
    "title": "🔧 Unit Tests and Hardware Validation Requirements",
    "content": ". | Unit Tests - Write comprehensive unit tests for all new functionality | Hardware Testing - Test on actual TLE92466ED hardware with ESP32 | Integration Tests - Verify compatibility with existing HardFOC systems | Performance Tests - Ensure real-time performance requirements are met | Safety Tests - Validate safety features and error handling | . ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-unit-tests-and-hardware-validation-requirements",
    
    "relUrl": "/CONTRIBUTING/#-unit-tests-and-hardware-validation-requirements"
  },"244": {
    "doc": "🤝 Contributing",
    "title": "📖 Documentation",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-documentation",
    
    "relUrl": "/CONTRIBUTING/#-documentation"
  },"245": {
    "doc": "🤝 Contributing",
    "title": "📚 Documentation Standards and Updates",
    "content": ". | API Documentation - Update documentation for all public interfaces | User Guides - Create or update guides for new features | Example Code - Provide working examples for solenoid control applications | Architecture Documentation - Document design decisions and patterns | . ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-documentation-standards-and-updates",
    
    "relUrl": "/CONTRIBUTING/#-documentation-standards-and-updates"
  },"246": {
    "doc": "🤝 Contributing",
    "title": "🐛 Bug Reports",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-bug-reports",
    
    "relUrl": "/CONTRIBUTING/#-bug-reports"
  },"247": {
    "doc": "🤝 Contributing",
    "title": "🔍 How to Report Bugs Effectively",
    "content": "When reporting bugs, please include: . | Hardware Information: TLE92466ED board, ESP32 version, solenoid configuration | Environment Details: ESP-IDF version, compiler version, operating system | Reproduction Steps: Minimal code example, configuration settings | Hardware Configuration: Connected peripherals, pin assignments | Debugging Information: Error messages, log output, stack traces | . ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-how-to-report-bugs-effectively",
    
    "relUrl": "/CONTRIBUTING/#-how-to-report-bugs-effectively"
  },"248": {
    "doc": "🤝 Contributing",
    "title": "✨ Feature Requests",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-feature-requests",
    
    "relUrl": "/CONTRIBUTING/#-feature-requests"
  },"249": {
    "doc": "🤝 Contributing",
    "title": "🚀 Proposing New Features and Enhancements",
    "content": "When proposing new features: . | Use Case - Describe the specific solenoid control use case | Technical Specification - Provide detailed technical requirements | API Design - Propose the interface design following established patterns | Implementation Plan - Outline the implementation approach | Testing Strategy - Describe how the feature will be tested | . ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-proposing-new-features-and-enhancements",
    
    "relUrl": "/CONTRIBUTING/#-proposing-new-features-and-enhancements"
  },"250": {
    "doc": "🤝 Contributing",
    "title": "🔄 Development Workflow",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-development-workflow",
    
    "relUrl": "/CONTRIBUTING/#-development-workflow"
  },"251": {
    "doc": "🤝 Contributing",
    "title": "📋 Step-by-Step Development Process",
    "content": ". | Fork the Repository | Create a Feature Branch | Implement Your Changes with HardFOC-Specific Tests | Document Your Changes with HardFOC Examples | Submit a Pull Request | . ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-step-by-step-development-process",
    
    "relUrl": "/CONTRIBUTING/#-step-by-step-development-process"
  },"252": {
    "doc": "🤝 Contributing",
    "title": "📋 Code Quality Standards for HardFOC",
    "content": ". | C++23 Compliance - Code compiles without warnings | HardFOC Compatibility - Tested on HardFOC boards | Error Handling - All error conditions handled appropriately using std::expected | Documentation - All public APIs documented | Tests - Adequate test coverage provided | Performance - Real-time requirements met | . ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-code-quality-standards-for-hardfoc",
    
    "relUrl": "/CONTRIBUTING/#-code-quality-standards-for-hardfoc"
  },"253": {
    "doc": "🤝 Contributing",
    "title": "🚀 Thank You for Contributing to HardFOC",
    "content": "Your contributions help make HardFOC motor controller boards more accessible and powerful for everyone. ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/#-thank-you-for-contributing-to-hardfoc",
    
    "relUrl": "/CONTRIBUTING/#-thank-you-for-contributing-to-hardfoc"
  },"254": {
    "doc": "🤝 Contributing",
    "title": "🤝 Contributing",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/CONTRIBUTING/",
    
    "relUrl": "/CONTRIBUTING/"
  },"255": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "🔧 HardFOC TLE92466ED Driver:",
    "content": "Six-Channel Low-Side Solenoid Driver . ",
    "url": "/hf-tle92466ed-driver/development/#-hardfoc-tle92466ed-driver",
    
    "relUrl": "/#-hardfoc-tle92466ed-driver"
  },"256": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "🎯 Modern Solenoid Control Interface for Multi-MCU Development",
    "content": "A production-ready C++23 driver implementation for the Infineon TLE92466ED with comprehensive SPI interface, precision current control, and extensive diagnostics support . ",
    "url": "/hf-tle92466ed-driver/development/#-modern-solenoid-control-interface-for-multi-mcu-development",
    
    "relUrl": "/#-modern-solenoid-control-interface-for-multi-mcu-development"
  },"257": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "📚 Table of Contents",
    "content": ". | 🎯 Overview | 🏗️ Architecture | 🔌 Features | 🚀 Quick Start | 📖 API Documentation | 🔧 Building | 📊 Examples | 🤝 Contributing | 📄 License | . ",
    "url": "/hf-tle92466ed-driver/development/#-table-of-contents",
    
    "relUrl": "/#-table-of-contents"
  },"258": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "🎯 Overview",
    "content": "📖 📚🌐 Live Complete Documentation - Interactive guides, examples, and step-by-step tutorials . TLE92466ED Driver is a modern, production-ready C++23 driver implementation for the Infineon TLE92466ED Six-Channel Low-Side Solenoid Driver IC. The driver provides comprehensive SPI interface, precision current control, and extensive diagnostics support with a clean hardware-agnostic HAL interface. ",
    "url": "/hf-tle92466ed-driver/development/#-overview",
    
    "relUrl": "/#-overview"
  },"259": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "🏆 Core Benefits",
    "content": ". | 🔄 Hardware Portability - Clean HAL interface for easy platform porting | 🎯 Modern C++23 - Using std::expected for type-safe error handling | ⚡ Precision Control - 15-bit current resolution (0.061mA steps) | 🛡️ Safety Features - Comprehensive diagnostics and protection systems | 📈 Zero Dependencies - Freestanding-compatible, suitable for bare-metal | 🔌 Complete Coverage - Full access to all 108 registers and features | . ",
    "url": "/hf-tle92466ed-driver/development/#-core-benefits",
    
    "relUrl": "/#-core-benefits"
  },"260": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "🎨 Design Philosophy",
    "content": "| 1 2 3 4 5 6 7 8 . | // Write hardware-agnostic solenoid control code YourPlatformHAL hal; // Your SPI implementation TLE92466ED driver(hal); // Initialize and control channels driver.initialize(); driver.setChannelCurrent(0, 1500); // 1.5A driver.enableChannel(0); . | . ",
    "url": "/hf-tle92466ed-driver/development/#-design-philosophy",
    
    "relUrl": "/#-design-philosophy"
  },"261": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "🏗️ Architecture",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/#%EF%B8%8F-architecture",
    
    "relUrl": "/#️-architecture"
  },"262": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "HAL-Based Design",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 . | 📦 TLE92466ED Driver Architecture ├── 🎯 Driver Layer (TLE92466ED class) # High-level channel control API │ ├── Channel Control # Current setting, enable/disable │ ├── Diagnostics # Fault detection and monitoring │ ├── Configuration # Channel modes, PWM settings │ └── Register Access # Direct register manipulation │ ├── 🔌 Hardware Abstraction Layer # Platform-independent interface │ ├── TLE92466ED_HAL # Base HAL interface │ ├── SPI Transfer # 32-bit frame communication │ └── Delay Functions # Timing control │ └── 🔧 Hardware Layer # Platform-specific implementations ├── ESP32 HAL # ESP32 family support ├── STM32 HAL # STM32 support └── Any MCU with SPI # Your implementation . | . ",
    "url": "/hf-tle92466ed-driver/development/#hal-based-design",
    
    "relUrl": "/#hal-based-design"
  },"263": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Abstraction Benefits",
    "content": "1. MCU Independence . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 . | // Application code remains the same across MCUs class SolenoidController { TLE92466ED* driver; public: void Initialize() { // Platform-specific HAL, same driver code YourPlatformHAL hal; // ESP32, STM32, or any MCU driver = new TLE92466ED(hal); // Same API regardless of MCU driver-&gt;initialize(); driver-&gt;setChannelCurrent(0, 1500); driver-&gt;enableChannel(0); } }; . | . ",
    "url": "/hf-tle92466ed-driver/development/#abstraction-benefits",
    
    "relUrl": "/#abstraction-benefits"
  },"264": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "🔌 Features",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/#-features",
    
    "relUrl": "/#-features"
  },"265": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Hardware Capabilities",
    "content": "| Feature | Specification | Details | . | Channels | 6 independent outputs | Low-side solenoid/load control | . | Current Range | 0-2A per channel | Single channel operation | . | Current Range | 0-4A per channel | Parallel mode operation | . | Resolution | 15-bit (0.061mA) | Precision current control | . | SPI Interface | 32-bit frames | With CRC-8 (SAE J1850) | . | PWM &amp; Dither | Configurable | Noise reduction and precision | . | Diagnostics | Comprehensive | Overcurrent, overtemperature, load detection | . ",
    "url": "/hf-tle92466ed-driver/development/#hardware-capabilities",
    
    "relUrl": "/#hardware-capabilities"
  },"266": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Driver Features",
    "content": "| Feature | Description | Benefits | . | Modern C++23 | Using std::expected | Type-safe error handling | . | Hardware Agnostic | Clean HAL interface | Easy platform porting | . | Zero Dependencies | Freestanding-compatible | Suitable for bare-metal | . | noexcept Guarantee | All functions noexcept | Embedded safety | . | Production Ready | Thoroughly documented | Industry-grade quality | . ",
    "url": "/hf-tle92466ed-driver/development/#driver-features",
    
    "relUrl": "/#driver-features"
  },"267": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "🚀 Quick Start",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/#-quick-start",
    
    "relUrl": "/#-quick-start"
  },"268": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "1. Clone Repository",
    "content": "| 1 2 . | git clone https://github.com/n3b3x/hf-tle92466ed-driver.git cd hf-tle92466ed-driver . | . ",
    "url": "/hf-tle92466ed-driver/development/#1-clone-repository",
    
    "relUrl": "/#1-clone-repository"
  },"269": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "2. Implement HAL Interface",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . | #include \"include/TLE92466ED_HAL.hpp\" class YourPlatformHAL : public TLE92466ED_HAL { public: auto spiTransfer(std::span&lt;const uint8_t&gt; txData, std::span&lt;uint8_t&gt; rxData) noexcept -&gt; std::expected&lt;void, HALError&gt; override { // Your SPI transfer implementation return {}; } void delayMicroseconds(uint32_t us) noexcept override { // Your delay implementation } }; . | . ",
    "url": "/hf-tle92466ed-driver/development/#2-implement-hal-interface",
    
    "relUrl": "/#2-implement-hal-interface"
  },"270": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "3. Basic Usage",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . | #include \"include/TLE92466ED.hpp\" YourPlatformHAL hal; TLE92466ED driver(hal); // Initialize the IC if (auto result = driver.initialize(); !result) { return -1; } // Set current for channel 0 to 1.5A driver.setChannelCurrent(0, 1500); // Enable channel 0 driver.enableChannel(0); . | . ",
    "url": "/hf-tle92466ed-driver/development/#3-basic-usage",
    
    "relUrl": "/#3-basic-usage"
  },"271": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "4. Build Example",
    "content": "| 1 2 3 . | cd examples/esp32 ./scripts/setup_repo.sh ./scripts/build_app.sh basic_usage Release . | . ",
    "url": "/hf-tle92466ed-driver/development/#4-build-example",
    
    "relUrl": "/#4-build-example"
  },"272": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "📖 API Documentation",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/#-api-documentation",
    
    "relUrl": "/#-api-documentation"
  },"273": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Generated Documentation",
    "content": ". | 📚 Complete Documentation - Interactive guides and tutorials | API Reference - Complete driver API documentation | IC Overview - Hardware specifications | . ",
    "url": "/hf-tle92466ed-driver/development/#generated-documentation",
    
    "relUrl": "/#generated-documentation"
  },"274": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Key Concepts",
    "content": "Initialization . | 1 2 3 4 5 . | // Initialize the driver if (auto result = driver.initialize(); !result) { // Handle initialization error return; } . | . Channel Control . | 1 2 3 4 5 6 . | // Set current (0-2000 mA) driver.setChannelCurrent(0, 1500); // 1.5A // Enable/disable channels driver.enableChannel(0); driver.disableChannel(0); . | . Diagnostics . | 1 2 3 4 5 6 . | // Read diagnostics if (auto diag = driver.readDiagnostics(); diag) { if (diag-&gt;hasOvercurrent()) { // Handle overcurrent condition } } . | . ",
    "url": "/hf-tle92466ed-driver/development/#key-concepts",
    
    "relUrl": "/#key-concepts"
  },"275": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "🔧 Building",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/#-building",
    
    "relUrl": "/#-building"
  },"276": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Build System Features",
    "content": ". | CMake Integration - Easy project integration | ESP32 Examples - Comprehensive test applications | Manual Integration - Simple header/source inclusion | CI/CD Integration - Automated builds and validation | . ",
    "url": "/hf-tle92466ed-driver/development/#build-system-features",
    
    "relUrl": "/#build-system-features"
  },"277": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Build Commands",
    "content": "| 1 2 3 4 5 6 7 8 . | ## For ESP32 development cd examples/esp32 ./scripts/setup_repo.sh ./scripts/build_app.sh &lt;app_name&gt; &lt;build_type&gt; ## Examples: ./scripts/build_app.sh basic_usage Release ./scripts/build_app.sh multi_channel Debug . | . ",
    "url": "/hf-tle92466ed-driver/development/#build-commands",
    
    "relUrl": "/#build-commands"
  },"278": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "CMake Integration",
    "content": "| 1 2 . | add_subdirectory(external/hf-tle92466ed-driver) target_link_libraries(your_target PRIVATE TLE92466ED) . | . ",
    "url": "/hf-tle92466ed-driver/development/#cmake-integration",
    
    "relUrl": "/#cmake-integration"
  },"279": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "📊 Examples",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/#-examples",
    
    "relUrl": "/#-examples"
  },"280": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Available Test Applications",
    "content": "| Application | Tests | Purpose | . | basic_usage | Single channel control | Basic current setting and enable | . | multi_channel | Multi-channel operation | Parallel channel control | . | diagnostics | Fault detection | Overcurrent and overtemperature | . ",
    "url": "/hf-tle92466ed-driver/development/#available-test-applications",
    
    "relUrl": "/#available-test-applications"
  },"281": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Usage Examples",
    "content": "| 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 . | // Single Channel Control driver.setChannelCurrent(0, 1500); // 1.5A driver.enableChannel(0); // Multi-Channel Control for (uint8_t ch = 0; ch &lt; 6; ch++) { driver.setChannelCurrent(ch, 1000); // 1A per channel driver.enableChannel(ch); } // Diagnostics Monitoring if (auto diag = driver.readDiagnostics(); diag) { if (diag-&gt;hasOvercurrent()) { driver.disableChannel(0); } } . | . ",
    "url": "/hf-tle92466ed-driver/development/#usage-examples",
    
    "relUrl": "/#usage-examples"
  },"282": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "🤝 Contributing",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/#-contributing",
    
    "relUrl": "/#-contributing"
  },"283": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Development Workflow",
    "content": ". | Fork the repository | Create feature branch (feature/new-feature) | Implement following coding standards | Test with existing applications | Document your changes | Submit pull request | . ",
    "url": "/hf-tle92466ed-driver/development/#development-workflow",
    
    "relUrl": "/#development-workflow"
  },"284": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Coding Standards",
    "content": ". | Functions: PascalCase (SetChannelCurrent, ReadDiagnostics) | Types: snake_case with *t suffix (hal_error_t) | Error Handling: Use std::expected for type safety | Code Formatting: Use clang-format | . ",
    "url": "/hf-tle92466ed-driver/development/#coding-standards",
    
    "relUrl": "/#coding-standards"
  },"285": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "📄 License",
    "content": "This software is released into the Public Domain. You can use, modify, and distribute it freely without any restrictions. ",
    "url": "/hf-tle92466ed-driver/development/#-license",
    
    "relUrl": "/#-license"
  },"286": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "🔗 Quick Links",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/#-quick-links",
    
    "relUrl": "/#-quick-links"
  },"287": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Documentation",
    "content": ". | 📚 Complete Documentation - Interactive guides and tutorials | 📋 Documentation Index - Complete documentation navigation | 🔌 IC Overview - Hardware specifications | 📡 SPI Protocol - Communication protocol | 🎛️ Driver API - C++ API reference | 🔧 HAL Implementation - Platform porting guide | 💻 Usage Examples - Practical code examples | . ",
    "url": "/hf-tle92466ed-driver/development/#documentation",
    
    "relUrl": "/#documentation"
  },"288": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Development",
    "content": ". | 🚀 Examples - Test applications and usage examples | 🧪 Test Documentation - Comprehensive test documentation | 🔧 Scripts - Build, flash, and development tools | 📊 Configuration - Application and build settings | . ",
    "url": "/hf-tle92466ed-driver/development/#development",
    
    "relUrl": "/#development"
  },"289": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "Community",
    "content": ". | 🤝 Contributing - Development guidelines | 🐛 Issue Tracker | 💬 Discussions | . Built for the HardFOC ecosystem - Enabling seamless solenoid control . Precision current control that just works™ . ",
    "url": "/hf-tle92466ed-driver/development/#community",
    
    "relUrl": "/#community"
  },"290": {
    "doc": "🔧 HardFOC TLE92466ED Driver",
    "title": "🔧 HardFOC TLE92466ED Driver",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/",
    
    "relUrl": "/"
  },"291": {
    "doc": "Home",
    "title": "TLE92466ED Driver",
    "content": "Modern C++23 driver for Infineon TLE92466ED Six-Channel Low-Side Solenoid Driver IC . Get Started View on GitHub . ",
    "url": "/hf-tle92466ed-driver/development/#tle92466ed-driver",
    
    "relUrl": "/#tle92466ed-driver"
  },"292": {
    "doc": "Home",
    "title": "Overview",
    "content": "The TLE92466ED driver is a production-ready C++23 implementation for controlling the Infineon TLE92466ED IC, a sophisticated six-channel low-side solenoid driver with precision current control. ",
    "url": "/hf-tle92466ed-driver/development/#overview",
    
    "relUrl": "/#overview"
  },"293": {
    "doc": "Home",
    "title": "Key Features",
    "content": ". | 6 Independent Channels - Low-side solenoid/load control | 15-bit Current Control - 0.061mA resolution, 0-2A per channel (0-4A parallel) | 32-bit SPI with CRC-8 - Robust communication with data integrity | Modern C++23 - Using std::expected for error handling | Hardware Agnostic - Clean HAL interface for platform portability | Zero Dependencies - Freestanding-compatible for embedded systems | Comprehensive Diagnostics - Overcurrent, temperature, load detection | . ",
    "url": "/hf-tle92466ed-driver/development/#key-features",
    
    "relUrl": "/#key-features"
  },"294": {
    "doc": "Home",
    "title": "Quick Start",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/#quick-start",
    
    "relUrl": "/#quick-start"
  },"295": {
    "doc": "Home",
    "title": "1. Include the Driver",
    "content": "cpp #include \"TLE92466ED.hpp\" #include \"your_platform_hal.hpp\" text . ",
    "url": "/hf-tle92466ed-driver/development/#1-include-the-driver",
    
    "relUrl": "/#1-include-the-driver"
  },"296": {
    "doc": "Home",
    "title": "2. Create and Initialize",
    "content": "```cpp YourPlatformHAL hal; TLE92466ED driver(hal); . if (auto result = driver.initialize(); !result) { // Handle initialization error } ```text . ",
    "url": "/hf-tle92466ed-driver/development/#2-create-and-initialize",
    
    "relUrl": "/#2-create-and-initialize"
  },"297": {
    "doc": "Home",
    "title": "3. Control Channels",
    "content": "```cpp // Set current to 1.5A driver.setChannelCurrent(0, 1500); . // Enable channel driver.enableChannel(0); . // Read diagnostics if (auto diag = driver.readDiagnostics(); diag) { if (diag-&gt;hasOvercurrent()) { // Handle overcurrent } } ```text . ",
    "url": "/hf-tle92466ed-driver/development/#3-control-channels",
    
    "relUrl": "/#3-control-channels"
  },"298": {
    "doc": "Home",
    "title": "Documentation",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/#documentation",
    
    "relUrl": "/#documentation"
  },"299": {
    "doc": "Home",
    "title": "📖 Complete Guides",
    "content": ". | Documentation Index - Navigation hub | IC Overview - Hardware specifications | SPI Protocol - Communication details | Register Map - All 108 registers | Current Control - ICC system | Channel Modes - Operating modes | Diagnostics - Fault detection | Driver API - C++ interface | HAL Implementation - Platform porting | Usage Examples - Code samples | . ",
    "url": "/hf-tle92466ed-driver/development/#complete-guides",
    
    "relUrl": "/#complete-guides"
  },"300": {
    "doc": "Home",
    "title": "🔧 API Reference",
    "content": ". | Doxygen Documentation - Complete API reference | . ",
    "url": "/hf-tle92466ed-driver/development/#api-reference",
    
    "relUrl": "/#api-reference"
  },"301": {
    "doc": "Home",
    "title": "Hardware Specifications",
    "content": "| Feature | Specification | . | Channels | 6 independent outputs | . | Current Range | 0-2A (single), 0-4A (parallel) | . | Resolution | 15-bit (0.061mA) | . | SPI Interface | 32-bit frames with CRC-8 | . | PWM Support | Configurable frequency | . | Dither | Up to 1.8A amplitude | . | Protection | Overcurrent, overtemp, load detection | . ",
    "url": "/hf-tle92466ed-driver/development/#hardware-specifications",
    
    "relUrl": "/#hardware-specifications"
  },"302": {
    "doc": "Home",
    "title": "Requirements",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/#requirements",
    
    "relUrl": "/#requirements"
  },"303": {
    "doc": "Home",
    "title": "Compiler Support",
    "content": ". | GCC 12.0+ or Clang 16.0+ or MSVC 19.33+ | C++23 standard library with std::expected | . ",
    "url": "/hf-tle92466ed-driver/development/#compiler-support",
    
    "relUrl": "/#compiler-support"
  },"304": {
    "doc": "Home",
    "title": "Dependencies",
    "content": ". | None - freestanding compatible | . ",
    "url": "/hf-tle92466ed-driver/development/#dependencies",
    
    "relUrl": "/#dependencies"
  },"305": {
    "doc": "Home",
    "title": "Installation",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/#installation",
    
    "relUrl": "/#installation"
  },"306": {
    "doc": "Home",
    "title": "CMake",
    "content": "cmake add_subdirectory(external/hf-tle92466ed-driver) target_link_libraries(your_target PRIVATE TLE92466ED) text . ",
    "url": "/hf-tle92466ed-driver/development/#cmake",
    
    "relUrl": "/#cmake"
  },"307": {
    "doc": "Home",
    "title": "Manual",
    "content": "Include the following files in your project: . | include/TLE92466ED.hpp | include/TLE92466ED_Registers.hpp | include/TLE92466ED_HAL.hpp | src/TLE92466ED.cpp | . ",
    "url": "/hf-tle92466ed-driver/development/#manual",
    
    "relUrl": "/#manual"
  },"308": {
    "doc": "Home",
    "title": "Platform Integration",
    "content": "Implement the HAL interface for your platform: . ```cpp class YourPlatformHAL : public TLE92466ED_HAL { public: auto spiTransfer(std::span txData, std::span rxData) noexcept -&gt; std::expected&lt;void, HALError&gt; override { // Your SPI implementation return {}; } . | 1 2 3 . | void delayMicroseconds(uint32_t us) noexcept override { // Your delay implementation } }; ```text . | . ",
    "url": "/hf-tle92466ed-driver/development/#platform-integration",
    
    "relUrl": "/#platform-integration"
  },"309": {
    "doc": "Home",
    "title": "Use Cases",
    "content": ". | 🚗 Automotive solenoid control | 🏭 Industrial valve control | 🤖 Robotics actuator control | ⚡ Precision motor control | 🔬 Test and measurement equipment | . ",
    "url": "/hf-tle92466ed-driver/development/#use-cases",
    
    "relUrl": "/#use-cases"
  },"310": {
    "doc": "Home",
    "title": "Contributing",
    "content": "Contributions are welcome! Please feel free to submit issues, feature requests, or pull requests on GitHub. ",
    "url": "/hf-tle92466ed-driver/development/#contributing",
    
    "relUrl": "/#contributing"
  },"311": {
    "doc": "Home",
    "title": "License",
    "content": "This software is released into the Public Domain. You can use, modify, and distribute it freely without any restrictions. ",
    "url": "/hf-tle92466ed-driver/development/#license",
    
    "relUrl": "/#license"
  },"312": {
    "doc": "Home",
    "title": "Resources",
    "content": ". | Infineon TLE92466ED Product Page | Datasheet (included in repository) | GitHub Repository | Issue Tracker | . | Version: 2.0.0 | Status: Production Ready | Last Updated: 2025-10-21 | . ",
    "url": "/hf-tle92466ed-driver/development/#resources",
    
    "relUrl": "/#resources"
  },"313": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/hf-tle92466ed-driver/development/",
    
    "relUrl": "/"
  },"314": {
    "doc": "Basic Usage Test Suite - TLE92466ED ESP32-C6",
    "title": "Basic Usage Test Suite - TLE92466ED ESP32-C6",
    "content": "# Basic Usage Test Suite - TLE92466ED ESP32-C6 ## Overview The Basic Usage example is a **comprehensive test suite** that demonstrates fundamental TLE92466ED operations on ESP32-C6 using a professional FreeRTOS-based test framework. This suite provides structured validation of driver functionality with automatic result tracking, GPIO14 progress indicators, and detailed execution timing. ## 🎯 Purpose - **Validate** TLE92466ED driver functionality on ESP32-C6 - **Demonstrate** best practices for driver integration - **Provide** professional test infrastructure for development - **Enable** CI/CD integration with structured output - **Document** expected behavior and performance ## 🧪 Test Framework Architecture ### Professional Test Infrastructure The example uses the **TLE92466ED Test Framework** (`TLE92466ED_TestFramework.hpp`), which provides: #### ✅ **FreeRTOS Task-Based Execution** - Each test runs in isolated FreeRTOS task - Custom stack size per test (8KB default) - Automatic semaphore synchronization - 30-second timeout protection - Fallback to inline execution on failure #### ✅ **GPIO14 Progress Indicator** - Visual feedback on oscilloscope/logic analyzer - **Toggle**: HIGH/LOW on each test completion - **Blink Pattern**: 5 blinks at section start/end - Hardware-level test progression tracking #### ✅ **Automatic Result Tracking** - Pass/fail counting - Microsecond-precision execution timing - Success rate calculation - Professional summary reports #### ✅ **Test Section Management** - Compile-time section enable/disable - Section-based organization - Custom blink patterns per section - Structured output formatting ## 📋 Test Suite Structure ### Test Sections #### 1. **INITIALIZATION_TESTS** (`#define ENABLE_INITIALIZATION_TESTS 1`) Tests fundamental setup and communication: - `test_hal_initialization` - ESP32-C6 HAL setup and SPI configuration - `test_driver_initialization` - TLE92466ED driver instance creation - `test_chip_id` - SPI communication verification via chip ID #### 2. **BASIC_OPERATION_TESTS** (`#define ENABLE_BASIC_OPERATION_TESTS 1`) Tests core driver operations: - `test_channel_enable_disable` - Channel control operations - `test_current_setting` - Current configuration (100mA, 500mA, 1000mA, 1500mA) - `test_diagnostics` - Real-time diagnostics reading #### 3. **CURRENT_CONTROL_TESTS** (`#define ENABLE_CURRENT_CONTROL_TESTS 1`) Tests advanced current control: - `test_current_ramping` - Smooth 0→1000mA→0mA transitions ### Test Function Signatures All test functions follow this pattern: ```cpp static bool test_function_name() noexcept; ```text **Key Characteristics**: - Return `bool` (true = passed, false = failed) - Declared `noexcept` for embedded safety - Self-contained and isolated - Descriptive ESP_LOG output - Proper error handling with `std::expected` ## 🔧 Hardware Setup ### Required Components - **ESP32-C6-DevKitC-1** development board - **TLE92466ED** evaluation board or custom PCB - **12-24V power supply** for VBAT (2A minimum) - **Test load**: Solenoid, resistor (6-120Ω), or LED with current limiting - **Oscilloscope/Logic Analyzer** (optional, for GPIO14 monitoring) - Connecting wires ### Wiring Diagram ```text ESP32-C6 TLE92466ED Function -------- ---------- -------- GPIO2 -------> MISO SPI Data In GPIO7 -------> MOSI SPI Data Out GPIO6 -------> SCLK SPI Clock GPIO10 -------> CS Chip Select (active low) GPIO14 -------> [LED/Scope] Test Progress Indicator 3.3V -------> VDD Logic Supply GND -------> GND Common Ground External Supply TLE92466ED --------------- ---------- 12-24V ------> VBAT Power Supply GND ------> GND Power Ground Test Load TLE92466ED --------- ---------- Load+ ------> OUT0 Channel 0 Output Load- ------> GND (via sense) Return Path ```text ### Complete Pin Configuration | Function | ESP32-C6 GPIO | TLE92466ED Pin | Configuration | Notes |----------|---------------|----------------|---------------|-------| **SPI MISO** | GPIO2 | MISO | Input | Data from TLE92466ED | **SPI MOSI** | GPIO7 | MOSI | Output | Data to TLE92466ED | **SPI SCLK** | GPIO6 | SCLK | Output | 1MHz SPI Clock | **SPI CS** | GPIO10 | CS | Output | Active Low | **Test Indicator** | GPIO14 | - | Output | Progress indicator | **Logic Supply** | 3.3V | VDD | Power | 3.3V ±10% | **Power Supply** | External | VBAT | Power | 8-28V, 2A+ | **Ground** | GND | GND | Ground | Common reference | ### GPIO14 Test Indicator Setup ```text ESP32-C6 GPIO14 ──┬── LED (Anode) │ └── LED (Cathode) ── 220Ω ── GND │ └── Oscilloscope/Logic Analyzer Probe ```text **Purpose**: Visual and measurable feedback showing test progression ## ⚙️ Configuration ### Hardware Configuration (`main/TLE92466ED_Config.hpp`) All hardware-specific settings are centralized: ```cpp namespace TLE92466ED_Config { struct SPIPins { static constexpr int MISO = 2; // GPIO2 static constexpr int MOSI = 7; // GPIO7 static constexpr int SCLK = 6; // GPIO6 static constexpr int CS = 10; // GPIO10 }; struct SPIParams { static constexpr int FREQUENCY = 1000000; // 1MHz static constexpr int MODE = 0; // SPI Mode 0 static constexpr int QUEUE_SIZE = 7; }; struct CurrentLimits { static constexpr uint16_t SINGLE_CHANNEL_MAX = 2000; // 2A static constexpr uint16_t PARALLEL_CHANNEL_MAX = 4000; // 4A }; struct HardwareSpecs { static constexpr float SUPPLY_VOLTAGE_MIN = 8.0f; // 8V static constexpr float SUPPLY_VOLTAGE_MAX = 28.0f; // 28V static constexpr int TEMPERATURE_MAX = 150; // 150°C }; } // namespace TLE92466ED_Config ```text **To modify hardware settings**: Edit `main/TLE92466ED_Config.hpp` ### Test Configuration (`main/BasicUsageExample.cpp`) Enable/disable test sections at compile time: ```cpp #define ENABLE_INITIALIZATION_TESTS 1 // HAL, driver, chip ID #define ENABLE_BASIC_OPERATION_TESTS 1 // Enable, current, diagnostics #define ENABLE_CURRENT_CONTROL_TESTS 1 // Ramping tests ```text **To disable a section**: Set to `0` and rebuild ### Build Configuration (`app_config.yml`) Application metadata and build settings: ```yaml apps: basic_usage: description: \"Basic usage example for TLE92466ED\" source_file: \"BasicUsageExample.cpp\" category: \"demo\" idf_versions: [\"release/v5.5\"] build_types: [\"Debug\", \"Release\"] ci_enabled: true featured: true ```text **Note**: This is for build metadata only. Hardware config is in `TLE92466ED_Config.hpp`. ## 🚀 Building and Running ### Quick Start ```bash cd examples/esp32 # Build the basic usage example ./scripts/build_app.sh basic_usage Debug # Flash to ESP32-C6 ./scripts/flash_app.sh basic_usage Debug # Monitor output ./scripts/monitor_app.sh basic_usage ```text ### Manual Build ```bash cd examples/esp32 # Set target idf.py set-target esp32c6 # Configure (optional) idf.py menuconfig # Build with APP_TYPE=basic_usage idf.py -DAPP_TYPE=basic_usage build # Flash idf.py -p /dev/ttyUSB0 flash # Monitor idf.py -p /dev/ttyUSB0 monitor ```text ### Build Targets ```bash # Debug build (optimized for debugging) idf.py -DAPP_TYPE=basic_usage -DCMAKE_BUILD_TYPE=Debug build # Release build (optimized for performance) idf.py -DAPP_TYPE=basic_usage -DCMAKE_BUILD_TYPE=Release build ```text ## 📊 Expected Output ### Professional Test Header ```text ╔══════════════════════════════════════════════════════════════════════════════╗ ║ TLE92466ED BASIC USAGE TEST SUITE - ESP32-C6 ║ ║ HardFOC Core Drivers ║ ╚══════════════════════════════════════════════════════════════════════════════╝ Target: esp32c6 ESP-IDF Version: v5.5.0 ╔══════════════════════════════════════════════════════════════════════════════╗ ║ TLE92466ED TEST CONFIGURATION ╠══════════════════════════════════════════════════════════════════════════════╣ ║ Test sections will execute based on compile-time configuration ║ ║ GPIO14 test progression indicator: ENABLED ║ ╚══════════════════════════════════════════════════════════════════════════════╝ ```text ### Test Execution ```text ╔══════════════════════════════════════════════════════════════════════════════╗ ║ SECTION: INITIALIZATION TESTS ║ ╚══════════════════════════════════════════════════════════════════════════════╝ [GPIO14: Blink pattern - 5 blinks] ╔══════════════════════════════════════════════════════════════════════════════╗ ║ Running (task): hal_initialization ║ ╚══════════════════════════════════════════════════════════════════════════════╝ I (1234) TLE92466ED_Basic: Creating HAL instance... I (1235) ESP32C6_HAL: ESP32C6_HAL created with SPI config I (1236) ESP32C6_HAL: MISO: GPIO2, MOSI: GPIO7, SCLK: GPIO6, CS: GPIO10 I (1237) ESP32C6_HAL: Frequency: 1000000 Hz, Mode: 0 I (1238) TLE92466ED_Basic: Initializing HAL... I (1240) ESP32C6_HAL: ESP32C6_HAL initialized successfully I (1241) TLE92466ED_Basic: ✅ HAL initialized successfully [SUCCESS] PASSED (task): hal_initialization (12.34 ms) Test task completed: hal_initialization [GPIO14: Toggle HIGH] ╔══════════════════════════════════════════════════════════════════════════════╗ ║ Running (task): driver_initialization ║ ╚══════════════════════════════════════════════════════════════════════════════╝ I (1250) TLE92466ED_Basic: Creating TLE92466ED driver instance... I (1251) TLE92466ED_Basic: Initializing TLE92466ED driver... I (1275) TLE92466ED_Basic: ✅ TLE92466ED driver initialized successfully [SUCCESS] PASSED (task): driver_initialization (25.67 ms) Test task completed: driver_initialization [GPIO14: Toggle LOW] ╔══════════════════════════════════════════════════════════════════════════════╗ ║ Running (task): chip_id ║ ╚══════════════════════════════════════════════════════════════════════════════╝ I (1280) TLE92466ED_Basic: Reading chip identification... I (1285) TLE92466ED_Basic: ✅ Chip ID: 0x123456789ABC [SUCCESS] PASSED (task): chip_id (5.23 ms) Test task completed: chip_id [GPIO14: Toggle HIGH] ```text ### Test Results Summary ```text ╔══════════════════════════════════════════════════════════════════════════════╗ ║ TEST RESULTS SUMMARY ║ ╠══════════════════════════════════════════════════════════════════════════════╣ ║ Total Tests: 7 ║ ║ Passed: 7 ║ ║ Failed: 0 ║ ║ Success Rate: 100.00% ║ ║ Total Time: 234.56 ms ║ ╚══════════════════════════════════════════════════════════════════════════════╝ I (5000) TLE92466ED_Basic: ✅ ALL TESTS PASSED! System will restart in 10 seconds... ```text ### GPIO14 Signal Pattern ```text Time │ GPIO14 │ Event ────────┼────────┼────────────────────────────── 0ms │ LOW │ Boot 100ms │ BLINK │ Section start (5 blinks) │ ↑↓ │ 200ms │ HIGH │ Test 1 complete 300ms │ LOW │ Test 2 complete 400ms │ HIGH │ Test 3 complete 500ms │ BLINK │ Section 2 start (5 blinks) 600ms │ LOW │ Test 4 complete ... ```text ## 🧪 Individual Test Details ### 1. `test_hal_initialization()` **Purpose**: Validate ESP32-C6 HAL creation and SPI initialization **Operations**: 1. Create ESP32C6_HAL instance with configuration from `TLE92466ED_Config.hpp` 2. Initialize SPI peripheral (SPI2_HOST) 3. Configure GPIO pins for SPI 4. Set up SPI parameters (1MHz, Mode 0) **Expected Result**: ✅ PASS - HAL instance created successfully - SPI bus initialized - GPIO pins configured - Ready for communication **Failure Modes**: - SPI bus already initialized - GPIO pins in use - Invalid SPI configuration - Hardware fault --- ### 2. `test_driver_initialization()` **Purpose**: Create TLE92466ED driver instance and initialize IC **Operations**: 1. Create TLE92466ED driver instance with HAL reference 2. Execute driver initialization sequence 3. Configure TLE92466ED registers 4. Set up default parameters **Expected Result**: ✅ PASS - Driver instance created - IC initialized successfully - Registers configured - Ready for operations **Failure Modes**: - HAL not initialized - SPI communication failure - TLE92466ED not powered - IC initialization timeout --- ### 3. `test_chip_id()` **Purpose**: Verify SPI communication by reading 48-bit chip ID **Operations**: 1. Read chip identification register 2. Verify CRC-8 (SAE J1850) 3. Validate chip ID format **Expected Result**: ✅ PASS - Chip ID read successfully - 48-bit value displayed (e.g., `0x123456789ABC`) - CRC verified **Failure Modes**: - SPI communication error - CRC mismatch - Invalid chip ID - TLE92466ED not responding --- ### 4. `test_channel_enable_disable()` **Purpose**: Validate channel control operations **Operations**: 1. Enable channel 0 2. Wait 1 second 3. Disable channel 0 4. Verify register writes **Expected Result**: ✅ PASS - Channel enabled successfully - Channel disabled successfully - No communication errors **Failure Modes**: - Register write failure - SPI timeout - Invalid channel number --- ### 5. `test_current_setting()` **Purpose**: Test current configuration at multiple setpoints **Operations**: Test current settings at: - 100mA - 500mA - 1000mA - 1500mA **Expected Result**: ✅ PASS - All current values set successfully - No register errors - 500ms delay between steps **Failure Modes**: - Current out of range (0-2000mA) - Register write failure - Invalid channel --- ### 6. `test_diagnostics()` **Purpose**: Verify diagnostics reading and fault detection **Operations**: 1. Read diagnostics registers 2. Check for faults: - Overcurrent - Overtemperature - Open load - Short circuit 3. Report status **Expected Result**: ✅ PASS (no faults expected) - Diagnostics read successfully - \"All systems normal\" (assuming proper load) **Possible Warnings** (not test failures): - ⚠️ Overcurrent detected (load too high) - 🌡️ Overtemperature detected (thermal issue) - 🔌 Open load (no load connected) - ⚡ Short circuit (load shorted) **Failure Modes**: - Cannot read diagnostics - SPI communication error --- ### 7. `test_current_ramping()` **Purpose**: Demonstrate smooth current transitions **Operations**: 1. Enable channel 0 2. Ramp UP: 0mA → 1000mA (100mA steps, 300ms each) 3. Ramp DOWN: 1000mA → 0mA (100mA steps, 300ms each) 4. Disable channel 0 **Expected Result**: ✅ PASS - Smooth ramping completed - All current values set successfully - Channel disabled at end **Failure Modes**: - Current setting failure - Channel enable/disable failure - Timeout during ramping ## 🐛 Troubleshooting ### Common Issues #### 1. **All Tests Fail** ❌ **Symptom**: Every test returns FAILED **Root Causes**: - TLE92466ED not powered (check VBAT: 12-24V) - SPI wiring incorrect - Common ground missing - ESP32-C6 not programmed correctly **Solutions**: ```bash # Check wiring - VBAT: 12-24V present - VDD: 3.3V present - GND: Common ground between ESP32-C6, TLE92466ED, and power supply - SPI pins: MISO, MOSI, SCLK, CS connected correctly # Re-flash idf.py -p /dev/ttyUSB0 erase-flash idf.py -p /dev/ttyUSB0 flash ```text --- #### 2. **HAL Initialization Fails** ❌ **Symptom**: `test_hal_initialization` fails **Root Causes**: - SPI2 bus already in use - GPIO pins conflicting - Invalid SPI configuration **Solutions**: 1. Check `sdkconfig` for SPI conflicts 2. Verify GPIO pins are not used elsewhere 3. Try different GPIO pins (modify `TLE92466ED_Config.hpp`) 4. Check ESP32-C6 hardware --- #### 3. **Driver Initialization Fails** ❌ **Symptom**: `test_driver_initialization` fails **Root Causes**: - SPI communication not working - TLE92466ED not responding - Power supply issue **Solutions**: 1. Verify SPI with logic analyzer/oscilloscope 2. Check VBAT voltage (must be 8-28V) 3. Check VDD voltage (must be 3.3V ±10%) 4. Verify TLE92466ED is not damaged --- #### 4. **Chip ID Read Fails** ❌ **Symptom**: `test_chip_id` fails, \"Failed to read chip ID\" **Root Causes**: - SPI communication error - TLE92466ED not powered - CS pin not working **Solutions**: 1. Measure SPI signals with oscilloscope: - SCLK: Should show 1MHz clock during transactions - MOSI: Should show data output - MISO: Should show data input - CS: Should go LOW during transactions 2. Check power supply voltages 3. Verify chip is not in reset or fault state --- #### 5. **Diagnostics Show Faults** ⚠️ **Symptom**: Tests pass but diagnostics show warnings **Overcurrent** ⚠️: - Load drawing too much current - Check load resistance (should be ≥6Ω for 2A max) - Verify VBAT voltage **Overtemperature** 🌡️: - IC too hot (>150°C junction temp) - Add heatsink - Reduce duty cycle - Lower ambient temperature **Open Load** 🔌: - No load connected (expected if testing without load) - Loose connection - Load resistance too high **Short Circuit** ⚡: - Load or wiring shorted to ground - Check continuity - Inspect for solder bridges --- #### 6. **Current Ramping Fails** ❌ **Symptom**: `test_current_ramping` fails midway **Root Causes**: - Load specification issue - Power supply can't deliver current - Thermal shutdown during ramp **Solutions**: 1. Use proper test load (resistor: 6-120Ω, 5W+) 2. Ensure power supply can deliver 2A+ 3. Monitor diagnostics during ramp 4. Add cooling if needed --- ### Debug Configuration #### Enable Verbose Logging In `sdkconfig`: ```ini CONFIG_LOG_DEFAULT_LEVEL_DEBUG=y CONFIG_ESP_SYSTEM_PANIC_PRINT_HALT=y ```text Or via menuconfig: ```bash idf.py menuconfig # Component config -> Log output -> Default log verbosity -> Debug ```text #### SPI Signal Analysis Use logic analyzer to verify: - **SCLK**: 1MHz square wave during transactions - **CS**: Active LOW during transactions - **MOSI/MISO**: Data patterns visible - **Timing**: Mode 0 (CPOL=0, CPHA=0) #### GPIO14 Monitoring Attach oscilloscope to GPIO14: - Should toggle after each test - Should show blink patterns at section boundaries - Indicates test progression even if serial output fails ## 📈 Performance Characteristics ### Typical Execution Times | Test | Expected Time | Max Time |------|--------------|----------| HAL Initialization | 10-15 ms | 50 ms | Driver Initialization | 20-30 ms | 100 ms | Chip ID Read | 5-10 ms | 20 ms | Channel Enable/Disable | 15-25 ms | 50 ms | Current Setting (4 values) | 40-60 ms | 100 ms | Diagnostics Read | 10-15 ms | 30 ms | Current Ramping | 60-80 ms | 150 ms | **Total Suite** | **200-250 ms** | **500 ms** | ### Memory Usage | Resource | Usage | Notes |----------|-------|-------| **Flash** | ~55KB | Driver + HAL + test framework | **RAM (static)** | ~12KB | Driver instance + buffers | **Stack (per task)** | 8KB | Configurable in `RUN_TEST_IN_TASK` | **Heap (dynamic)** | ~4KB | HAL instance + std::unique_ptr | ### SPI Performance - **Clock Frequency**: 1MHz (configurable 100kHz - 8MHz) - **Transaction Time**: ~32μs per 32-bit frame - **Register Read**: ~100μs (including overhead) - **Register Write**: ~80μs (including overhead) ## 🔗 Related Documentation ### ESP32 Examples - [Multi-Channel Test Suite](README_MULTI_CHANNEL.md) - Multiple channel control tests - [Test Framework Reference](/hf-tle92466ed-driver/development/examples/esp32/main/TLE92466ED_TestFramework.hpp) - Framework API - [Hardware Configuration](/hf-tle92466ed-driver/development/examples/esp32/main/TLE92466ED_Config.hpp) - Pin and parameter config - [ESP32-C6 HAL](/hf-tle92466ed-driver/development/examples/esp32/main/ESP32C6_HAL.hpp) - HAL implementation details ### Driver Documentation - [Driver API Reference](/hf-tle92466ed-driver/development/docs/07_Driver_API/) - Complete API documentation - [HAL Implementation Guide](/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/) - Porting to new platforms - [Register Map](/hf-tle92466ed-driver/development/docs/03_Register_Map/) - TLE92466ED register details - [Diagnostics](/hf-tle92466ed-driver/development/docs/06_Diagnostics/) - Fault detection and handling ### Build System - [App Configuration](/hf-tle92466ed-driver/development/examples/esp32/app_config.yml) - Build metadata - [CMake Setup](/hf-tle92466ed-driver/development/examples/esp32/CMakeLists.txt) - Build system configuration - [Component Structure](../components/tle92466ed-espidf/) - ESP-IDF component ## 🎓 Learning Path ### Beginner 1. ✅ **Start Here**: Basic Usage Test Suite 2. Run tests and observe GPIO14 indicators 3. Modify test current values 4. Try with different loads ### Intermediate 1. Modify `TLE92466ED_Config.hpp` for custom hardware 2. Add new test functions 3. Configure test sections 4. Analyze SPI signals with oscilloscope ### Advanced 1. Implement custom HAL for different MCU 2. Extend test framework for CI/CD 3. Create application-specific tests 4. Optimize performance and memory ## 📊 CI/CD Integration ### Structured Output The test suite produces structured output suitable for parsing: ```text [SUCCESS] PASSED (task): test_name (12.34 ms) [FAILED] FAILED (task): test_name (45.67 ms) ```text ### Exit Codes - **0**: All tests passed - **Non-zero**: Tests failed (after restart) ### Parsing Results ```bash # Extract pass/fail count grep \"Total Tests:\" output.log grep \"Success Rate:\" output.log # Check for failures grep \"\\[FAILED\\]\" output.log && echo \"Tests failed!\" || echo \"All passed!\" ```text --- **Example**: Basic Usage Test Suite **Platform**: ESP32-C6 **Framework**: FreeRTOS + Test Framework **Complexity**: ⭐⭐⭐☆☆ **Status**: ✅ Production Ready ",
    "url": "/hf-tle92466ed-driver/development/examples/esp32/docs/README_BASIC_USAGE.html",
    
    "relUrl": "/examples/esp32/docs/README_BASIC_USAGE.html"
  },"315": {
    "doc": "ESP32 Examples Configuration Guide",
    "title": "ESP32 Examples Configuration Guide",
    "content": "# ESP32 Examples Configuration Guide ## Overview This guide explains all configuration files and settings for the TLE92466ED ESP32 examples, including hardware configuration, build settings, and test options. ## 📁 Configuration File Structure ```text examples/esp32/ ├── app_config.yml # Build metadata and app definitions ├── main/ │ ├── TLE92466ED_Config.hpp # Hardware configuration (SPI, pins, limits) │ ├── BasicUsageExample.cpp # Test section flags │ └── MultiChannelExample.cpp # Test section flags ├── sdkconfig # ESP-IDF SDK configuration └── components/ └── tle92466ed-espidf/ ├── CMakeLists.txt # Component build config └── idf_component.yml # Component metadata ```text --- ## 1. Hardware Configuration (`main/TLE92466ED_Config.hpp`) ### Purpose **Centralized hardware-specific settings** for ESP32-C6 and TLE92466ED interface. ### Location ```text examples/esp32/main/TLE92466ED_Config.hpp ```text ### Complete Configuration ```cpp #pragma once #include namespace TLE92466ED_Config { //============================================================================= // SPI PIN CONFIGURATION //============================================================================= struct SPIPins { static constexpr int MISO = 2; // GPIO2 - SPI MISO static constexpr int MOSI = 7; // GPIO7 - SPI MOSI static constexpr int SCLK = 6; // GPIO6 - SPI Clock static constexpr int CS = 10; // GPIO10 - Chip Select }; //============================================================================= // SPI PARAMETERS //============================================================================= struct SPIParams { static constexpr int FREQUENCY = 1000000; // 1MHz SPI clock static constexpr int MODE = 0; // SPI Mode 0 (CPOL=0, CPHA=0) static constexpr int QUEUE_SIZE = 7; // Max transactions in queue }; //============================================================================= // CURRENT LIMITS //============================================================================= struct CurrentLimits { static constexpr uint16_t SINGLE_CHANNEL_MAX = 2000; // 2A per channel static constexpr uint16_t PARALLEL_CHANNEL_MAX = 4000; // 4A in parallel mode }; //============================================================================= // HARDWARE SPECIFICATIONS //============================================================================= struct HardwareSpecs { static constexpr float SUPPLY_VOLTAGE_MIN = 8.0f; // Minimum VBAT (V) static constexpr float SUPPLY_VOLTAGE_MAX = 28.0f; // Maximum VBAT (V) static constexpr int TEMPERATURE_MAX = 150; // Max junction temp (°C) }; //============================================================================= // TEST CONFIGURATION //============================================================================= struct TestConfig { static constexpr uint16_t TEST_CURRENT_STEPS[] = {100, 500, 1000, 1500, 2000}; static constexpr size_t TEST_CURRENT_STEPS_COUNT = sizeof(TEST_CURRENT_STEPS) / sizeof(TEST_CURRENT_STEPS[0]); static constexpr uint32_t TEST_DURATION_MS = 5000; static constexpr uint32_t DIAGNOSTICS_POLL_INTERVAL_MS = 100; }; } // namespace TLE92466ED_Config ```text ### Configuration Sections #### SPI Pins (`SPIPins`) | Setting | Default | Range | Notes |---------|---------|-------|-------| `MISO` | GPIO2 | Any GPIO | Data from TLE92466ED | `MOSI` | GPIO7 | Any GPIO | Data to TLE92466ED | `SCLK` | GPIO6 | Any GPIO | SPI clock output | `CS` | GPIO10 | Any GPIO | Chip select (active LOW) | **ESP32-C6 GPIO Considerations**: - Avoid GPIO0, GPIO8, GPIO9 (strapping pins) - GPIO12-GPIO13: JTAG (avoid if debugging) - GPIO15-GPIO20: USB Serial/JTAG - Recommended: GPIO2-GPIO11 for peripherals #### SPI Parameters (`SPIParams`) | Setting | Default | Range | Notes |---------|---------|-------|-------| `FREQUENCY` | 1000000 | 100000-8000000 | SPI clock (Hz) | `MODE` | 0 | 0-3 | SPI mode (TLE92466ED requires Mode 0) | `QUEUE_SIZE` | 7 | 1-10 | Transaction queue depth | **SPI Mode 0**: - CPOL = 0 (clock idle LOW) - CPHA = 0 (sample on rising edge) - **Required by TLE92466ED** - do not change! **Frequency Guidelines**: - **100kHz**: Debug/troubleshooting - **1MHz**: Default, reliable (recommended) - **2-4MHz**: Higher performance - **8MHz**: Maximum (may require shorter cables) #### Current Limits (`CurrentLimits`) | Setting | Default | Range | Notes |---------|---------|-------|-------| `SINGLE_CHANNEL_MAX` | 2000 | 0-2000 | Max per channel (mA) | `PARALLEL_CHANNEL_MAX` | 4000 | 0-4000 | Parallel mode max (mA) | **Safety Notes**: - TLE92466ED maximum: 2A per channel - Parallel mode: 4A across paired channels - Driver enforces these limits - Exceeding causes overcurrent fault #### Hardware Specs (`HardwareSpecs`) | Setting | Default | Range | Notes |---------|---------|-------|-------| `SUPPLY_VOLTAGE_MIN` | 8.0 | 8.0-28.0 | Minimum VBAT (V) | `SUPPLY_VOLTAGE_MAX` | 28.0 | 8.0-28.0 | Maximum VBAT (V) | `TEMPERATURE_MAX` | 150 | -40 to 150 | Max junction temp (°C) | **Operating Range** (per datasheet): - VBAT: 8V to 28V (typical: 12V or 24V automotive) - VDD: 3.0V to 5.5V (ESP32-C6: 3.3V) - Temperature: -40°C to 150°C junction #### Test Configuration (`TestConfig`) | Setting | Default | Notes |---------|---------|-------| `TEST_CURRENT_STEPS` | {100, 500, 1000, 1500, 2000} | Current test points (mA) | `TEST_DURATION_MS` | 5000 | Test duration (ms) | `DIAGNOSTICS_POLL_INTERVAL_MS` | 100 | Polling interval (ms) | **Used by test suites** for consistent test parameters. ### Modifying Hardware Configuration #### Example: Different GPIO Pins ```cpp struct SPIPins { static constexpr int MISO = 4; // Changed to GPIO4 static constexpr int MOSI = 5; // Changed to GPIO5 static constexpr int SCLK = 3; // Changed to GPIO3 static constexpr int CS = 11; // Changed to GPIO11 }; ```text #### Example: Higher SPI Frequency ```cpp struct SPIParams { static constexpr int FREQUENCY = 4000000; // 4MHz (higher performance) static constexpr int MODE = 0; static constexpr int QUEUE_SIZE = 7; }; ```text #### Example: Custom Test Currents ```cpp struct TestConfig { static constexpr uint16_t TEST_CURRENT_STEPS[] = {250, 750, 1250, 1750}; static constexpr size_t TEST_CURRENT_STEPS_COUNT = 4; static constexpr uint32_t TEST_DURATION_MS = 10000; // 10 seconds static constexpr uint32_t DIAGNOSTICS_POLL_INTERVAL_MS = 50; // 50ms }; ```text --- ## 2. Application Configuration (`app_config.yml`) ### Purpose **Build metadata and app definitions** for the dynamic build system. ### Location ```text examples/esp32/app_config.yml ```text ### Structure ```yaml apps: basic_usage: description: \"Basic usage example for TLE92466ED\" source_file: \"BasicUsageExample.cpp\" category: \"demo\" idf_versions: [\"release/v5.5\"] build_types: [\"Debug\", \"Release\"] ci_enabled: true featured: true documentation: \"docs/README_BASIC_USAGE.md\" multi_channel: description: \"Multi-channel control example for TLE92466ED\" source_file: \"MultiChannelExample.cpp\" category: \"demo\" idf_versions: [\"release/v5.5\"] build_types: [\"Debug\", \"Release\"] ci_enabled: true featured: true documentation: \"docs/README_MULTI_CHANNEL.md\" ```text ### App Definition Fields | Field | Type | Required | Description |-------|------|----------|-------------| `description` | string | Yes | Human-readable description | `source_file` | string | Yes | Main source file in `main/` | `category` | string | Yes | Category: `demo`, `test`, `application` | `idf_versions` | list | Yes | Compatible ESP-IDF versions | `build_types` | list | Yes | Supported build types | `ci_enabled` | bool | Yes | Enable in CI/CD pipeline | `featured` | bool | No | Feature in documentation | `documentation` | string | No | Path to documentation file | ### Build Types #### Debug ```yaml build_types: [\"Debug\"] ```text - **Optimization**: `-Og` (debug-friendly) - **Symbols**: Full debug symbols - **Assertions**: Enabled - **Size**: Larger binaries - **Speed**: Slower execution - **Use**: Development, debugging #### Release ```yaml build_types: [\"Release\"] ```text - **Optimization**: `-O2` (performance) - **Symbols**: Minimal symbols - **Assertions**: Disabled - **Size**: Smaller binaries - **Speed**: Faster execution - **Use**: Production, benchmarking ### IDF Versions ```yaml idf_versions: - \"release/v5.5\" # ESP-IDF v5.5.x (recommended) - \"release/v5.4\" # ESP-IDF v5.4.x (compatible) - \"release/v5.3\" # ESP-IDF v5.3.x (minimum) ```text **Requirements**: - **Minimum**: ESP-IDF v5.3 (C++23 support) - **Recommended**: ESP-IDF v5.5 (latest features) ### Adding a New App ```yaml apps: my_custom_app: description: \"My custom TLE92466ED application\" source_file: \"MyCustomApp.cpp\" category: \"application\" idf_versions: [\"release/v5.5\"] build_types: [\"Debug\", \"Release\"] ci_enabled: false featured: false documentation: \"docs/README_MY_CUSTOM_APP.md\" ```text Then create: ```text examples/esp32/main/MyCustomApp.cpp examples/esp32/docs/README_MY_CUSTOM_APP.md ```text --- ## 3. Test Section Configuration ### Purpose **Compile-time enable/disable** of test sections. ### Location In each example source file (e.g., `BasicUsageExample.cpp`): ```cpp //============================================================================= // TEST CONFIGURATION //============================================================================= #define ENABLE_INITIALIZATION_TESTS 1 #define ENABLE_BASIC_OPERATION_TESTS 1 #define ENABLE_CURRENT_CONTROL_TESTS 1 ```text ### Test Sections | Section | Purpose | Tests |---------|---------|-------| `INITIALIZATION_TESTS` | HAL and driver setup | HAL init, driver init, chip ID | `BASIC_OPERATION_TESTS` | Core operations | Enable/disable, current setting, diagnostics | `CURRENT_CONTROL_TESTS` | Advanced control | Current ramping, multi-channel | ### Disabling Sections Set to `0` to disable: ```cpp #define ENABLE_INITIALIZATION_TESTS 1 // Enabled #define ENABLE_BASIC_OPERATION_TESTS 1 // Enabled #define ENABLE_CURRENT_CONTROL_TESTS 0 // DISABLED ```text **Benefits**: - Faster iteration during development - Focus on specific features - Reduce test time - Save memory if needed ### Usage in Code ```cpp RUN_TEST_SECTION_IF_ENABLED( ENABLE_INITIALIZATION_TESTS, \"INITIALIZATION TESTS\", // Tests only run if flag is 1 RUN_TEST_IN_TASK(\"hal_init\", test_hal_initialization, 8192, 5); ); ```text --- ## 4. ESP-IDF SDK Configuration (`sdkconfig`) ### Purpose **ESP-IDF framework configuration** - compiler, components, features. ### Location ```text examples/esp32/sdkconfig ```text ### Key Settings #### Compiler Optimization ```ini CONFIG_COMPILER_OPTIMIZATION_SIZE=n CONFIG_COMPILER_OPTIMIZATION_PERF=y CONFIG_COMPILER_OPTIMIZATION_DEBUG=n ```text **Options**: - `SIZE`: Optimize for size (`-Os`) - `PERF`: Optimize for performance (`-O2`) **← Default** - `DEBUG`: Optimize for debugging (`-Og`) #### C++ Standard ```ini CONFIG_COMPILER_CXX_STD_GNUXX23=y ```text **Required**: TLE92466ED driver uses C++23 features (`std::expected`) #### Log Level ```ini CONFIG_LOG_DEFAULT_LEVEL_INFO=y CONFIG_LOG_DEFAULT_LEVEL_DEBUG=n ```text **Options**: - `NONE`: No logging - `ERROR`: Errors only - `WARN`: Warnings and errors - `INFO`: Information, warnings, errors **← Default** - `DEBUG`: Debug + all above - `VERBOSE`: Verbose + all above #### Stack Sizes ```ini CONFIG_ESP_MAIN_TASK_STACK_SIZE=8192 CONFIG_ESP_SYSTEM_EVENT_TASK_STACK_SIZE=4096 ```text **Recommendations**: - Main task: 8KB (default sufficient) - Increase if stack overflow errors occur #### FreeRTOS ```ini CONFIG_FREERTOS_HZ=1000 CONFIG_FREERTOS_USE_TRACE_FACILITY=y CONFIG_FREERTOS_GENERATE_RUN_TIME_STATS=y ```text **Important**: - `HZ=1000`: 1ms tick resolution (for accurate timing) - Trace facility: Useful for debugging ### Modifying sdkconfig #### Via menuconfig (Interactive) ```bash cd examples/esp32 idf.py menuconfig ```text Navigate with arrow keys, space to select, 'S' to save. #### Via sdkconfig.defaults Create `sdkconfig.defaults`: ```ini # Custom defaults CONFIG_COMPILER_OPTIMIZATION_PERF=y CONFIG_LOG_DEFAULT_LEVEL_DEBUG=y CONFIG_ESP_MAIN_TASK_STACK_SIZE=16384 ```text Then: ```bash idf.py fullclean idf.py reconfigure ```text --- ## 5. Component Configuration ### Component CMakeLists.txt **Location**: `examples/esp32/components/tle92466ed-espidf/CMakeLists.txt` ```cmake # Source resolution (automatic) if(EXISTS \"${PROJECT_ROOT}/src\" AND EXISTS \"${PROJECT_ROOT}/include\") set(SRC_ROOT \"${PROJECT_ROOT}\") # CI environment else() get_filename_component(SRC_ROOT \"${CMAKE_SOURCE_DIR}/../../\" ABSOLUTE) endif() # Source files set(TLE92466ED_SRCS \"${SRC_ROOT}/src/TLE92466ED.cpp\" ) # Component registration idf_component_register( SRCS ${EXISTING_SRCS} INCLUDE_DIRS \"${SRC_ROOT}/include\" REQUIRES driver esp_timer freertos esp_driver_spi ) # C++23 standard target_compile_features(${COMPONENT_LIB} PRIVATE cxx_std_23) ```text **Key Points**: - Automatically finds driver sources - Handles CI and development paths - C++23 required - No manual source list maintenance ### Component Manifest (idf_component.yml) **Location**: `examples/esp32/components/tle92466ed-espidf/idf_component.yml` ```yaml name: tle92466ed-driver version: \"2.0.0\" description: TLE92466ED driver for ESP-IDF dependencies: idf: \">=5.0.0\" targets: - esp32c6 - esp32 - esp32s3 - esp32c3 ```text **Purpose**: ESP-IDF Component Manager metadata --- ## 🔧 Configuration Workflows ### Development Setup 1. **Clone repository** ```bash git clone https://github.com/N3b3x/hf-tle92466ed-driver.git cd hf-tle92466ed-driver/examples/esp32 ``` 2. **Initialize submodules** ```bash git submodule update --init --recursive ``` 3. **Configure hardware** (if needed) ```bash nano main/TLE92466ED_Config.hpp # Modify SPI pins, frequency, etc. ``` 4. **Set ESP-IDF target** ```bash idf.py set-target esp32c6 ``` 5. **Configure SDK** (optional) ```bash idf.py menuconfig ``` 6. **Build** ```bash ./scripts/build_app.sh basic_usage Debug ``` ### Production Setup 1. **Use Release build** ```bash ./scripts/build_app.sh basic_usage Release ``` 2. **Optimize sdkconfig** ```ini CONFIG_COMPILER_OPTIMIZATION_PERF=y CONFIG_LOG_DEFAULT_LEVEL_WARN=y CONFIG_BOOTLOADER_LOG_LEVEL_WARN=y ``` 3. **Disable debug features** ```cpp #define ENABLE_DEBUG_LOGGING 0 #define ENABLE_STRESS_TESTS 0 ``` 4. **Verify settings** ```bash idf.py size idf.py size-components ``` ### Troubleshooting Configuration #### GPIO Conflict **Error**: `GPIO already in use` **Solution**: Change pins in `TLE92466ED_Config.hpp`: ```cpp struct SPIPins { static constexpr int MISO = 4; // Try different GPIO // ... }; ```text #### SPI Communication Failure **Error**: `Failed to initialize HAL` **Solutions**: 1. Check frequency: Lower to 100kHz for testing 2. Verify wiring matches configuration 3. Try different SPI host (SPI2_HOST vs SPI3_HOST) #### Stack Overflow **Error**: `***ERROR*** A stack overflow in task` **Solutions**: 1. Increase task stack in `RUN_TEST_IN_TASK`: ```cpp RUN_TEST_IN_TASK(\"test\", test_func, 16384, 5); // 16KB ``` 2. Increase main stack in sdkconfig: ```ini CONFIG_ESP_MAIN_TASK_STACK_SIZE=16384 ``` #### Build Type Issues **Error**: Unexpected optimization level **Solution**: ```bash # Clean and rebuild with explicit build type idf.py fullclean idf.py -DCMAKE_BUILD_TYPE=Debug build ```text --- ## 📚 Configuration Reference ### File Purposes Summary | File | Purpose | When to Modify |------|---------|----------------| `TLE92466ED_Config.hpp` | Hardware settings | Different GPIO/hardware | `app_config.yml` | Build metadata | Add new app/example | `BasicUsageExample.cpp` (flags) | Test sections | Enable/disable tests | `sdkconfig` | ESP-IDF settings | Compiler/framework config | `components/.../CMakeLists.txt` | Component build | Never (auto-configured) | `components/.../idf_component.yml` | Component metadata | Version/dependency changes | ### Configuration Hierarchy ```text Hardware Layer └── TLE92466ED_Config.hpp (SPI pins, frequencies, limits) Application Layer ├── app_config.yml (Build metadata, app list) └── *Example.cpp (Test section flags) Framework Layer ├── sdkconfig (ESP-IDF configuration) └── components/ (Component configuration) ```text --- **Document Version**: 1.0.0 **Last Updated**: 2025-10-21 **Status**: ✅ Complete ",
    "url": "/hf-tle92466ed-driver/development/examples/esp32/docs/README_CONFIGURATION.html",
    
    "relUrl": "/examples/esp32/docs/README_CONFIGURATION.html"
  },"316": {
    "doc": "TLE92466ED Test Framework Documentation",
    "title": "TLE92466ED Test Framework Documentation",
    "content": "# TLE92466ED Test Framework Documentation ## Overview The **TLE92466ED Test Framework** (`TLE92466ED_TestFramework.hpp`) provides professional testing infrastructure for ESP32-based examples, adapted from the HardFOC Internal Interface Wrap test framework. ## 🎯 Purpose - **Structured Testing**: Organize tests into logical sections - **Automatic Tracking**: Pass/fail counting and execution timing - **Visual Feedback**: GPIO14 progress indicator - **Task Isolation**: FreeRTOS task-based execution - **CI/CD Ready**: Structured output for automated testing ## 📚 Framework Components ### 1. GPIO14 Test Progression Indicator #### Purpose Provides **hardware-level visual feedback** showing test progression on oscilloscope, logic analyzer, or LED. #### Functions ```cpp bool init_test_progress_indicator() noexcept; ```text **Initialize GPIO14** as output for test progression indicator - Configures GPIO14 as push-pull output - Sets initial state to LOW - Returns `true` on success ```cpp void flip_test_progress_indicator() noexcept; ```text **Toggle GPIO14** state to indicate test completion - Alternates between HIGH and LOW - Called automatically after each test - 50ms delay for visual effect ```cpp void output_section_indicator(uint8_t blink_count = 5) noexcept; ```text **Blink GPIO14** to indicate section boundaries - Default: 5 blinks (50ms ON, 50ms OFF each) - Custom blink count for different sections - Marks state as LOW after completion ```cpp void cleanup_test_progress_indicator() noexcept; ```text **Cleanup and reset** GPIO14 - Sets pin to LOW - Resets pin configuration - Called before system restart #### Signal Patterns ```text Section Start: ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ └─┘ └─┘ └─┘ └─┘ └─┘ (5 blinks, 50ms each) Test Complete: ┌─────────────┐ (Toggle HIGH) └─────────────┘ Next Test: ──────────────── (Toggle LOW) ```text #### Hardware Setup ```text ESP32-C6 GPIO14 ──┬── LED Anode │ └── LED Cathode ── 220Ω ── GND │ └── Oscilloscope/Logic Analyzer Probe ```text --- ### 2. Test Result Tracking #### TestResults Structure ```cpp struct TestResults { int total_tests; // Total number of tests run int passed_tests; // Number of tests passed int failed_tests; // Number of tests failed uint64_t total_execution_time_us; // Total execution time (μs) void add_result(bool passed, uint64_t execution_time) noexcept; double get_success_percentage() const noexcept; double get_total_time_ms() const noexcept; void print_summary(const char* tag) const noexcept; }; ```text #### Global Instance ```cpp static TestResults g_test_results; ```text Automatically accumulates results from all tests. Accessed via macros. #### Methods **`add_result(passed, execution_time)`** - Records test result - Updates pass/fail counters - Accumulates execution time - Called automatically by test macros **`get_success_percentage()`** - Returns success rate (0.0 to 100.0) - Handles division by zero **`get_total_time_ms()`** - Returns total execution time in milliseconds - Converts from microseconds **`print_summary(tag)`** - Prints professional formatted summary: ```text ╔══════════════════════════════════════════════════════════════════╗ ║ TEST RESULTS SUMMARY ║ ╠══════════════════════════════════════════════════════════════════╣ ║ Total Tests: 7 ║ ║ Passed: 7 ║ ║ Failed: 0 ║ ║ Success Rate: 100.00% ║ ║ Total Time: 234.56 ms ║ ╚══════════════════════════════════════════════════════════════════╝ ```text --- ### 3. Test Execution Macros #### RUN_TEST(test_func) **Inline test execution** (no separate task) ```cpp RUN_TEST(test_hal_initialization); ```text **Features**: - Executes test in current task context - Prints formatted header - Measures execution time (microseconds) - Records result in `g_test_results` - Flips GPIO14 on completion - 100ms delay after test **Use Case**: Simple tests that don't need large stack or isolation **Output**: ```text ╔══════════════════════════════════════════════════════════════════╗ ║ Running: test_hal_initialization ╚══════════════════════════════════════════════════════════════════╝ [SUCCESS] PASSED: test_hal_initialization (12.34 ms) ```text --- #### RUN_TEST_IN_TASK(name, func, stack_size_bytes, priority) **FreeRTOS task-based test execution** ```cpp RUN_TEST_IN_TASK(\"hal_init\", test_hal_initialization, 8192, 5); ```text **Parameters**: - `name`: Test name string (for logging) - `func`: Test function pointer (`bool (*)() noexcept`) - `stack_size_bytes`: Task stack size (e.g., `8192` = 8KB) - `priority`: FreeRTOS task priority (`1-5`, typical: `5`) **Features**: - Executes test in **isolated FreeRTOS task** - Custom stack size per test - Automatic semaphore synchronization - **30-second timeout** protection - Fallback to inline execution on task creation failure - Waits for test completion before continuing - 100ms delay between tests **Use Case**: Complex tests needing large stack or isolation **Task Management**: ```cpp struct TestTaskContext { const char* test_name; bool (*test_func)() noexcept; TestResults* results; const char* tag; SemaphoreHandle_t completion_semaphore; }; void test_task_trampoline(void* param); ```text **Output**: ```text ╔══════════════════════════════════════════════════════════════════╗ ║ Running (task): hal_init ╚══════════════════════════════════════════════════════════════════╝ [SUCCESS] PASSED (task): hal_init (12.34 ms) Test task completed: hal_init ```text **Timeout Handling**: ```cpp if (xSemaphoreTake(semaphore, pdMS_TO_TICKS(30000)) == pdTRUE) { // Test completed } else { ESP_LOGW(TAG, \"Test task timeout: %s\", name); // Still records result, continues to next test } ```text --- #### RUN_TEST_SECTION_IF_ENABLED(enabled, section_name, ...) **Conditional test section execution** ```cpp RUN_TEST_SECTION_IF_ENABLED( ENABLE_INITIALIZATION_TESTS, \"INITIALIZATION TESTS\", RUN_TEST_IN_TASK(\"hal_init\", test_hal_initialization, 8192, 5); RUN_TEST_IN_TASK(\"driver_init\", test_driver_initialization, 8192, 5); ); ```text **Parameters**: - `enabled`: Compile-time flag (`0` or `1`) - `section_name`: Display name for section - `...`: Test calls (variadic) **Features**: - **Compile-time** section enable/disable - Professional section header - **5-blink pattern** on GPIO14 at section start - Wraps multiple test calls **Output**: ```text ╔══════════════════════════════════════════════════════════════════╗ ║ SECTION: INITIALIZATION TESTS ║ ╚══════════════════════════════════════════════════════════════════╝ [GPIO14: 5 blinks] ... tests ... ```text --- #### RUN_TEST_SECTION_IF_ENABLED_WITH_PATTERN(enabled, section_name, blink_count, ...) **Conditional test section with custom blink pattern** ```cpp RUN_TEST_SECTION_IF_ENABLED_WITH_PATTERN( ENABLE_ADVANCED_TESTS, \"ADVANCED TESTS\", 3, // Custom 3-blink pattern RUN_TEST_IN_TASK(\"advanced_test\", test_advanced, 16384, 5); ); ```text **Parameters**: - `enabled`: Compile-time flag - `section_name`: Display name - `blink_count`: Custom blink count for this section - `...`: Test calls **Use Case**: Differentiate sections by blink pattern on oscilloscope --- ### 4. Test Section Configuration #### print_test_section_status(tag, module_name) Prints configuration information at test start: ```cpp print_test_section_status(TAG, \"TLE92466ED\"); ```text **Output**: ```text ╔══════════════════════════════════════════════════════════════════╗ ║ TLE92466ED TEST CONFIGURATION ╠══════════════════════════════════════════════════════════════════╣ ║ Test sections will execute based on compile-time configuration ║ ║ GPIO14 test progression indicator: ENABLED ║ ╚══════════════════════════════════════════════════════════════════╝ ```text --- ## 🔧 Usage Guide ### Basic Setup #### 1. Include Framework ```cpp #include \"TLE92466ED_TestFramework.hpp\" static const char* TAG = \"MyTest\"; ```text #### 2. Define Test Sections ```cpp #define ENABLE_BASIC_TESTS 1 #define ENABLE_ADVANCED_TESTS 1 #define ENABLE_STRESS_TESTS 0 // Disabled ```text #### 3. Write Test Functions ```cpp static bool test_my_feature() noexcept { ESP_LOGI(TAG, \"Testing my feature...\"); // Test logic here bool result = some_operation(); if (result) { ESP_LOGI(TAG, \"✅ Feature works!\"); return true; } else { ESP_LOGE(TAG, \"❌ Feature failed!\"); return false; } } ```text **Requirements**: - Return type: `bool` - `noexcept` specifier - `true` = passed, `false` = failed #### 4. Create app_main() ```cpp extern \"C\" void app_main() { // Print header ESP_LOGI(TAG, \"╔════════════════════════════════════╗\"); ESP_LOGI(TAG, \"║ MY TEST SUITE ║\"); ESP_LOGI(TAG, \"╚════════════════════════════════════╝\"); // Initialize GPIO14 init_test_progress_indicator(); // Print configuration print_test_section_status(TAG, \"MY_MODULE\"); // Run test sections RUN_TEST_SECTION_IF_ENABLED( ENABLE_BASIC_TESTS, \"BASIC TESTS\", RUN_TEST_IN_TASK(\"my_feature\", test_my_feature, 8192, 5); ); // Print results g_test_results.print_summary(TAG); // Cleanup cleanup_test_progress_indicator(); // Status message if (g_test_results.failed_tests == 0) { ESP_LOGI(TAG, \"✅ ALL TESTS PASSED!\"); } else { ESP_LOGE(TAG, \"❌ %d TESTS FAILED!\", g_test_results.failed_tests); } vTaskDelay(pdMS_TO_TICKS(10000)); esp_restart(); } ```text --- ## 📊 Advanced Usage ### Custom Test Context For tests that need shared resources: ```cpp // Global resources static MyDriver* g_driver = nullptr; static bool test_with_driver() noexcept { if (!g_driver) { ESP_LOGE(TAG, \"Driver not initialized\"); return false; } // Use driver return g_driver->doSomething(); } ```text ### Stack Size Guidelines | Test Complexity | Stack Size | Notes |----------------|-----------|-------| Simple | 4096 (4KB) | Basic operations, minimal locals | Normal | 8192 (8KB) | Standard tests (default) | Complex | 12288 (12KB) | Multiple buffers, recursion | Heavy | 16384 (16KB) | Large objects, deep call chains | ### Priority Guidelines | Priority | Use Case |----------|----------| 1-2 | Low priority background tests | 3-4 | Normal test priority | 5 | **Default**, standard tests | 6-10 | High priority, time-critical tests | ### Timeout Considerations Default timeout: **30 seconds** Modify in framework if needed: ```cpp if (xSemaphoreTake(ctx.completion_semaphore, pdMS_TO_TICKS(60000))) { // 60-second timeout for slow tests } ```text --- ## 🎯 Best Practices ### 1. Test Organization ```cpp // Group related tests RUN_TEST_SECTION_IF_ENABLED( ENABLE_INITIALIZATION_TESTS, \"INITIALIZATION\", RUN_TEST_IN_TASK(\"hal\", test_hal_init, 8192, 5); RUN_TEST_IN_TASK(\"driver\", test_driver_init, 8192, 5); ); RUN_TEST_SECTION_IF_ENABLED( ENABLE_OPERATION_TESTS, \"OPERATIONS\", RUN_TEST_IN_TASK(\"read\", test_read, 8192, 5); RUN_TEST_IN_TASK(\"write\", test_write, 8192, 5); ); ```text ### 2. Clear Logging ```cpp static bool test_feature() noexcept { ESP_LOGI(TAG, \"Starting feature test...\"); ESP_LOGI(TAG, \"Step 1: Initialize\"); ESP_LOGI(TAG, \"Step 2: Execute\"); ESP_LOGI(TAG, \"Step 3: Verify\"); ESP_LOGI(TAG, \"✅ Feature test passed\"); return true; } ```text ### 3. Error Reporting ```cpp static bool test_operation() noexcept { if (auto result = do_operation(); !result) { ESP_LOGE(TAG, \"❌ Operation failed: %s\", result.error()); return false; } return true; } ```text ### 4. Resource Cleanup ```cpp extern \"C\" void app_main() { // Setup init_test_progress_indicator(); auto* resource = create_resource(); // Tests RUN_TEST_SECTION_IF_ENABLED(...); // Cleanup (ALWAYS!) delete resource; cleanup_test_progress_indicator(); g_test_results.print_summary(TAG); } ```text --- ## 📈 Performance Impact ### Memory Overhead | Component | Flash | RAM |-----------|-------|-----| Framework Code | ~8KB | ~2KB | Test Results | 0 | 32 bytes | Per Test Context | 0 | ~64 bytes (temporary) | GPIO14 State | 0 | 3 bytes | **Total** | **~8KB** | **~2KB + 64B per active task** | ### Timing Overhead | Operation | Time |-----------|------| Test Header Print | ~5ms | GPIO14 Toggle | ~50μs | GPIO14 Blink (5x) | ~500ms | Semaphore Operations | ~10μs | Result Recording | ~1μs | **Per Test Overhead** | **~5-10ms** | --- ## 🔍 Debugging ### Enable Framework Debug Output ```cpp #define TEST_FRAMEWORK_DEBUG 1 // In framework functions: #ifdef TEST_FRAMEWORK_DEBUG ESP_LOGI(\"TestFramework\", \"Debug info...\"); #endif ```text ### Monitor GPIO14 ```bash # Logic analyzer configuration Sample Rate: 1MHz Duration: 10s Trigger: Rising edge on GPIO14 ```text ### Analyze Test Timing ```cpp // Parse output for timing data grep \"PASSED\" output.log | awk '{print $NF}' ```text --- ## 🔗 Integration with CI/CD ### Structured Output Parsing ```bash #!/bin/bash # Extract results TOTAL=$(grep \"Total Tests:\" output.log | awk '{print $3}') PASSED=$(grep \"Passed:\" output.log | awk '{print $2}') FAILED=$(grep \"Failed:\" output.log | awk '{print $2}') SUCCESS_RATE=$(grep \"Success Rate:\" output.log | awk '{print $3}') # Exit code if [ \"$FAILED\" -gt 0 ]; then echo \"TESTS FAILED: $FAILED/$TOTAL\" exit 1 else echo \"ALL TESTS PASSED: $PASSED/$TOTAL ($SUCCESS_RATE)\" exit 0 fi ```text ### GitHub Actions Example ```yaml - name: Run Tests run: | ./scripts/flash_app.sh basic_usage Debug ./scripts/monitor_app.sh basic_usage > output.log - name: Parse Results run: | if grep \"\\[FAILED\\]\" output.log; then echo \"Tests failed!\" exit 1 fi ```text --- ## 📚 References - [BasicUsageExample.cpp](/hf-tle92466ed-driver/development/examples/esp32/main/BasicUsageExample.cpp) - Example implementation - [HardFOC Internal TestFramework.h]( ../../../../internal/hf-internal-interface-wrap/examples/esp32/main/TestFramework.h) - Original framework --- **Framework Version**: 1.0.0 **Based on**: HardFOC Internal Interface Wrap TestFramework.h **Platform**: ESP32 (ESP-IDF v5.0+) **Status**: ✅ Production Ready ",
    "url": "/hf-tle92466ed-driver/development/examples/esp32/docs/README_TEST_FRAMEWORK.html",
    
    "relUrl": "/examples/esp32/docs/README_TEST_FRAMEWORK.html"
  },"317": {
    "doc": "TLE92466ED Arduino Examples",
    "title": "TLE92466ED Arduino Examples",
    "content": "# TLE92466ED Arduino Examples ## 📚 Overview Professional Arduino examples for the TLE92466ED Six-Channel Low-Side Solenoid Driver using the **TLE92466ED Evaluation Board**. These examples demonstrate driver integration on Arduino platforms with the same high-quality standards as the ESP32 examples. ## 🎯 Features - ✅ **Arduino HAL Implementation** - Standard Arduino SPI library integration - ✅ **TLE92466ED Evaluation Board Support** - Optimized for official eval board - ✅ **Multi-Board Compatibility** - Works with Uno, Mega, Due, Zero, and more - ✅ **Professional Code** - Modern C++17, clean architecture - ✅ **Comprehensive Examples** - Basic usage, diagnostics, multi-channel control - ✅ **Easy Setup** - Standard Arduino IDE or PlatformIO - ✅ **Well Documented** - Complete guides and troubleshooting --- ## 🛠️ Hardware Requirements ### Required Components 1. **Arduino Board** (choose one): - Arduino Uno / Nano (ATmega328P) - **Most common** - Arduino Mega 2560 (ATmega2560) - **Recommended for complex projects** - Arduino Due (SAM3X8E) - **3.3V, high performance** - Arduino Zero / M0 (SAMD21) - **3.3V, modern ARM** - Any Arduino-compatible board with SPI support 2. **TLE92466ED Evaluation Board**: - Part Number: TLE92466ED-EVALBOARD - [Product Page](https://www.infineon.com/evaluation-board/TLE92466ED-EVALBOARD) - Includes TLE92466ED IC, connectors, and test points 3. **Power Supply**: - **VBAT**: 12-24V DC power supply (2A minimum recommended) - **Logic**: Arduino provides 5V (or 3.3V for 3.3V boards) 4. **Test Load** (choose one): - **Solenoid valve**: 12V/24V automotive solenoid - **Resistive load**: 6-120Ω power resistor (5W+) - **LED**: High-power LED with current limiting 5. **Connecting Wires**: - Jumper wires for Arduino connections - Power cables for VBAT supply - Load connection wires ### Optional Components - **Oscilloscope / Logic Analyzer**: For SPI signal verification - **Multimeter**: For voltage/current measurements - **Breadboard**: For prototype connections - **Heatsink**: For TLE92466ED if running at high currents --- ## 🔌 Hardware Connections ### Arduino Uno / Nano Pinout ```text TLE92466ED Evalboard Arduino Uno/Nano Function ---------------------- ---------------- -------- MISO --> Pin 12 (MISO) SPI Data In MOSI --> Pin 11 (MOSI) SPI Data Out SCK --> Pin 13 (SCK) SPI Clock CS (Chip Select) --> Pin 10 (SS) Chip Select EN (Enable) --> Pin 9 Device Enable RESN (Reset) --> Pin 8 Hardware Reset VDD --> 5V Logic Supply (5V) VIO --> 5V I/O Supply (5V) GND --> GND Ground ```text ### Arduino Mega 2560 Pinout ```text TLE92466ED Evalboard Arduino Mega Function ---------------------- ---------------- -------- MISO --> Pin 50 (MISO) SPI Data In MOSI --> Pin 51 (MOSI) SPI Data Out SCK --> Pin 52 (SCK) SPI Clock CS (Chip Select) --> Pin 53 (SS) Chip Select EN (Enable) --> Pin 9 Device Enable RESN (Reset) --> Pin 8 Hardware Reset VDD --> 5V Logic Supply (5V) VIO --> 5V I/O Supply (5V) GND --> GND Ground ```text ### Arduino Due Pinout (3.3V Logic) ```text TLE92466ED Evalboard Arduino Due Function ---------------------- ---------------- -------- MISO --> ICSP MISO SPI Data In MOSI --> ICSP MOSI SPI Data Out SCK --> ICSP SCK SPI Clock CS (Chip Select) --> Pin 10 Chip Select EN (Enable) --> Pin 9 Device Enable RESN (Reset) --> Pin 8 Hardware Reset VDD --> 3.3V Logic Supply (3.3V) VIO --> 3.3V I/O Supply (3.3V) GND --> GND Ground ```text **⚠️ IMPORTANT for 3.3V boards**: TLE92466ED VIO must match your Arduino logic level! ### Power Supply Connections ```text External 12-24V Supply TLE92466ED Evalboard ---------------------- -------------------- +12V to +24V --> VBAT GND --> GND (power ground) ⚠️ Connect Arduino GND to TLE92466ED GND for common ground! ```text ### Load Connections ```text Load TLE92466ED Evalboard ---- -------------------- Load Positive (+) --> OUT0 (or OUT1-OUT5) Load Negative (-) --> Load return terminal ```text --- ## 📦 Software Requirements ### Arduino IDE Setup **Minimum Requirements**: - Arduino IDE 1.8.13 or later - Arduino IDE 2.0+ **recommended** (better C++17 support) **Library Dependencies**: - `SPI.h` (built-in) - No external libraries required! ### PlatformIO Setup (Alternative) **Recommended for professional development**: ```ini [env:uno] platform = atmelavr board = uno framework = arduino build_flags = -std=gnu++17 -Wall -Wextra lib_deps = SPI [env:mega2560] platform = atmelavr board = megaatmega2560 framework = arduino build_flags = -std=gnu++17 -Wall -Wextra [env:due] platform = atmelsam board = due framework = arduino build_flags = -std=gnu++17 -Wall -Wextra ```text --- ## 🚀 Quick Start ### Step 1: Hardware Setup 1. **Connect TLE92466ED Evalboard to Arduino** following pinout above 2. **Connect VBAT** 12-24V external power supply to evalboard 3. **Connect test load** to evalboard OUT0 4. **Connect Arduino** to computer via USB 5. **Verify all connections** - especially common ground! ### Step 2: Arduino IDE Setup 1. **Download the driver**: ```bash git clone https://github.com/N3b3x/hf-tle92466ed-driver.git ``` 2. **Open example in Arduino IDE**: - Open: `hf-tle92466ed-driver/examples/arduino/BasicUsageExample/BasicUsageExample.ino` 3. **Add driver files to sketch**: - **Option A** (Recommended): Create symlinks in sketch folder: ```bash cd BasicUsageExample ln -s ../../../include include ln -s ../Arduino_HAL.hpp Arduino_HAL.hpp ``` - **Option B**: Copy files to sketch folder: ```bash cp -r ../../include BasicUsageExample/ cp ../Arduino_HAL.hpp BasicUsageExample/ ``` ### Step 3: Configure for Your Board Edit pin assignments in `BasicUsageExample.ino` if needed: ```cpp // In initializeHAL() function: Arduino_HAL::SPIConfig config; config.cs_pin = 10; // Change if using different pin config.en_pin = 9; // Change if using different pin config.resn_pin = 8; // Change if using different pin ```text **For Arduino Mega**, change CS pin: ```cpp config.cs_pin = 53; // Mega SS pin ```text ### Step 4: Compile and Upload 1. **Select your board**: Tools → Board → [Your Arduino] 2. **Select COM port**: Tools → Port → [Your port] 3. **Click Upload** (or press Ctrl+U) ### Step 5: Monitor Serial Output 1. **Open Serial Monitor**: Tools → Serial Monitor 2. **Set baud rate**: 115200 3. **Watch the demo execute**! --- ## 📊 Example Output ### Successful Execution ```text ╔══════════════════════════════════════════════════════════════╗ ║ TLE92466ED Basic Usage Example - Arduino Platform ║ ║ HardFOC Core Drivers v2.0.0 ║ ╚══════════════════════════════════════════════════════════════╝ === HAL Initialization === Creating Arduino HAL instance... CS Pin: 10 EN Pin: 9 RESN Pin: 8 SPI Frequency: 1000000 Hz SPI Mode: 0 Initializing HAL... ✅ HAL initialized successfully === Driver Initialization === Creating TLE92466ED driver instance... Initializing driver... ✅ Driver initialized successfully === Communication Verification === Reading chip identification... ✅ Chip ID: 0x123456789ABC Communication verified! ╔══════════════════════════════════════════════════════════════╗ ║ Initialization Complete - Starting Demo ║ ╚══════════════════════════════════════════════════════════════╝ ╔══════════════════════════════════════════════════════════════╗ ║ Basic Channel Control Demo ║ ╚══════════════════════════════════════════════════════════════╝ Setting channel 0 to 500 mA... ✅ Current set successfully Enabling channel 0... ✅ Channel enabled Disabling channel 0... ✅ Channel disabled ╔══════════════════════════════════════════════════════════════╗ ║ Current Ramping Demo ║ ╚══════════════════════════════════════════════════════════════╝ Enabling channel for ramping... Ramping up from 100 to 1000 mA... Current: 100 mA Current: 200 mA Current: 300 mA ... Ramping down from 1000 to 100 mA..... ✅ Ramping complete ╔══════════════════════════════════════════════════════════════╗ ║ Diagnostics Demo ║ ╚══════════════════════════════════════════════════════════════╝ Reading diagnostics (5 samples)... Sample 1/5: ✅ All systems normal Sample 2/5: ✅ All systems normal ... ╔══════════════════════════════════════════════════════════════╗ ║ Demo Complete - Restarting Sequence ║ ╚══════════════════════════════════════════════════════════════╝ ```text --- ## 🔍 Available Examples ### 1. BasicUsageExample ⭐ **File**: `BasicUsageExample/BasicUsageExample.ino` **Features**: - HAL and driver initialization - SPI communication verification - Single channel control (enable/disable) - Current setting and ramping - Basic diagnostics reading - LED feedback (using built-in LED) **Complexity**: ⭐⭐☆☆☆ (Beginner-friendly) **Best for**: First-time users, learning the driver basics **Status**: ✅ Complete and tested --- ### 2. MultiChannelExample ⭐⭐⭐ **File**: `MultiChannelExample/MultiChannelExample.ino` **Features**: - Independent 6-channel control - Sequential channel activation pattern - Synchronized channel operations - Wave patterns across channels (sine wave) - Performance monitoring and testing - Automatic mode cycling - LED feedback for activity **Complexity**: ⭐⭐⭐☆☆ (Intermediate) **Best for**: Applications requiring multiple outputs, pattern generation **Status**: ✅ Complete and tested **Demo Modes**: 1. **Sequential** - Channels activate one at a time in sequence 2. **Synchronized** - All channels on/off together 3. **Wave Pattern** - Sine wave pattern across channels 4. **Performance Test** - Rapid switching test with statistics --- ### 3. DiagnosticsExample ⭐⭐⭐⭐ **File**: `DiagnosticsExample/DiagnosticsExample.ino` **Features**: - Comprehensive fault detection - Continuous diagnostics monitoring - Overcurrent detection and auto-recovery - Overtemperature handling with cooling period - Open load detection - Short circuit detection with lockout - Diagnostic counters and history - Timestamped fault logging - Periodic summary reports - Automatic fault recovery procedures **Complexity**: ⭐⭐⭐⭐☆ (Advanced) **Best for**: Production systems, safety-critical applications, debugging **Status**: ✅ Complete and tested **Fault Handling**: - **Overcurrent**: Auto-reduce current to 80% and retry - **Overtemperature**: Disable for 5s cooling, then retry - **Short Circuit**: Permanent disable until manual reset - **Open Load**: Warning only (informational) --- ### 4. PWMDitherExample ⭐⭐⭐ **File**: `PWMDitherExample/PWMDitherExample.ino` **Features**: - PWM frequency sweep demonstration (100Hz - 20kHz) - Duty cycle control (0% - 100%) - Dither generator demonstration - Combined PWM + Dither operation - Acoustic noise comparison (with/without dither) - Smooth current transitions - Automatic mode cycling **Complexity**: ⭐⭐⭐☆☆ (Intermediate) **Best for**: Applications requiring low acoustic noise, smooth control **Status**: ✅ Complete and tested **Demo Modes**: 1. **PWM Frequency Sweep** - Sweep from 100Hz to 2kHz and back 2. **Duty Cycle Control** - Ramp duty cycle 0-100% (effective current control) 3. **Dither Demonstration** - Compare with/without dither 4. **Combined PWM + Dither** - Optimal configuration demo **Note**: Connect oscilloscope to OUT0 for best observation! --- ## ⚙️ Configuration ### Pin Configuration Edit in `BasicUsageExample.ino`: ```cpp Arduino_HAL::SPIConfig config; config.cs_pin = 10; // Chip Select (SS) config.en_pin = 9; // Enable (optional, use 255 to disable) config.resn_pin = 8; // Reset (optional, use 255 to disable) config.spi_frequency = 1000000; // 1MHz (100kHz - 8MHz) config.spi_mode = SPI_MODE0; // TLE92466ED requires Mode 0 config.spi_bit_order = MSBFIRST; // Must be MSB first ```text ### Current Configuration Edit test currents: ```cpp const uint16_t TEST_CURRENT_MA = 500; // Test current (0-2000mA) const uint16_t RAMP_START_MA = 100; // Ramp start const uint16_t RAMP_END_MA = 1000; // Ramp end const uint16_t RAMP_STEP_MA = 100; // Ramp step size ```text ### Timing Configuration Edit delays: ```cpp const uint32_t STEP_DELAY_MS = 500; // Delay between steps (ms) ```text --- ## 🐛 Troubleshooting ### Common Issues #### 1. **Compilation Errors** **Error**: `'std::expected' has not been declared` **Solution**: - Use Arduino IDE 2.0+ (has better C++17 support) - Or add compiler flag in `platform.txt`: ```text compiler.cpp.extra_flags=-std=gnu++17 ```text - Or use PlatformIO with `build_flags = -std=gnu++17` **Error**: `'TLE92466ED.hpp' not found` **Solution**: Ensure driver files are in sketch folder or create symlinks --- #### 2. **HAL Initialization Failed** **Symptoms**: `❌ HAL initialization failed!` **Solutions**: - Check SPI pins are correct for your board - Verify EN and RESN pins are connected - Ensure Arduino is powered properly - Try different CS pin if pin 10 is used elsewhere --- #### 3. **Driver Initialization Failed** **Symptoms**: `❌ Driver initialization failed!` **Solutions**: - Verify VBAT is connected (12-24V) - Check VDD is 5V (or 3.3V for 3.3V boards) - Verify VIO matches Arduino logic level - Check all ground connections (common ground!) - Verify SPI wiring (MISO, MOSI, SCK, CS) --- #### 4. **Chip ID Read Failed** **Symptoms**: `❌ Failed to read chip ID!` **Solutions**: - Verify SPI connections with multimeter - Check CS pin toggles during communication - Try lower SPI frequency: ```cpp config.spi_frequency = 100000; // 100kHz for testing ``` - Use oscilloscope/logic analyzer to verify SPI signals - Ensure TLE92466ED is not in reset (RESN high) --- #### 5. **No Load Response** **Symptoms**: Load doesn't turn on despite channel being enabled **Solutions**: - Verify VBAT voltage (must be 8-28V) - Check load connections to OUT0-OUT5 - Verify load is within current limits (0-2A per channel) - Check diagnostics for faults: - Open load (no load connected) - Overcurrent (load too low resistance) - Short circuit (load shorted) - Measure voltage at OUTx pin when enabled --- #### 6. **Arduino Resets/Crashes** **Symptoms**: Arduino resets during operation **Solutions**: - Ensure common ground between Arduino and TLE92466ED - Check power supply is adequate (2A+ for VBAT) - Verify no short circuits in wiring - Add decoupling capacitors near TLE92466ED VDD - Check stack size isn't exceeded (use Serial prints sparingly) --- ### Debug Configuration Enable detailed logging: ```cpp // In setup(): Serial.begin(115200); // High baud rate for faster logging // Add debug prints in HAL: Serial.println(F(\"DEBUG: Entering spiTransfer()\")); ```text ### SPI Signal Analysis Use logic analyzer/oscilloscope: - **CS**: Should go LOW during transactions - **SCK**: Should show 1MHz clock (or configured frequency) - **MOSI**: Should show data output - **MISO**: Should show data input - **Mode**: Verify Mode 0 (CPOL=0, CPHA=0) Expected transaction: ```text CS: ──┐ ┌──── └─────────────┘ SCK: ────┐ ┌ ┐ ┌ ┐ ┌───── └─┘ └─┘ └─┘ MOSI: ────DATA──────────── MISO: ────DATA──────────── ```text --- ## 📈 Performance Characteristics ### Arduino Uno (ATmega328P) | Metric | Value |--------|-------| **SPI Frequency** | 1MHz (up to 8MHz) | **Transaction Time** | ~35μs per 32-bit frame | **Flash Usage** | ~18KB | **RAM Usage** | ~500 bytes | **Max Update Rate** | ~10kHz (channel updates) | ### Arduino Mega 2560 (ATmega2560) | Metric | Value |--------|-------| **SPI Frequency** | 1MHz (up to 8MHz) | **Transaction Time** | ~35μs per 32-bit frame | **Flash Usage** | ~18KB | **RAM Usage** | ~500 bytes | **Max Update Rate** | ~10kHz (channel updates) | ### Arduino Due (SAM3X8E) | Metric | Value |--------|-------| **SPI Frequency** | 1MHz (up to 21MHz) | **Transaction Time** | ~10μs per 32-bit frame | **Flash Usage** | ~20KB | **RAM Usage** | ~1KB | **Max Update Rate** | ~30kHz (channel updates) | --- ## 📚 Project Structure ```text examples/arduino/ ├── README.md # This file (comprehensive guide) ├── platformio.ini # PlatformIO multi-board configuration ├── Arduino_HAL.hpp # Arduino HAL interface ├── Arduino_HAL.cpp # Arduino HAL implementation │ ├── BasicUsageExample/ # ⭐⭐ Beginner │ └── BasicUsageExample.ino # Single channel control basics │ ├── MultiChannelExample/ # ⭐⭐⭐ Intermediate │ └── MultiChannelExample.ino # 6-channel control patterns │ ├── DiagnosticsExample/ # ⭐⭐⭐⭐ Advanced │ └── DiagnosticsExample.ino # Fault detection & recovery │ └── PWMDitherExample/ # ⭐⭐⭐ Intermediate └── PWMDitherExample.ino # PWM & dither features ```text --- ## 🔗 Related Documentation ### Driver Documentation - [Driver Overview](/hf-tle92466ed-driver/development/) - Main driver README - [Driver API Reference](/hf-tle92466ed-driver/development/docs/07_Driver_API/) - Complete API - [HAL Implementation Guide](/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/) - HAL porting - [Register Map](/hf-tle92466ed-driver/development/docs/03_Register_Map/) - TLE92466ED registers ### Arduino Resources - [Arduino SPI Library](https://www.arduino.cc/en/Reference/SPI) - [Arduino Language Reference](https://www.arduino.cc/reference/en/) ### TLE92466ED Resources - [TLE92466ED Datasheet](../../Datasheet/) - [TLE92466ED Evalboard Product Page](https://www.infineon.com/evaluation-board/TLE92466ED-EVALBOARD) - [Infineon TLE92466ED Product Page](https://www.infineon.com/cms/en/product/power/motor-control-ics/intelligent-motor-control-ics/multi-half-bridge-ics/tle92466ed/) --- ## 🎓 Learning Path ### Beginner 1. ✅ Read this README completely 2. ✅ Set up hardware according to pinout 3. ✅ Upload BasicUsageExample 4. ✅ Observe serial output 5. ✅ Modify test currents and observe changes ### Intermediate 1. Change pin assignments 2. Try different SPI frequencies 3. Add custom test sequences 4. Implement LED indicator patterns 5. Test with different load types ### Advanced 1. Implement multi-channel control 2. Add interrupt-based diagnostics 3. Create custom HAL optimizations 4. Port to different Arduino variants 5. Integrate with your application --- ## 💡 Tips and Best Practices ### Hardware Tips 1. **Always use common ground** between Arduino and TLE92466ED 2. **Start with resistive load** (6-12Ω, 5W) for testing 3. **Add heatsink** if running continuous high current (>1A) 4. **Use short wires** for SPI connections (<30cm recommended) 5. **Add decoupling capacitors** near TLE92466ED VDD (100nF ceramic) ### Software Tips 1. **Start with low SPI frequency** (100kHz) for initial testing 2. **Check return values** from all driver functions 3. **Use Serial.println(F())** to save RAM (stores strings in flash) 4. **Monitor diagnostics** regularly in your application 5. **Implement timeout** for critical operations ### Safety Tips 1. **Never exceed 2A per channel** (TLE92466ED maximum) 2. **Monitor temperature** during high-current operation 3. **Implement overcurrent protection** in your application 4. **Use proper wire gauge** for high-current loads 5. **Test with low currents first** before full power --- ## 🆘 Getting Help ### Issues with Examples If you encounter issues: 1. Check [Troubleshooting](#-troubleshooting) section above 2. Verify hardware connections match your board 3. Test with BasicUsageExample first 4. Check Serial Monitor output for error messages ### Support Channels - **GitHub Issues**: Bug reports, feature requests - **GitHub Discussions**: Questions, general help - **Arduino Forums**: Arduino-specific questions --- ## ✅ Success Criteria Your setup is working correctly when: - ✅ Serial output shows successful initialization - ✅ Chip ID is read correctly (0x...) - ✅ Channels enable/disable without errors - ✅ Current ramping works smoothly - ✅ Diagnostics show \"All systems normal\" - ✅ Load responds to channel control - ✅ Built-in LED blinks during operations --- **Platform**: Arduino (Uno, Mega, Due, Zero, etc.) **Evaluation Board**: TLE92466ED-EVALBOARD **Driver Version**: 2.0.0 **Status**: ✅ Production Ready **Next**: Try [BasicUsageExample](/hf-tle92466ed-driver/development/examples/arduino/BasicUsageExample/BasicUsageExample.ino) → ",
    "url": "/hf-tle92466ed-driver/development/examples/arduino/",
    
    "relUrl": "/examples/arduino/"
  },"318": {
    "doc": "TLE92466ED ESP32-C6 Examples",
    "title": "TLE92466ED ESP32-C6 Examples",
    "content": "# TLE92466ED ESP32-C6 Examples This directory contains comprehensive examples demonstrating the TLE92466ED driver on ESP32-C6 platform. ## 🎯 Overview The ESP32-C6 examples showcase real-world usage of the TLE92466ED six-channel low-side solenoid driver with: - **Hardware-specific HAL** implementation for ESP32-C6 - **Multiple example applications** covering different use cases - **Automated build system** with configurable app types - **Comprehensive documentation** for each example - **Production-ready code** with proper error handling ## 🔧 Hardware Requirements ### ESP32-C6 Development Board - ESP32-C6-DevKitC-1 or compatible - USB-C cable for programming and power ### TLE92466ED Connections | TLE92466ED Pin | ESP32-C6 GPIO | Function |----------------|---------------|----------| MOSI | GPIO7 | SPI Data Out | MISO | GPIO2 | SPI Data In | SCLK | GPIO6 | SPI Clock | CS | GPIO10 | Chip Select | VDD | 3.3V | Logic Supply | VBAT | 12-24V | Power Supply | GND | GND | Ground | ### Load Connections Connect your solenoids/loads to the TLE92466ED output channels (OUT0-OUT5) with appropriate current ratings. ## 🚀 Quick Start ### 1. Prerequisites ```bash # Install ESP-IDF v5.5 curl -fsSL https://raw.githubusercontent.com/espressif/esp-idf/master/tools/install.sh | bash source ~/esp/esp-idf/export.sh # Verify installation idf.py --version ```text ### 2. Setup Repository ```bash # Clone and setup git clone --recursive https://github.com/n3b3x/hf-tle92466ed-driver.git cd hf-tle92466ed-driver/examples/esp32 # Initialize build environment ./scripts/setup_repo.sh ```text ### 3. Build and Flash ```bash # Build basic usage example (default) ./scripts/build_app.sh basic_usage Release # Flash to ESP32-C6 ./scripts/flash_app.sh basic_usage Release # Monitor output idf.py monitor ```text ## 📱 Available Examples ### 🟢 Basic Examples #### `basic_usage` **Single channel control demonstration** - HAL initialization and driver setup - Basic current control (500mA) - Diagnostics reading - Error handling examples ```bash ./scripts/build_app.sh basic_usage Debug ./scripts/flash_app.sh basic_usage Debug ```text #### `multi_channel` **Independent control of all 6 channels** - Sequential channel activation - Synchronized control - Current ramping - Performance monitoring ```bash ./scripts/build_app.sh multi_channel Release ./scripts/flash_app.sh multi_channel Release ```text ### 🟡 Advanced Examples #### `parallel_mode` **High-current parallel channel operation** - Channel pairing (CH0/CH3, CH1/CH2, CH4/CH5) - 4A current control - Load balancing - Thermal management #### `diagnostics_test` **Comprehensive fault detection** - Overcurrent detection - Temperature monitoring - Open load detection - Short circuit detection - Real-time fault reporting #### `pwm_dither` **Precision control with PWM and dither** - Configurable PWM frequency - Dither amplitude control - Noise reduction techniques - Precision current shaping ### 🔵 Application Examples #### `automotive_demo` **Automotive solenoid control** - Transmission solenoid patterns - Fuel injector timing - Valve control with feedback - Safety interlocks #### `industrial_valve` **Industrial valve control** - Proportional valve control - Position feedback integration - Flow rate control - PID control implementation ### 🟠 Testing Examples #### `stress_test` **Reliability and stress testing** - Continuous operation testing - Thermal cycling - Communication error injection - Recovery mechanisms #### `calibration` **Current calibration and accuracy** - Current measurement calibration - Temperature compensation - Accuracy validation - Factory calibration routines ## 🛠️ Build System ### App Configuration All examples are configured in `app_config.yml`: ```yaml apps: basic_usage: description: \"Basic TLE92466ED usage example\" source_file: \"BasicUsageExample.cpp\" category: \"basic\" idf_versions: [\"release/v5.5\"] build_types: [\"Debug\", \"Release\"] ```text ### Build Commands ```bash # List available apps python3 scripts/get_app_info.py list # Get app information python3 scripts/get_app_info.py info basic_usage # Build specific app and type ./scripts/build_app.sh # Flash specific app ./scripts/flash_app.sh # Clean build ./scripts/build_app.sh --clean ```text ### Build Types - **Debug**: Full debugging symbols, verbose logging, assertions - **Release**: Optimized for performance and size - **RelWithDebInfo**: Release with debug symbols - **MinSizeRel**: Optimized for minimum size ## 📊 Configuration ### Hardware Configuration File All hardware configuration is defined in `main/TLE92466ED_Config.hpp`. This is the **actual** configuration used by the HAL and examples. **Important**: The `app_config.yml` file only contains application definitions and build configuration, NOT hardware settings. ### SPI Configuration Edit `main/TLE92466ED_Config.hpp` to change SPI pins: ```cpp struct SPIPins { static constexpr int MISO = 2; // GPIO2 - SPI MISO static constexpr int MOSI = 7; // GPIO7 - SPI MOSI static constexpr int SCLK = 6; // GPIO6 - SPI Clock static constexpr int CS = 10; // GPIO10 - Chip Select }; struct SPIParams { static constexpr int FREQUENCY = 1000000; // 1MHz static constexpr int MODE = 0; // SPI Mode 0 }; ```text ### Current Limits Defined in `main/TLE92466ED_Config.hpp`: ```cpp struct CurrentLimits { static constexpr uint16_t SINGLE_CHANNEL_MAX = 2000; // 2A per channel static constexpr uint16_t PARALLEL_CHANNEL_MAX = 4000; // 4A parallel mode }; ```text ### Hardware Specifications Defined in `main/TLE92466ED_Config.hpp`: ```cpp struct SupplyVoltage { static constexpr float VBAT_MIN = 8.0f; // Minimum VBAT (V) static constexpr float VBAT_MAX = 28.0f; // Maximum VBAT (V) }; struct Temperature { static constexpr int JUNCTION_MAX = 150; // Maximum temp (°C) }; ```text ## 🔍 Debugging ### Serial Monitor ```bash # Monitor with automatic port detection idf.py monitor # Monitor specific port idf.py monitor -p /dev/ttyUSB0 # Monitor with filtering idf.py monitor | grep \"TLE92466ED\" ```text ### Log Levels Set in `sdkconfig` or via menuconfig: ```text CONFIG_LOG_DEFAULT_LEVEL_DEBUG=y # Debug level CONFIG_TLE92466ED_DEBUG_ENABLED=y # Driver debug ```text ### Common Issues 1. **SPI Communication Errors** - Check wiring connections - Verify power supply (VBAT 12-24V, VDD 3.3V) - Ensure proper grounding 2. **Current Control Issues** - Verify load connections - Check current limits in configuration - Monitor diagnostics for faults 3. **Build Errors** - Ensure ESP-IDF v5.5 is installed - Run `./scripts/setup_repo.sh` - Check C++23 compiler support ## 📚 Documentation ### Example Documentation Each example has detailed documentation in `docs/`: - `docs/README_BASIC_USAGE.md` - `docs/README_MULTI_CHANNEL.md` - `docs/README_PARALLEL_MODE.md` - `docs/README_DIAGNOSTICS.md` - And more... ### API Documentation - [Driver API Reference](/hf-tle92466ed-driver/development/docs/07_Driver_API/) - [HAL Implementation Guide](/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/) - [Register Map](/hf-tle92466ed-driver/development/docs/03_Register_Map/) ## 🧪 Testing ### Unit Tests ```bash # Run all tests ./scripts/build_app.sh stress_test Debug ./scripts/flash_app.sh stress_test Debug ```text ### Performance Testing ```bash # Performance monitoring ./scripts/build_app.sh multi_channel Release ./scripts/flash_app.sh multi_channel Release ```text ### Continuous Integration The examples are automatically tested in CI with: - Multiple ESP-IDF versions - Debug and Release builds - Hardware-in-the-loop testing ## 🤝 Contributing 1. **Adding New Examples** - Create source file in `main/` - Add entry to `app_config.yml` - Create documentation in `docs/` - Test with both Debug and Release builds 2. **Modifying HAL** - Update `ESP32C6_HAL.hpp` and `ESP32C6_HAL.cpp` - Ensure compatibility with all examples - Test SPI communication thoroughly 3. **Configuration Changes** - Update `app_config.yml` for new settings - Modify `sdkconfig` for ESP32-C6 specific changes - Document changes in README ## 📄 License This software is released into the **Public Domain**. You can use, modify, and distribute it freely without any restrictions. ## 🔗 Resources - [TLE92466ED Datasheet](../../Datasheet/) - [ESP32-C6 Technical Reference](https://www.espressif.com/sites/default/files/documentation/esp32-c6_technical_reference_manual_en.pdf) - [ESP-IDF Programming Guide](https://docs.espressif.com/projects/esp-idf/en/latest/) - [GitHub Repository](https://github.com/n3b3x/hf-tle92466ed-driver) --- **Version**: 2.0.0 | **Target**: ESP32-C6 | **ESP-IDF**: v5.5 | **Last Updated**: 2025-10-21 ",
    "url": "/hf-tle92466ed-driver/development/examples/esp32/",
    
    "relUrl": "/examples/esp32/"
  },"319": {
    "doc": "TLE92466ED ESP-IDF Component",
    "title": "TLE92466ED ESP-IDF Component",
    "content": "# TLE92466ED ESP-IDF Component This directory contains the ESP-IDF component configuration for the TLE92466ED driver. ## Overview This component wraps the TLE92466ED driver for use as an ESP-IDF managed component, making it easy to integrate into ESP32 projects. ## Component Structure ```text tle92466ed-espidf/ ├── CMakeLists.txt # Component build configuration ├── idf_component.yml # ESP-IDF Component Manager manifest └── README.md # This file ```text ## How It Works ### Component Resolution The component automatically locates the TLE92466ED driver source files: 1. **CI/Build Environment**: Looks for `src/` and `include/` in the project root 2. **Development Environment**: Looks for `../../src/` and `../../include/` (driver root) ### Source Files Included - `src/TLE92466ED.cpp` - Main driver implementation ### Headers Included - `include/TLE92466ED.hpp` - Driver class - `include/TLE92466ED_Registers.hpp` - Register definitions - `include/TLE92466ED_HAL.hpp` - Hardware abstraction layer interface ## Usage in Projects ### In ESP-IDF Component Manager This component can be used with the ESP-IDF Component Manager by adding it to your project's dependencies. ### In Local Projects The component is automatically discovered by ESP-IDF when located in the `components/` directory of your project. ### Requirements Add to your main component: ```cmake idf_component_register( SRCS \"main.cpp\" INCLUDE_DIRS \".\" REQUIRES tle92466ed-espidf # Add this requirement ) ```text ## Configuration The component provides compile-time definitions based on the target: - `TLE92466ED_TARGET_ESP32` - ESP32 classic target - `TLE92466ED_TARGET_ESP32C6` - ESP32-C6 target - `TLE92466ED_TARGET_ESP32S3` - ESP32-S3 target - `TLE92466ED_TARGET_ESP32C3` - ESP32-C3 target - `TLE92466ED_MCU_FAMILY_ESP32` - ESP32 family marker ## Build Features ### C++23 Standard The component is configured to use C++23 standard: ```cmake target_compile_features(${COMPONENT_LIB} PRIVATE cxx_std_23) ```text ### Compiler Optimizations - **Link Time Optimization (LTO)**: Enabled when configured - **Function/Data Sections**: For better code size optimization - **No RTTI**: `-fno-rtti` for smaller binary size - **No Exceptions**: `-fno-exceptions` for embedded systems ### Compiler Flags ```text -Wall -Wextra -Wpedantic -O2 -g -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions ```text ## ESP-IDF Dependencies The component requires these ESP-IDF components: ### Core Components - `driver` - SPI drivers - `esp_timer` - Timing functions - `freertos` - RTOS support - `esp_system` - System utilities - `hal` - Hardware abstraction layer - `soc` - SoC definitions - `log` - Logging ### Driver Components - `esp_driver_gpio` - GPIO driver - `esp_driver_spi` - SPI driver ## Supported ESP32 Targets - ESP32 (classic) - ESP32-S2 - ESP32-S3 - ESP32-C2 - ESP32-C3 - ESP32-C6 (primary target) - ESP32-H2 ## Development ### Testing Component Configuration ```bash cd examples/esp32 idf.py reconfigure ```text ### Viewing Component Information ```bash idf.py show-components ```text ### Debugging Component Issues Enable verbose output: ```bash idf.py -v build ```text ## Component Manager ### Publishing to Component Registry To publish this component to the ESP-IDF Component Registry: 1. Update version in `idf_component.yml` 2. Create git tag matching version 3. Follow ESP-IDF Component Manager publishing guidelines ### Local Installation The component is automatically available when building the examples from the `examples/esp32` directory. ## Build Messages During build, the component will display: ```text TLE92466ED Driver - ESP32 Component Configuration Project Root: /path/to/project Source Root: /path/to/driver Found source: /path/to/TLE92466ED.cpp === TLE92466ED Driver Component Summary === Component configured successfully Included 1 source files Target MCU: ESP32-C6 C++ Standard: C++23 Driver Version: 2.0.0 Optimization: LTO enabled (if configured) ========================================== ```text ## Troubleshooting ### Source Files Not Found **Issue**: \"Source file not found\" warnings **Solution**: Verify the driver is in the correct location: - Development: `../../src/TLE92466ED.cpp` relative to component - CI: `${PROJECT_ROOT}/src/TLE92466ED.cpp` ### C++23 Not Supported **Issue**: Compiler doesn't support C++23 **Solution**: Update to: - GCC 12.0 or later - Clang 16.0 or later - ESP-IDF v5.5 or later ### Component Not Found **Issue**: \"Component 'tle92466ed-espidf' not found\" **Solution**: Ensure the component is in the `components/` directory of your ESP-IDF project. ## References - [ESP-IDF Component Manager Documentation](https://docs.espressif.com/projects/idf-component-manager/) - [ESP-IDF CMake Build System](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/build-system.html) - [TLE92466ED Driver Documentation](../../docs/) --- **Component Version**: 2.0.0 **ESP-IDF Version**: ≥5.0.0 **C++ Standard**: C++23 ",
    "url": "/hf-tle92466ed-driver/development/examples/esp32/components/tle92466ed-espidf/",
    
    "relUrl": "/examples/esp32/components/tle92466ed-espidf/"
  },"320": {
    "doc": "TLE92466ED ESP32 Examples Documentation",
    "title": "TLE92466ED ESP32 Examples Documentation",
    "content": "# TLE92466ED ESP32 Examples Documentation ## 📚 Documentation Index Complete documentation for TLE92466ED driver examples on ESP32-C6. --- ## 🎯 Quick Start | Document | Purpose | When to Read |----------|---------|--------------| **[Basic Usage Test Suite](/hf-tle92466ed-driver/development/examples/esp32/docs/README_BASIC_USAGE.html)** | Your first example | Start here! | **[Configuration Guide](/hf-tle92466ed-driver/development/examples/esp32/docs/README_CONFIGURATION.html)** | All configuration options | Before customizing | **[Test Framework Reference](/hf-tle92466ed-driver/development/examples/esp32/docs/README_TEST_FRAMEWORK.html)** | Framework API details | Writing custom tests | --- ## 📖 Documentation Structure ### 1. [Basic Usage Test Suite](/hf-tle92466ed-driver/development/examples/esp32/docs/README_BASIC_USAGE.html) **Comprehensive guide to the basic usage example** #### Contents - ✅ **Test Framework Architecture** - How the test infrastructure works - ✅ **Test Suite Structure** - All test sections and functions - ✅ **Hardware Setup** - Complete wiring diagrams and pin configurations - ✅ **Configuration** - Hardware and test settings - ✅ **Building and Running** - Build commands and workflows - ✅ **Expected Output** - Full example outputs with explanations - ✅ **Individual Test Details** - Deep dive into each test - ✅ **Troubleshooting** - Common issues and solutions - ✅ **Performance Characteristics** - Timing and memory usage **Start here if you're new to the examples!** --- ### 2. [Configuration Guide](/hf-tle92466ed-driver/development/examples/esp32/docs/README_CONFIGURATION.html) **Complete reference for all configuration files and options** #### Contents - ✅ **Hardware Configuration** (`TLE92466ED_Config.hpp`) - SPI pins, frequencies, current limits - ✅ **Application Configuration** (`app_config.yml`) - Build metadata and app definitions - ✅ **Test Section Configuration** - Compile-time test enable/disable - ✅ **ESP-IDF SDK Configuration** (`sdkconfig`) - Framework settings - ✅ **Component Configuration** - ESP-IDF component setup - ✅ **Configuration Workflows** - Development and production setups - ✅ **Troubleshooting** - Configuration-related issues **Read this when you need to customize hardware or build settings.** --- ### 3. [Test Framework Reference](/hf-tle92466ed-driver/development/examples/esp32/docs/README_TEST_FRAMEWORK.html) **Detailed API reference for the TLE92466ED Test Framework** #### Contents - ✅ **GPIO14 Progress Indicator** - Visual feedback system - ✅ **Test Result Tracking** - Automatic pass/fail counting - ✅ **Test Execution Macros** - `RUN_TEST`, `RUN_TEST_IN_TASK`, sections - ✅ **Usage Guide** - How to write test functions - ✅ **Advanced Usage** - Custom contexts, stack sizes, timeouts - ✅ **Best Practices** - Professional test organization - ✅ **Performance Impact** - Memory and timing overhead - ✅ **CI/CD Integration** - Automated testing **Essential reading for creating custom tests or understanding the framework.** --- ## 🚀 Getting Started ### Prerequisites - **Hardware**: - ESP32-C6-DevKitC-1 development board - TLE92466ED evaluation board or custom PCB - 12-24V power supply (2A minimum) - Test load (solenoid, resistor, or LED) - USB-C cable for programming - **Software**: - ESP-IDF v5.3 or later (v5.5 recommended) - Python 3.8+ - Git with submodules support - Serial terminal (screen, minicom, or built-in monitor) ### Quick Start Steps 1. **Clone and setup**: ```bash git clone https://github.com/N3b3x/hf-tle92466ed-driver.git cd hf-tle92466ed-driver/examples/esp32 git submodule update --init --recursive ``` 2. **Configure ESP-IDF**: ```bash . $IDF_PATH/export.sh idf.py set-target esp32c6 ``` 3. **Build basic example**: ```bash ./scripts/build_app.sh basic_usage Debug ``` 4. **Flash and monitor**: ```bash ./scripts/flash_app.sh basic_usage Debug ./scripts/monitor_app.sh basic_usage ``` 5. **See results**: - Serial output shows test execution - GPIO14 toggles with test progress - Summary printed at end --- ## 📊 Example Overview ### BasicUsageExample **Purpose**: Validate TLE92466ED driver functionality with comprehensive test suite **Test Sections**: 1. **INITIALIZATION_TESTS** - HAL setup, driver init, chip ID verification 2. **BASIC_OPERATION_TESTS** - Channel control, current setting, diagnostics 3. **CURRENT_CONTROL_TESTS** - Current ramping and smooth transitions **Features**: - ✅ FreeRTOS task-based test execution - ✅ GPIO14 progress indicator - ✅ Automatic result tracking - ✅ Professional formatted output - ✅ 30-second timeout per test - ✅ Compile-time test section control **Complexity**: ⭐⭐⭐☆☆ **Read**: [Basic Usage Test Suite](/hf-tle92466ed-driver/development/examples/esp32/docs/README_BASIC_USAGE.html) --- ### MultiChannelExample **Purpose**: Demonstrate independent control of all 6 TLE92466ED channels **Features** (planned): - Sequential channel activation - Synchronized channel control - Wave patterns across channels - Performance monitoring - Advanced diagnostics **Complexity**: ⭐⭐⭐⭐☆ **Status**: 🚧 In Development --- ## 🔧 Configuration Overview ### Hardware Configuration **File**: `main/TLE92466ED_Config.hpp` **What's configured**: - SPI GPIO pins (MISO, MOSI, SCLK, CS) - SPI frequency and mode - Current limits (single and parallel) - Hardware specifications (voltage, temperature) - Test parameters **Example**: ```cpp struct SPIPins { static constexpr int MISO = 2; // GPIO2 static constexpr int MOSI = 7; // GPIO7 static constexpr int SCLK = 6; // GPIO6 static constexpr int CS = 10; // GPIO10 }; ```text **Read**: [Configuration Guide - Hardware Configuration](/hf-tle92466ed-driver/development/examples/esp32/docs/README_CONFIGURATION.html#1-hardware-configuration-maintle92466ed_confighpp) --- ### Build Configuration **File**: `app_config.yml` **What's configured**: - Available applications (basic_usage, multi_channel, etc.) - Build types (Debug, Release) - ESP-IDF version compatibility - CI/CD settings - Documentation links **Example**: ```yaml apps: basic_usage: description: \"Basic usage example for TLE92466ED\" source_file: \"BasicUsageExample.cpp\" build_types: [\"Debug\", \"Release\"] ```text **Read**: [Configuration Guide - Application Configuration](/hf-tle92466ed-driver/development/examples/esp32/docs/README_CONFIGURATION.html#2-application-configuration-app_configyml) --- ### Test Configuration **File**: Each example source file (e.g., `BasicUsageExample.cpp`) **What's configured**: - Test section enable/disable flags - Compile-time test selection **Example**: ```cpp #define ENABLE_INITIALIZATION_TESTS 1 // Enable #define ENABLE_BASIC_OPERATION_TESTS 1 // Enable #define ENABLE_CURRENT_CONTROL_TESTS 0 // Disable ```text **Read**: [Configuration Guide - Test Section Configuration](/hf-tle92466ed-driver/development/examples/esp32/docs/README_CONFIGURATION.html#3-test-section-configuration) --- ## 🧪 Test Framework Features ### Professional Test Infrastructure The examples use a **production-grade test framework** with: #### ✅ FreeRTOS Task-Based Execution - Each test runs in isolated task - Custom stack size per test (default: 8KB) - Automatic semaphore synchronization - 30-second timeout protection #### ✅ GPIO14 Progress Indicator - **Visual feedback** on oscilloscope/logic analyzer - **Toggle**: HIGH/LOW on test completion - **Blink patterns**: 5 blinks at section boundaries - Hardware-level progress tracking #### ✅ Automatic Result Tracking - Pass/fail counting - Microsecond-precision execution timing - Success rate calculation - Professional formatted summaries #### ✅ Test Section Management - Compile-time section enable/disable - Organized test grouping - Custom blink patterns per section **Read**: [Test Framework Reference](/hf-tle92466ed-driver/development/examples/esp32/docs/README_TEST_FRAMEWORK.html) --- ## 📈 Example Output ### Test Execution ```text ╔══════════════════════════════════════════════════════════════════╗ ║ TLE92466ED BASIC USAGE TEST SUITE - ESP32-C6 ║ ╚══════════════════════════════════════════════════════════════════╝ Target: esp32c6 ESP-IDF Version: v5.5.0 ╔══════════════════════════════════════════════════════════════════╗ ║ SECTION: INITIALIZATION TESTS ║ ╚══════════════════════════════════════════════════════════════════╝ [GPIO14: Blink pattern - 5 blinks] ╔══════════════════════════════════════════════════════════════════╗ ║ Running (task): hal_initialization ║ ╚══════════════════════════════════════════════════════════════════╝ I (1234) TLE92466ED_Basic: Creating HAL instance... I (1235) TLE92466ED_Basic: ✅ HAL initialized successfully [SUCCESS] PASSED (task): hal_initialization (12.34 ms) [GPIO14: Toggle HIGH] ... (more tests) ... ╔══════════════════════════════════════════════════════════════════╗ ║ TEST RESULTS SUMMARY ║ ╠══════════════════════════════════════════════════════════════════╣ ║ Total Tests: 7 ║ ║ Passed: 7 ║ ║ Failed: 0 ║ ║ Success Rate: 100.00% ║ ║ Total Time: 234.56 ms ║ ╚══════════════════════════════════════════════════════════════════╝ I (5000) TLE92466ED_Basic: ✅ ALL TESTS PASSED! ```text --- ## 🐛 Troubleshooting Quick Reference ### Common Issues | Issue | Quick Fix | Full Guide |-------|-----------|------------| **All tests fail** | Check VBAT power (12-24V) and wiring | [Basic Usage - Troubleshooting](/hf-tle92466ed-driver/development/examples/esp32/docs/README_BASIC_USAGE.html#-troubleshooting) | **HAL init fails** | Verify GPIO pins in `TLE92466ED_Config.hpp` | [Configuration - GPIO Conflict](/hf-tle92466ed-driver/development/examples/esp32/docs/README_CONFIGURATION.html#gpio-conflict) | **Chip ID read fails** | Check SPI wiring, CS pin | [Basic Usage - Chip ID Fails](/hf-tle92466ed-driver/development/examples/esp32/docs/README_BASIC_USAGE.html#4-chip-id-read-fails-) | **Stack overflow** | Increase stack size in `RUN_TEST_IN_TASK` | [Configuration - Stack Overflow](/hf-tle92466ed-driver/development/examples/esp32/docs/README_CONFIGURATION.html#stack-overflow) | **Build errors** | Clean and rebuild: `idf.py fullclean && idf.py build` | [Configuration - Build Type Issues](/hf-tle92466ed-driver/development/examples/esp32/docs/README_CONFIGURATION.html#build-type-issues) | --- ## 📦 Project Structure ```text examples/esp32/ ├── app_config.yml # Build metadata ├── CMakeLists.txt # Main CMake configuration ├── sdkconfig # ESP-IDF SDK configuration │ ├── main/ # Application source │ ├── CMakeLists.txt # Main component build │ ├── TLE92466ED_Config.hpp # Hardware configuration │ ├── TLE92466ED_TestFramework.hpp # Test infrastructure │ ├── ESP32C6_HAL.hpp/.cpp # ESP32-C6 HAL implementation │ ├── BasicUsageExample.cpp # Basic test suite │ └── MultiChannelExample.cpp # Multi-channel tests │ ├── components/ # ESP-IDF components │ └── tle92466ed-espidf/ # TLE92466ED driver component │ ├── CMakeLists.txt │ ├── idf_component.yml │ └── README.md │ ├── docs/ # Documentation │ ├── README.md # This file │ ├── README_BASIC_USAGE.md # Basic usage guide │ ├── README_CONFIGURATION.md # Configuration reference │ └── README_TEST_FRAMEWORK.md # Test framework API │ └── scripts/ # Build/flash scripts (submodule) ├── build_app.sh ├── flash_app.sh └── monitor_app.sh ```text --- ## 🔗 Related Documentation ### Driver Documentation - [Driver Overview](/hf-tle92466ed-driver/development/) - Main driver README - [Driver API Reference](/hf-tle92466ed-driver/development/docs/07_Driver_API/) - Complete API docs - [HAL Implementation Guide](/hf-tle92466ed-driver/development/docs/08_HAL_Implementation/) - Porting guide - [Register Map](/hf-tle92466ed-driver/development/docs/03_Register_Map/) - TLE92466ED registers - [Diagnostics](/hf-tle92466ed-driver/development/docs/06_Diagnostics/) - Fault detection ### ESP32 Resources - [ESP-IDF Programming Guide](https://docs.espressif.com/projects/esp-idf/en/latest/) - [ESP32-C6 Technical Reference](https://www.espressif.com/sites/default/files/documentation/esp32-c6_technical_reference_manual_en.pdf) - [FreeRTOS Documentation](https://www.freertos.org/Documentation/RTOS_book.html) ### TLE92466ED Resources - [TLE92466ED Datasheet](../../../Datasheet/) - [Infineon Product Page](https://www.infineon.com/cms/en/product/power/motor-control-ics/intelligent-motor-control-ics/multi-half-bridge-ics/tle92466ed/) --- ## 🎓 Learning Path ### Beginner Path 1. **Read**: [Basic Usage Test Suite](/hf-tle92466ed-driver/development/examples/esp32/docs/README_BASIC_USAGE.html) 2. **Build**: Basic usage example (Debug mode) 3. **Run**: Flash to ESP32-C6 and observe output 4. **Modify**: Change current values in tests 5. **Experiment**: Try with different loads ### Intermediate Path 1. **Read**: [Configuration Guide](/hf-tle92466ed-driver/development/examples/esp32/docs/README_CONFIGURATION.html) 2. **Customize**: Modify `TLE92466ED_Config.hpp` for your hardware 3. **Configure**: Adjust test sections and parameters 4. **Optimize**: Try Release build, measure performance 5. **Debug**: Use oscilloscope to observe SPI and GPIO14 ### Advanced Path 1. **Read**: [Test Framework Reference](/hf-tle92466ed-driver/development/examples/esp32/docs/README_TEST_FRAMEWORK.html) 2. **Extend**: Add custom test functions 3. **Port**: Implement HAL for different MCU (ESP32-S3, etc.) 4. **Integrate**: Set up CI/CD pipeline with test parsing 5. **Optimize**: Profile and optimize for your application --- ## 💡 Tips and Best Practices ### Development Tips 1. **Start with Debug builds** for detailed logging 2. **Use GPIO14 indicator** to track progress without serial 3. **Monitor SPI signals** with logic analyzer during bring-up 4. **Test with known-good load** (resistor) before real solenoids 5. **Enable all test sections** initially, disable as needed ### Configuration Tips 1. **Keep hardware config centralized** in `TLE92466ED_Config.hpp` 2. **Use compile-time flags** for test sections (faster than runtime) 3. **Document custom settings** in code comments 4. **Version control sdkconfig.defaults** for team consistency 5. **Use Release builds** for final performance testing ### Testing Tips 1. **Run full test suite** after any changes 2. **Check GPIO14 patterns** on oscilloscope for test flow 3. **Analyze execution times** to find performance issues 4. **Test with realistic loads** matching your application 5. **Monitor diagnostics** for fault conditions --- ## 🆘 Getting Help ### Documentation Issues If documentation is unclear or incomplete: 1. Check the specific guide (Basic Usage, Configuration, Test Framework) 2. Search for keywords in all docs 3. Review related driver documentation 4. Open GitHub issue with details ### Build/Configuration Issues If you have build or configuration problems: 1. Check [Configuration Guide - Troubleshooting](/hf-tle92466ed-driver/development/examples/esp32/docs/README_CONFIGURATION.html#troubleshooting-configuration) 2. Verify ESP-IDF version (v5.3+) 3. Clean and rebuild: `idf.py fullclean && idf.py build` 4. Check `sdkconfig` for conflicts ### Hardware/Test Issues If tests fail or hardware doesn't work: 1. Check [Basic Usage - Troubleshooting](/hf-tle92466ed-driver/development/examples/esp32/docs/README_BASIC_USAGE.html#-troubleshooting) 2. Verify wiring against pin configuration 3. Measure power supplies (VBAT, VDD) 4. Test SPI communication with logic analyzer 5. Try lower SPI frequency (100kHz) for debugging ### Support Channels - **GitHub Issues**: Bug reports, feature requests - **GitHub Discussions**: Questions, general help - **Driver Documentation**: Technical reference --- ## 📊 Example Statistics ### BasicUsageExample | Metric | Value |--------|-------| **Total Tests** | 7 | **Test Sections** | 3 | **Typical Execution Time** | 200-250ms | **Flash Size** | ~55KB | **RAM Usage** | ~12KB | **Stack per Task** | 8KB | ### Test Breakdown | Section | Tests | Time |---------|-------|------| **Initialization** | 3 | ~40ms | **Basic Operations** | 3 | ~100ms | **Current Control** | 1 | ~70ms | --- ## 🎉 Success Criteria You've successfully set up the examples when: - ✅ Build completes without errors - ✅ Flash and monitor show output - ✅ All tests pass (100% success rate) - ✅ GPIO14 toggles during execution - ✅ Test summary shows timing information - ✅ System restarts automatically after tests Example success output: ```text ╔══════════════════════════════════════════════════════════════════╗ ║ TEST RESULTS SUMMARY ║ ╠══════════════════════════════════════════════════════════════════╣ ║ Total Tests: 7 ║ ║ Passed: 7 ║ ║ Failed: 0 ║ ║ Success Rate: 100.00% ║ ║ Total Time: 234.56 ms ║ ╚══════════════════════════════════════════════════════════════════╝ ✅ ALL TESTS PASSED! System will restart in 10 seconds... ```text --- **Documentation Version**: 1.0.0 **Last Updated**: 2025-10-21 **Status**: ✅ Complete **Next**: Start with [Basic Usage Test Suite](/hf-tle92466ed-driver/development/examples/esp32/docs/README_BASIC_USAGE.html) → ",
    "url": "/hf-tle92466ed-driver/development/examples/esp32/docs/",
    
    "relUrl": "/examples/esp32/docs/"
  }
}
