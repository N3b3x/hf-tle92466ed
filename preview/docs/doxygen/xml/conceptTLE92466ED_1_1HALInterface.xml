<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="conceptTLE92466ED_1_1HALInterface" kind="concept">
    <compoundname>TLE92466ED::HALInterface</compoundname>
    <includes refid="TLE92466ED__HAL_8hpp" local="no">TLE92466ED_HAL.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <initializer>template&lt;typename T&gt;
concept <ref refid="conceptTLE92466ED_1_1HALInterface" kindref="compound">TLE92466ED::HALInterface</ref> =  std::is_base_of_v&lt;HAL, T&gt; &amp;&amp; requires(T hal, uint32_t data, SPIConfig cfg) {
    { hal.init() } -&gt; std::same_as&lt;HALResult&lt;void&gt;&gt;;
    { hal.transfer32(data) } -&gt; std::same_as&lt;HALResult&lt;uint32_t&gt;&gt;;
    { hal.chip_select() } -&gt; std::same_as&lt;HALResult&lt;void&gt;&gt;;
    { hal.chip_deselect() } -&gt; std::same_as&lt;HALResult&lt;void&gt;&gt;;
    { hal.is_ready() } -&gt; std::same_as&lt;bool&gt;;
    { hal.configure(cfg) } -&gt; std::same_as&lt;HALResult&lt;void&gt;&gt;;
}    </initializer>
    <briefdescription>
<para>Concept to verify a type implements the HAL interface. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This C++20 concept ensures at compile-time that a class properly implements the HAL interface. Provides better error messages than traditional template constraints. </para>
    </detaileddescription>
    <location file="include/TLE92466ED_HAL.hpp" line="332" column="1"/>
  </compounddef>
</doxygen>
