name: üì¶ Release CI

on:
  push:
    branches: [release/*]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v2.0.0)'
        required: true
        type: string

env:
  PROJECT_DIR: examples/esp32
  TOOLS_DIR: examples/esp32/scripts
  RELEASE_VERSION: ${{ github.event.inputs.release_version || github.ref_name }}

permissions:
  contents: write
  pull-requests: write
  security-events: write
  pages: write
  id-token: write
  actions: read

concurrency:
  group: release-ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Set local variables
  set-vars:
    runs-on: ubuntu-latest
    outputs:
      project_dir: ${{ steps.vars.outputs.project_dir }}
      tools_dir: ${{ steps.vars.outputs.tools_dir }}
    steps:
      - name: Set local variables
        id: vars
        run: |
          echo "project_dir=${{ env.PROJECT_DIR }}" >> "$GITHUB_OUTPUT"
          echo "tools_dir=${{ env.TOOLS_DIR }}" >> "$GITHUB_OUTPUT"

  # Wait for Advanced CI to complete successfully
  wait-for-advanced-ci:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/')
    steps:
      - name: Wait for ESP32 Examples Build CI
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'ESP32 Examples Build CI'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success

  # Build release artifacts (only for tags, not release branches)
  build-release:
    needs: [set-vars, wait-for-advanced-ci]
    if: startsWith(github.ref, 'refs/tags/')
    uses: N3b3x/hf-espidf-ci-tools/.github/workflows/build.yml@main
    with:
      project_dir: ${{ needs.set-vars.outputs.project_dir }}
      project_tools_dir: ${{ needs.set-vars.outputs.tools_dir }}
      clean_build: true  # Clean build for release

  # Create release artifacts
  create-release:
    needs: [wait-for-advanced-ci, build-release]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for changelog
          submodules: recursive

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: fw-*
          merge-multiple: true
          path: artifacts/

      - name: Create complete software package
        run: |
          # Create release directory
          mkdir -p release-package

          # Copy source code (excluding build artifacts and CI files)
          rsync -av --exclude='.git' \
            --exclude='build-*' \
            --exclude='.github/workflows' \
            --exclude='.vscode' \
            --exclude='*.log' \
            --exclude='node_modules' \
            --exclude='.DS_Store' \
            . release-package/

          # Copy firmware binaries to a dedicated folder
          mkdir -p release-package/firmware-binaries
          if [ -d "artifacts" ]; then
            cp -r artifacts/* release-package/firmware-binaries/ 2>/dev/null || true
          fi

          # Create comprehensive README for release
          cat > release-package/RELEASE_README.md << 'EOF'
          # HardFOC TLE92466ED Driver - Release ${{ env.RELEASE_VERSION }}

          ## üì¶ Package Contents

          ### üîß Source Code
          - `src/` - Core source code implementation
          - `include/` - Header files and interfaces
          - `examples/esp32/` - ESP32 example applications
          - `components/` - ESP-IDF components

          ### üìö Documentation
          - `docs/` - Complete API documentation
          - `examples/esp32/docs/` - Example-specific documentation
          - `README.md` - Project overview and setup

          ### üèóÔ∏è Build System
          - `CMakeLists.txt` - CMake configuration
          - `examples/esp32/CMakeLists.txt` - ESP32 project configuration
          - `examples/esp32/sdkconfig` - ESP-IDF configuration
          - `examples/esp32/app_config.yml` - Application configuration

          ### üöÄ Firmware Binaries
          - `firmware-binaries/` - Pre-built ESP32 firmware for all applications
          - Built with ESP-IDF v5.5
          - Target: ESP32-C6
          - Debug and Release configurations available

          ## üõ†Ô∏è Quick Start

          1. **For ESP32 Development:**
             ```bash
             cd examples/esp32
             ./scripts/setup_repo.sh
             ./scripts/build_app.sh basic_usage Release
             ```

          2. **For Library Integration:**
             ```bash
             # Include src/ and include/ in your project
             # Link against the provided CMakeLists.txt
             ```

          ## üìã Release Information

          - **Version:** ${{ env.RELEASE_VERSION }}
          - **ESP-IDF Version:** v5.5
          - **Target:** ESP32-C6
          - **Build Date:** $(date -u)
          - **Security:** Full audit completed, no known vulnerabilities

          ## üîó Additional Resources

          - [Online Documentation](https://${{ github.repository_owner }}.github.io/\
            ${{ github.event.repository.name }}/)
          - [GitHub Repository](https://github.com/${{ github.repository }})
          - [Issue Tracker](https://github.com/${{ github.repository }}/issues)

          EOF

          # Create changelog
          echo "# Changelog for ${{ env.RELEASE_VERSION }}" > release-package/CHANGELOG.md
          echo "" >> release-package/CHANGELOG.md
          echo "## Changes since last release:" >> release-package/CHANGELOG.md
          echo "" >> release-package/CHANGELOG.md

          # Get commits since last tag (if any)
          if git describe --tags --abbrev=0 HEAD~1 2>/dev/null; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1)
            echo "### Commits since $LAST_TAG:" >> release-package/CHANGELOG.md
            git log --oneline --no-merges $LAST_TAG..HEAD >> release-package/CHANGELOG.md
          else
            echo "### Initial release" >> release-package/CHANGELOG.md
            git log --oneline --no-merges >> release-package/CHANGELOG.md
          fi

          # Create the final package
          cd release-package
          zip -r ../hardfoc-tle92466ed-${{ env.RELEASE_VERSION }}-complete.zip .
          cd ..

          # Create firmware-only package for quick deployment
          if [ -d "artifacts" ]; then
            cd artifacts
            zip -r ../hardfoc-tle92466ed-${{ env.RELEASE_VERSION }}-firmware-only.zip .
            cd ..
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          body: |
            ## üöÄ HardFOC TLE92466ED Driver Release ${{ env.RELEASE_VERSION }}

            ### üì¶ Complete Software Package
            - **Source Code**: Full C++23 implementation with ESP32 examples
            - **Documentation**: Complete API docs and usage examples
            - **Firmware Binaries**: Pre-built ESP32-C6 firmware for all applications
            - **Build System**: Ready-to-use CMake and ESP-IDF configuration

            ### üéØ What's Included
            - **TLE92466ED Driver**: Core C++23 library for ESP32
            - **ESP32 Examples**: Comprehensive test applications
            - **Documentation**: API reference and usage guides
            - **Firmware Binaries**: Debug and Release builds for ESP32-C6
            - **Build Tools**: Automated build and flash scripts

            ### üõ†Ô∏è Quick Start
            1. Download the complete package
            2. Extract and navigate to `examples/esp32/`
            3. Run `./scripts/setup_repo.sh` for development
            4. Use `./scripts/build_app.sh <app_name> <build_type>` to build

            ### üìö Documentation
            - [Online Documentation](https://${{ github.repository_owner }}.github.io/\
              ${{ github.event.repository.name }}/)
            - [API Reference](https://${{ github.repository_owner }}.github.io/\
              ${{ github.event.repository.name }}/api/)
            - [ESP32 Examples](https://${{ github.repository_owner }}.github.io/\
              ${{ github.event.repository.name }}/examples/)

            ### üõ°Ô∏è Security & Quality
            - Full security audit completed
            - CodeQL analysis: ${{ needs.wait-for-advanced-ci.result == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Issues found' }}
            - Comprehensive test suite
            - No known vulnerabilities

            ### üìã Technical Details
            - **ESP-IDF Version**: v5.5
            - **Target**: ESP32-C6
            - **Build System**: CMake + ESP-IDF
            - **Language**: C++23
            - **License**: See LICENSE file
          draft: false
          prerelease: false

      - name: Upload Complete Software Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: hardfoc-tle92466ed-${{ env.RELEASE_VERSION }}-complete.zip
          asset_name: hardfoc-tle92466ed-${{ env.RELEASE_VERSION }}-complete.zip
          asset_content_type: application/zip

      - name: Upload Firmware-Only Package
        if: success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: hardfoc-tle92466ed-${{ env.RELEASE_VERSION }}-firmware-only.zip
          asset_name: hardfoc-tle92466ed-${{ env.RELEASE_VERSION }}-firmware-only.zip
          asset_content_type: application/zip

